using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows;
using System.Windows.Forms;
using Hex_Srec_process_N;
using NameSpace_BinProcess;
using System.Threading;
using ProgaramerOrderProcess;
using UART;
using NS_Config;
using System.IO.Ports;
using DeviceManage;
using HslCommunication.Profinet;
using HslCommunication.Profinet.Melsec;
using HslCommunication;
using System.Net.Sockets;
using System.Runtime.InteropServices;
namespace ISP_develop
{
    public partial class MainForm : Form
    {
        Class_ProgaramerOrderProcess1 ProgaramerOrderProcess1_Obj = new Class_ProgaramerOrderProcess1();
        Class_ProgaramerOrderProcess2 ProgaramerOrderProcess2_Obj = new Class_ProgaramerOrderProcess2();
        Class_ProgaramerOrderProcess3 ProgaramerOrderProcess3_Obj = new Class_ProgaramerOrderProcess3();
        Class_ProgaramerOrderProcess4 ProgaramerOrderProcess4_Obj = new Class_ProgaramerOrderProcess4();
        Class_ProgaramerOrderProcess5 ProgaramerOrderProcess5_Obj = new Class_ProgaramerOrderProcess5();
        Class_ProgaramerOrderProcess6 ProgaramerOrderProcess6_Obj = new Class_ProgaramerOrderProcess6();
        Class_ProgaramerOrderProcess7 ProgaramerOrderProcess7_Obj = new Class_ProgaramerOrderProcess7();
        Class_ProgaramerOrderProcess8 ProgaramerOrderProcess8_Obj = new Class_ProgaramerOrderProcess8();


        UInt32 FailCount = 0;
        // UInt32 PassCount = 0;
        UInt32 TotalCount = 0;
        //bool ConnectFlag = false;
        bool[] ConnectFlagSub = new bool[9];
        //bool BusyFlag = false;
        bool[] BusyFlagSub = new bool[9];
        int TargetMCUSlecet = -1;
        int FrequencySlecet = 0x00;
        //int COMSlecet = 0x00;
        public static int[] COMSlecet = new int[9];//0 as flag for all;1-8 for all ports

        public static bool[] COMResult = new bool[9];//0 as flag for all;1-8 for all ports
        public static bool[] COMFinished = new bool[9]{false, false, false, false, false, false, false, false, false };//0 as flag for all;1-8 for all ports

        HexSrec_Process HexProcess_obj = new HexSrec_Process();
        public static byte[] HexData = new byte[1];
        UInt32 RecordCount = 0x00;
        public static FrameFormatStr[] HexFileRecord = new FrameFormatStr[1];
        bool ChipEraseFlag = true;
        System.Windows.Forms.Timer t1 = new System.Windows.Forms.Timer();
 
        public static void timeCycle(object sender, EventArgs e)
        {

        }


        string hexformat = "";
        object lockThisShow1 = new object();
        object lockThisShow2 = new object();
        object lockThisStart = new object();
        object lockThisExcute = new object();
        object lockThisExcuteF = new object();
        object lockThisProcessbar = new object();
        object lockThisLabel = new object();
        object lockThisStatus = new object();
        object lockThis8 = new object();
        object lockThis9 = new object();
        object lockThis10 = new object();

        string ComText1 = ""; 
        string ComText2 = ""; 
        string ComText3 = ""; 
        string ComText4 = ""; 
        string ComText5 = ""; 
        string ComText6 = ""; 
        string ComText7 = ""; 
        string ComText8 = "";

        string strTextinfoAll = "";
        string strTextinfo1 = "";
        string strTextinfo2 = "";
        string strTextinfo3 = "";
        string strTextinfo4 = "";
        string strTextinfo5 = "";
        string strTextinfo6 = "";
        string strTextinfo7 = "";
        string strTextinfo8 = "";

        bool bStopAll = false;
        bool bStop1 = false;
        bool bStop2 = false;
        bool bStop3 = false;
        bool bStop4 = false;
        bool bStop5 = false;
        bool bStop6 = false;
        bool bStop7 = false;
        bool bStop8 = false;

        bool bNeedEncry = false;

        Thread t,t2,t3,t4,t5,t6,t7,t8;


        public MainForm()
        {
            InitializeComponent();
        }
        //Class_ProgaramerOrderProcess Class_ProgaramerOrderProcess_obj = new Class_ProgaramerOrderProcess();
        //public void ShowMsg(string str)
        //{

        //    if (TextBox_Info.InvokeRequired)
        //    {
        //        TextBox_Info.Invoke(new Action<string>((s) =>
        //        {
        //            TextBox_Info.Text += s + "<--" + DateTime.Now + "-->";
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //        }), str);
        //    }
        //    else
        //    {
        //        TextBox_Info.Text += str + "<--" + DateTime.Now + "-->";
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //}
        //public void ShowMsgWithLine(string str)
        //{
        //    if (TextBox_Info.InvokeRequired)
        //    {
        //        TextBox_Info.Invoke(new Action<string>((s) =>
        //        {
        //            TextBox_Info.Text += s + "<--" + DateTime.Now.ToString("hh:mm:ss") + "-->";
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //        }), str);
        //    }
        //    else
        //    {
        //        TextBox_Info.Text += str + "\r\n" + "<--" + DateTime.Now.ToString("hh:mm:ss") + "-->";
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //}

        public void ShowMsg(string str,int index)
        {
            lock (lockThisShow1)
            {
                // Access thread-sensitive resources.
                string strtmp = "";
                strtmp = str;
                if (index == 1)
                    strtmp = "\r\n" + "[Port1]" + str;
                else if (index == 2)
                    strtmp = "\r\n" + "[Port2]" + str;
                else if (index == 3)
                    strtmp = "\r\n" + "[Port3]" + str;
                else if (index == 4)
                    strtmp = "\r\n" + "[Port4]" + str;
                else if (index == 5)
                    strtmp = "\r\n" + "[Port5]" + str;
                else if (index == 6)
                    strtmp = "\r\n" + "[Port6]" + str;
                else if (index == 7)
                    strtmp = "\r\n" + "[Port7]" + str;
                else if (index == 8)
                    strtmp = "\r\n" + "[Port8]" + str;
                if (TextBox_Info.InvokeRequired)
                {
                    TextBox_Info.BeginInvoke(new Action<string>((s) =>
                    {
                        TextBox_Info.Text += s + "<--" + DateTime.Now.ToString("hh:mm:ss") + "-->";
                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        TextBox_Info.ScrollToCaret();
                    }), strtmp);
                }
                else
                {
                    TextBox_Info.Text += strtmp + "\r\n" + "<--" + DateTime.Now.ToString("hh:mm:ss") + "-->";
                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    TextBox_Info.ScrollToCaret();
                }
                if (index == 1)
                {
                    strTextinfo1 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->";
                }
                else if (index == 2)
                {
                    strTextinfo2 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->";
                }
                else if (index == 3)
                {
                    strTextinfo3 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->";
                }
                else if (index == 4)
                {
                    strTextinfo4 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->";
                }
                else if (index == 5)
                {
                    strTextinfo5 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->";
                }
                else if (index == 6)
                {
                    strTextinfo6 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->";
                }
                else if (index == 7)
                {
                    strTextinfo7 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->";
                }
                else if (index == 8)
                {
                    strTextinfo8 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->";
                }
                strTextinfoAll += strtmp + "\r\n" + "<--" + DateTime.Now + "-->";
            }
        }
        public void ShowMsgWithLine(string str,int index)
        {
            lock (lockThisShow2)
            {
                // Access thread-sensitive resources.
                string strtmp = "";
                strtmp = str;
                if (index == 1)
                {
                    strtmp = "\r\n" + "[Port1]" + str;
                }
                else if (index == 2)
                {
                    strtmp = "\r\n" + "[Port2]" + str;
                }
                else if (index == 3)
                {
                    strtmp = "\r\n" + "[Port3]" + str;
                }
                else if (index == 4)
                {
                    strtmp = "\r\n" + "[Port4]" + str;
                }
                else if (index == 5)
                {
                    strtmp = "\r\n" + "[Port5]" + str;
                }
                else if (index == 6)
                {
                    strtmp = "\r\n" + "[Port6]" + str;
                }
                else if (index == 7)
                {
                    strtmp = "\r\n" + "[Port7]" + str;
                }
                else if (index == 8)
                {
                    strtmp = "\r\n" + "[Port8]" + str;
                }
                if (TextBox_Info.InvokeRequired)
                {
                    TextBox_Info.BeginInvoke(new Action<string>((s) =>
                    {
                        TextBox_Info.Text += s + "<--" + DateTime.Now + "-->";
                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        TextBox_Info.ScrollToCaret();
                    }), strtmp);
                }
                else
                {
                    TextBox_Info.Text += strtmp + "\r\n" + "<--" + DateTime.Now + "-->";
                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    TextBox_Info.ScrollToCaret();
                }
                if (index == 1)
                {
                    strTextinfo1 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->"; 
                }
                else if (index == 2)
                {
                    strTextinfo2 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->"; 
                }
                else if (index == 3)
                {
                    strTextinfo3 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->"; 
                }
                else if (index == 4)
                {
                    strTextinfo4 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->"; 
                }
                else if (index == 5)
                {
                    strTextinfo5 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->"; 
                }
                else if (index == 6)
                {
                    strTextinfo6 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->"; 
                }
                else if (index == 7)
                {
                    strTextinfo7 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->"; 
                }
                else if (index == 8)
                {
                    strTextinfo8 += strtmp + "\r\n" + "<--" + DateTime.Now + "-->"; 
                }
                strTextinfoAll += strtmp + "\r\n" + "<--" + DateTime.Now + "-->"; 
            }
        }
        
        private void ConnectedConfigSet()
        {
            ////if(Convert.ToInt32(ProgaramerOrderProcess1_Obj.DisplayText_obj.EraseMode) == 0)
            ////{
            ////    //RadioButton_ChipErase.Invoke(new Action<bool>((b) =>
            ////    //{
            ////    //    RadioButton_ChipErase.Checked = b;
            ////    //}), true);
            ////    //RadioButton_ChipErase.Invoke(new Action<bool>((b) =>
            ////    //{
            ////    //    RadioButton_PageErase.Checked = b;
            ////    //}), false);
            ////}
            ////else
            ////{
            ////    RadioButton_ChipErase.BeginInvoke(new Action<bool>((b) =>
            ////    {
            ////        RadioButton_ChipErase.Checked = b;
            ////    }), false);
            ////    RadioButton_ChipErase.BeginInvoke(new Action<bool>((b) =>
            ////    {
            ////        RadioButton_PageErase.Checked = b;
            ////    }), true);
            ////}
            //RadioButton_ChipErase.BeginInvoke(new Action<bool>((b) =>
            //{
            //    RadioButton_ChipErase.Checked = b;
            //}), true);
            ////         if (Convert.ToInt32(ProgaramerOrderProcess1_Obj.DisplayText_obj.EraseEnb) == 0)
            ////         {
            ////             CheckBox_Erase.BeginInvoke(new Action<bool>((b) =>
            ////             {
            ////                 CheckBox_Erase.Checked = b;
            ////             }), false);
            //////             CheckBox_Erase.Checked = false;
            ////         }
            ////         else
            ////         {
            ////             CheckBox_Erase.BeginInvoke(new Action<bool>((b) =>
            ////             {
            ////                 CheckBox_Erase.Checked = b;
            ////             }), true);
            ////             //CheckBox_Erase.Checked = true;
            ////         }
            //CheckBox_Erase.BeginInvoke(new Action<bool>((b) =>
            //{
            //    CheckBox_Erase.Checked = b;
            //}), true);

            ////if (Convert.ToInt32(ProgaramerOrderProcess1_Obj.DisplayText_obj.BankEnb) == 0)
            ////{
            ////    CheckBox_BlankCheck.BeginInvoke(new Action<bool>((b) =>
            ////    {
            ////        CheckBox_BlankCheck.Checked = b;
            ////    }), false);
            ////    //CheckBox_BlankCheck.Checked = false;
            ////}
            ////else
            ////{
            ////    CheckBox_BlankCheck.BeginInvoke(new Action<bool>((b) =>
            ////    {
            ////        CheckBox_BlankCheck.Checked = b;
            ////    }), true);
            ////    //CheckBox_BlankCheck.Checked = true;
            ////}
            //CheckBox_BlankCheck.BeginInvoke(new Action<bool>((b) =>
            //{
            //    CheckBox_BlankCheck.Checked = b;
            //}), true);
            ////if (Convert.ToInt32(ProgaramerOrderProcess1_Obj.DisplayText_obj.ProEnb) == 0)
            ////{
            ////    CheckBox_Program.BeginInvoke(new Action<bool>((b) =>
            ////    {
            ////        CheckBox_Program.Checked = b;
            ////    }), false);
            ////    //CheckBox_Program.Checked = false;
            ////}
            ////else
            ////{
            ////    CheckBox_Program.BeginInvoke(new Action<bool>((b) =>
            ////    {
            ////        CheckBox_Program.Checked = b;
            ////    }), true);
            ////    //CheckBox_Program.Checked = true;
            ////}
            //CheckBox_Program.BeginInvoke(new Action<bool>((b) =>
            //{
            //    CheckBox_Program.Checked = b;
            //}), true);
            ////if (Convert.ToInt32(ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyEnb) == 0)
            ////{
            ////    CheckBox_Verify.BeginInvoke(new Action<bool>((b) =>
            ////    {
            ////        CheckBox_Verify.Checked = b;
            ////    }), false);
            ////    // CheckBox_Verify.Checked = false;
            ////}
            ////else
            ////{
            ////    CheckBox_Verify.BeginInvoke(new Action<bool>((b) =>
            ////    {
            ////        CheckBox_Verify.Checked = b;
            ////    }), true);
            ////    //CheckBox_Verify.Checked = true;
            ////}
            //CheckBox_Verify.BeginInvoke(new Action<bool>((b) =>
            //{
            //    CheckBox_Verify.Checked = b;
            //}), true);
            ////if (Convert.ToInt32(ProgaramerOrderProcess1_Obj.DisplayText_obj.EncryptEnb) == 0)
            ////{
            ////    CheckBox_Encrypt.BeginInvoke(new Action<bool>((b) =>
            ////    {
            ////        CheckBox_Encrypt.Checked = b;
            ////    }), false);
            ////    //CheckBox_Encrypt.Checked = false;
            ////}
            ////else
            ////{
            ////    CheckBox_Encrypt.BeginInvoke(new Action<bool>((b) =>
            ////    {
            ////        CheckBox_Encrypt.Checked = b;
            ////    }), true);
            ////    //CheckBox_Encrypt.Checked = true;
            ////}
            //CheckBox_Encrypt.BeginInvoke(new Action<bool>((b) =>
            //{
            //    CheckBox_Encrypt.Checked = b;
            //}), false);
        }


        private void ConnectedConfigClear()
        {
            RadioButton_PageErase.BeginInvoke(new Action<bool>((b) =>
            {
                RadioButton_PageErase.Checked = b;
            }), false);
            RadioButton_ChipErase.BeginInvoke(new Action<bool>((b) =>
            {
                RadioButton_ChipErase.Checked = b;
            }), false);
            CheckBox_Erase.BeginInvoke(new Action<bool>((b) =>
            {
                RadioButton_PageErase.Checked = b;
            }), false);
            CheckBox_BlankCheck.BeginInvoke(new Action<bool>((b) =>
            {
                RadioButton_PageErase.Checked = b;
            }), false);
            CheckBox_Program.BeginInvoke(new Action<bool>((b) =>
            {
                RadioButton_PageErase.Checked = b;
            }), false);
            CheckBox_Verify.BeginInvoke(new Action<bool>((b) =>
            {
                RadioButton_PageErase.Checked = b;
            }), false);
            CheckBox_Encrypt.BeginInvoke(new Action<bool>((b) =>
            {
                RadioButton_PageErase.Checked = b;
            }), false);
            //RadioButton_PageErase.Checked = false;
            //RadioButton_ChipErase.Checked = false;
            //CheckBox_Erase.Checked = false;
            //CheckBox_BlankCheck.Checked = false;
            //CheckBox_Program.Checked = false;
            //CheckBox_Verify.Checked = false;
            //CheckBox_Encrypt.Checked = false;

        }

        private void MainConfigSet()
        {
            ComboBox_TargetMCU.SelectedIndex = Convert.ToInt32(ProgaramerOrderProcess1_Obj.DisplayText_obj.MCUSelected);
            ComboBox_Frequency.SelectedIndex = Convert.ToInt32(ProgaramerOrderProcess1_Obj.DisplayText_obj.CrystalSelected);
            TextBox_HexFile.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.HexFileURL;
            string[] ss = SerialPort.GetPortNames();
            for (int i = 0; i < ss.Length; i++)
            {
                if (ss[i] == ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect1)
                {
                    ComboBox_COM.SelectedIndex = i;
                    COMSlecet[1] = ComboBox_COM.SelectedIndex;

                }
                if (ss[i] == ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect2)
                {
                    ComboBox_COM2.SelectedIndex = i;
                    COMSlecet[2]  = ComboBox_COM2.SelectedIndex ;
                }
                if (ss[i] == ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect3)
                {
                    ComboBox_COM3.SelectedIndex = i;
                    COMSlecet[3] = ComboBox_COM3.SelectedIndex;
                }
                if (ss[i] == ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect4)
                {
                    ComboBox_COM4.SelectedIndex = i;
                    COMSlecet[4] = ComboBox_COM4.SelectedIndex;
                }
                if (ss[i] == ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect5)
                {
                    ComboBox_COM5.SelectedIndex = i;
                    COMSlecet[5] = ComboBox_COM5.SelectedIndex;
                }
                if (ss[i] == ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect6)
                {
                    ComboBox_COM6.SelectedIndex = i;
                    COMSlecet[6] = ComboBox_COM6.SelectedIndex;
                }
                if (ss[i] == ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect7)
                {
                    ComboBox_COM7.SelectedIndex = i;
                    COMSlecet[7] = ComboBox_COM7.SelectedIndex;
                }
                if (ss[i] == ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect8)
                {
                    ComboBox_COM8.SelectedIndex = i;
                    COMSlecet[8] = ComboBox_COM8.SelectedIndex;
                }
            }

        }

        private void Form1_Load(object sender, EventArgs e)
        {
            ControlsText();
            MainConfigSet();
            //SerialPort_Communiction.Open();
            HexSrec_Process test = new HexSrec_Process();
            //FrameFormatStr[] Data = new FrameFormatStr[test.GetRows("D:\\work\\training.hex") - 1];
            byte[] FlahRAM = new byte[0xf00000];
           // UInt32 RecordCount = 0;
          //  UInt32 FlashBaseAddress = 0x0000;
            WriteDataBuff[] modifydata = new WriteDataBuff[5];
            BinProcess bin = new BinProcess();
            //bin.ReadBinFile(Application.StartupPath + "\\training.bin");
            //bin.WriteBinFile(bin.BinData, 0, bin.BinData.Length, "D:\\work\\training1.bin");
            modifydata[0].Address = 0x11;
            modifydata[0].Data = 0x55;
            modifydata[1].Address = 0x10600;
            modifydata[1].Data = 0x55;
            modifydata[2].Address = 0x2222;
            modifydata[2].Data = 0x55;
            modifydata[3].Address = 0x3333;
            modifydata[3].Data = 0x55;
            modifydata[4].Address = 0x4444;
            modifydata[4].Data = 0x55;
            ChineseToolStripMenuItem.Checked = true;
            comboBoxPortList.SelectedIndex = 0;
            TextBox_Info.Text = strTextinfoAll;

            RadioButton_ChipErase.Checked = true;
            CheckBox_Erase.Checked = true;
            CheckBox_BlankCheck.Checked = true;
            CheckBox_Program.Checked = true;
            CheckBox_Verify.Checked = true;
            if(bNeedEncry)
                CheckBox_Encrypt.Checked = true;
            else
                CheckBox_Encrypt.Checked = false;
            //test.DecodeProcess("D:\\work\\training.hex", ref Data, ref FlahRAM, ref RecordCount, FlashBaseAddress);
            //test.TransferHexType("Intel", "S-Records", Data, "D:\\work\\training1.srec");
            //test.HexFileModify(modifydata, Data, "Intel", "D:\\work\\training2.hex");
        }

        private void radioButton2_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void radioButton1_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void button5_Click(object sender, EventArgs e)
        {
            //byte stats = GetHexFile();
            //if (stats != (byte)eErrNumber.Succesful)
            //{
            //    BusyFlagSub[5] = false;
            //    return;
            //}
            //if (ConnectFlagSub[5] == false)
            //    return;
            //if (BusyFlagSub[5] == true)
            //{
            //    MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
            //                                    MessageBoxIcon.Warning);
            //    return;
            //}
            //else
            //{
            //    //BusyFlag[5] = true;
            //}
            ////Form_Checksum form = new Form_Checksum();
            ////form.Show();
            //Form form = Application.OpenForms["Form_Checksum"];  //查找是否打开过Form1窗体  
            //if (form == null)  //没打开过  
            //{
            //    Form_Checksum fa = new Form_Checksum();
            //    fa.ShowDialog();   //重新new一个Show出来  
            //}
            //else
            //{
            //    form.Focus();   //打开过就让其获得焦点  
            //}
            ////Thread t = new Thread(new ThreadStart(PageErase_thread));
            ////t.Start();
            ////Control.CheckForIllegalCrossThreadCalls = false;
            ////Button_Erase.Enabled = false;
        }

        byte GetHexFile()
        {
            hexformat = TextBox_HexFile.Text.Substring(TextBox_HexFile.Text.LastIndexOf(".") + 1, (TextBox_HexFile.Text.Length - TextBox_HexFile.Text.LastIndexOf(".") - 1));
            hexformat.ToLower();
            if (hexformat == "hex")
            {
                if (!HexProcess_obj.IntelHexFormatDecode(TextBox_HexFile.Text, ref HexFileRecord, ref HexData, ref RecordCount,
                                                         ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex],
                                                         ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageSize[ComboBox_TargetMCU.SelectedIndex] *
                                                         ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageCount[ComboBox_TargetMCU.SelectedIndex]))
                {
                    ////MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.FileFormatError, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                    ////                                MessageBoxIcon.Error);
                    BusyFlagSub[0] = false;
                    BusyFlagSub[1] = false;
                    BusyFlagSub[2] = false;
                    BusyFlagSub[3] = false;
                    BusyFlagSub[4] = false;
                    BusyFlagSub[5] = false;
                    BusyFlagSub[6] = false;
                    BusyFlagSub[7] = false;
                    BusyFlagSub[8] = false;
                    return (byte)eErrNumber.FileFormatErr;
                }
            }
            else if (hexformat == "srec")
            {
                if (!HexProcess_obj.MotorolaHexFormatDecode(TextBox_HexFile.Text, ref HexFileRecord, ref HexData, ref RecordCount,
                                                                         ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex],
                                                                         ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageSize[ComboBox_TargetMCU.SelectedIndex] *
                                                                         ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageCount[ComboBox_TargetMCU.SelectedIndex]))
                {
                    ////MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.FileFormatError, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                    ////                                MessageBoxIcon.Error);
                    BusyFlagSub[0] = false;
                    BusyFlagSub[1] = false;
                    BusyFlagSub[2] = false;
                    BusyFlagSub[3] = false;
                    BusyFlagSub[4] = false;
                    BusyFlagSub[5] = false;
                    BusyFlagSub[6] = false;
                    BusyFlagSub[7] = false;
                    BusyFlagSub[8] = false;
                    return (byte)eErrNumber.FileFormatErr; 
                }
            }
            else if (hexformat == "bin")
            {

            }
            return (byte)eErrNumber.Succesful;
        }

        UInt32 Crystal = 0x00;
        int frequnecy = 0x00;
        //private void Button_Connect_Click(object sender, EventArgs e)
        //{

        //    //if (ProgaramerOrderProcess_Obj.ConnectFlag == false)
        //    //return;
        //    if (BusyFlag == true)
        //    {
        //        MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Warning);
        //        return;
        //    }
        //    else
        //    {
        //        BusyFlag = true;
        //    }
        //    TargetMCUSlecet = ComboBox_TargetMCU.SelectedIndex;
        //    FrequencySlecet = ComboBox_Frequency.SelectedIndex;
        //    COMSlecet[0] = ComboBox_COM.SelectedIndex;

        //    if (ComboBox_TargetMCU.SelectedIndex < 0)
        //    {
        //        MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.SelectTargetMCUEmpty, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //        BusyFlag = false;
        //        return;
        //    }
        //    if (ComboBox_Frequency.SelectedIndex < 0)
        //    {
        //        MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.SelectFrequencyEmpty, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //        BusyFlag = false;
        //        return;
        //    }
        //    if (ComboBox_COM.SelectedIndex < 0)
        //    {
        //        MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.SelectHexFileCOM, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //        BusyFlag = false;
        //        return;
        //    }
        //    if (Button_Start1.Text != ProgaramerOrderProcess_Obj.DisplayText_obj.DisconnectText)
        //    {
        //        if (TextBox_HexFile.Text == "")
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.SelectHexFileEmpty, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                            MessageBoxIcon.Error);
        //            BusyFlag = false;
        //            return;
        //        }
        //    }
        //    if (ConnectFlag == false)
        //    {
        //        if (!ProgaramerOrderProcess_Obj.SetHexFileURL(TextBox_HexFile.Text))
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.URLError, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                            MessageBoxIcon.Error);
        //            BusyFlag = false;
        //            return;
        //        }
        //    }
        //    RecordCount = 0;
        //    /*
        //    if (hexformat == "hex")
        //    {
        //        if (!HexProcess_obj.IntelHexFormatDecode(TextBox_HexFile.Text, ref HexFileRecord, ref HexData, ref RecordCount,
        //                                                 ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex],
        //                                                 ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[ComboBox_TargetMCU.SelectedIndex] *
        //                                                 ProgaramerOrderProcess_Obj.SystemConfig_obj.PageCount[ComboBox_TargetMCU.SelectedIndex]))
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.FileFormatError, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                            MessageBoxIcon.Error);
        //            BusyFlag = false;
        //            return;
        //        }
        //    }
        //    else if (hexformat == "srec")
        //    {
        //        if (!HexProcess_obj.MotorolaHexFormatDecode(TextBox_HexFile.Text, ref HexFileRecord, ref HexData, ref RecordCount,
        //                                                                 ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex],
        //                                                                 ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[ComboBox_TargetMCU.SelectedIndex] *
        //                                                                 ProgaramerOrderProcess_Obj.SystemConfig_obj.PageCount[ComboBox_TargetMCU.SelectedIndex]))
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.FileFormatError, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                            MessageBoxIcon.Error);
        //            BusyFlag = false;
        //            return;
        //        }
        //    }
        //    else if (hexformat == "bin")
        //    {

        //    }
        //    */
        //    if (Button_Start1.Text != ProgaramerOrderProcess_Obj.DisplayText_obj.DisconnectText)
        //    {
        //        byte stats = GetHexFile();
        //        if (stats != (byte)eErrNumber.Succesful)
        //        {
        //            return;
        //        }
        //    }

        //    switch (ComboBox_Frequency.SelectedIndex)
        //    {
        //        case 0:
        //            frequnecy = (int)(9600 * (ProgaramerOrderProcess_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex] / 4000000));
        //            //Crystal = ProgaramerOrderProcess_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex];
        //            Crystal = 0;
        //            break;
                    
        //        case 1:
        //            frequnecy = (int)(9600 * 1);
        //            Crystal = 4000000;
        //            break;
        //        case 2:
        //            frequnecy = (int)(9600 * 1.5);
        //            Crystal = 6000000;
        //            break;
                    
        //        case 3:
        //            frequnecy = (int)(9600 * 2);
        //            Crystal = 8000000;
        //            break;
        //        case 4:
        //            frequnecy = (int)(9600 * 2.5);
        //            Crystal = 10000000;
        //            break;
        //        case 5:
        //            frequnecy = (int)(9600 * 3);
        //            Crystal = 12000000;
        //            break;
        //        case 6:
        //            frequnecy = (int)(9600 * 4);
        //            Crystal = 16000000;
        //            break;
        //        case 7:
        //            frequnecy = (int)(9600 * 4.5);
        //            Crystal = 18000000;
        //            break;
        //        case 8:
        //            frequnecy = (int)(9600 * 5);
        //            Crystal = 20000000;
        //            break;
        //        case 9:
        //            frequnecy = (int)(9600 * 6);
        //            Crystal = 24000000;
        //            break;
        //        case 10:
        //            frequnecy = (int)(9600 * 8);
        //            Crystal = 32000000;
        //            break;
        //    }
        //    if (SerialPort_Communiction.IsOpen == true)
        //    {
        //        try
        //        {
        //            SerialPort_Communiction.Close();
        //        }
        //        catch
        //        {

        //        }
        //    }
        //    SerialPort_Communiction.BaudRate = frequnecy;
        //    SerialPort_Communiction.PortName = ComboBox_COM.Text;
        //    if (SerialPort_Communiction.IsOpen == false)
        //    {
        //        try
        //        {
        //            SerialPort_Communiction.Open();
        //        }
        //        catch (Exception ex)
        //        {

        //        }
        //    }
        //    Control.CheckForIllegalCrossThreadCalls = false;
        //    Thread t = new Thread(new ThreadStart(Connect_thread));
        //    t.Start();
        //    Button_Start1.Enabled = false;

        //}
        private void Button_Start1_Click(object sender, EventArgs e)
        {
            bStop1 = false;
            //if (ProgaramerOrderProcess_Obj.ConnectFlag == false)
            //return;
            if (BusyFlagSub[1] == true)
            {
                MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Warning);
                return;
            }
            else
            {
                BusyFlagSub[1] = true;
            }
            TargetMCUSlecet = ComboBox_TargetMCU.SelectedIndex;
            FrequencySlecet = ComboBox_Frequency.SelectedIndex;
            COMSlecet[1] = ComboBox_COM.SelectedIndex;
            if (ComboBox_TargetMCU.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.SelectTargetMCUEmpty, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[1] = false;
                return;
            }
            if (ComboBox_Frequency.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.SelectFrequencyEmpty, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[1] = false;
                return;
            }
            if (ComboBox_COM.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.SelectHexFileCOM, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[1] = false;
                return;
            }
            //if (Button_Start1.Text != ProgaramerOrderProcess1_Obj.DisplayText_obj.DisconnectText)
            //{
            //    if (TextBox_HexFile.Text == "")
            //    {
            //        MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.SelectHexFileEmpty, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
            //                                        MessageBoxIcon.Error);
            //        BusyFlagSub[1] = false;
            //        return;
            //    }
            //}
            if (ConnectFlagSub[1] == false)
            {
                if (!ProgaramerOrderProcess1_Obj.SetHexFileURL(TextBox_HexFile.Text))
                {
                    MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.URLError, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[1] = false;
                    return;
                }
            }
            RecordCount = 0;
            if (Button_Start1.Text != ProgaramerOrderProcess1_Obj.DisplayText_obj.DisconnectText)
            {
                byte stats = GetHexFile();
                if (stats != (byte)eErrNumber.Succesful)
                {
                    return;
                }
            }

            switch (ComboBox_Frequency.SelectedIndex)
            {
                case 0:
                    frequnecy = (int)(9600 * (ProgaramerOrderProcess1_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex] / 4000000));
                    //Crystal = ProgaramerOrderProcess_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex];
                    Crystal = 0;
                    break;

                case 1:
                    frequnecy = (int)(9600 * 1);
                    Crystal = 4000000;
                    break;
                case 2:
                    frequnecy = (int)(9600 * 1.5);
                    Crystal = 6000000;
                    break;

                case 3:
                    frequnecy = (int)(9600 * 2);
                    Crystal = 8000000;
                    break;
                case 4:
                    frequnecy = (int)(9600 * 2.5);
                    Crystal = 10000000;
                    break;
                case 5:
                    frequnecy = (int)(9600 * 3);
                    Crystal = 12000000;
                    break;
                case 6:
                    frequnecy = (int)(9600 * 4);
                    Crystal = 16000000;
                    break;
                case 7:
                    frequnecy = (int)(9600 * 4.5);
                    Crystal = 18000000;
                    break;
                case 8:
                    frequnecy = (int)(9600 * 5);
                    Crystal = 20000000;
                    break;
                case 9:
                    frequnecy = (int)(9600 * 6);
                    Crystal = 24000000;
                    break;
                case 10:
                    frequnecy = (int)(9600 * 8);
                    Crystal = 32000000;
                    break;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess1_Obj.RetryCnt = 5;
                ProgaramerOrderProcess1_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess1_Obj.RetryCnt = 25;
                ProgaramerOrderProcess1_Obj.ConnectTimeOut = 200;
            }
            if (SerialPort_Communiction1.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction1.Close();
                }
                catch
                {

                }
            }
            SerialPort_Communiction1.BaudRate = frequnecy;
            SerialPort_Communiction1.PortName = ComboBox_COM.Text;
            ComText1 = ComboBox_COM.Text;
            if (SerialPort_Communiction1.IsOpen == false)
            {
                try
                {
                    SerialPort_Communiction1.Open();
                }
                catch //(Exception ex)
                {

                }
            }
            //Control.CheckForIllegalCrossThreadCalls = false;
            Thread t = new Thread(new ThreadStart(Connect_thread1));
            t.Start();
            LabelControl("BUSY...", 1);
            StartControlDisplay(false, 1);
            //Button_Start2.Enabled = false;
            //Button_Start3.Enabled = false;
            //Button_Start4.Enabled = false;
            //Button_Start5.Enabled = false;
            //Button_Start6.Enabled = false;
            //Button_Start7.Enabled = false;
            //Button_Start8.Enabled = false;
        }
        private byte Mcu1Start = 0;
        private byte Mcu2Start = 0;

        private bool Mcu1Busy = false;
        private bool Mcu2Busy = false;
        private byte Mcu1Finished = 0;
        private byte Mcu2Finished = 0;

        private void Plc_thread1()
        {
            COMFinished[1] = false;
            COMFinished[2] = false;
            COMFinished[3] = false;
            COMFinished[4] = false;
            while (bStopAll == false)
            {
                Thread.Sleep(50);

                MCU1Start = GetPLCMcuStatus1();
                if (MCU1Start == false)
                {
                    ShowMsg("MCU1 not ready\r\n", 0);
                }
                else
                {
                    ShowMsg("MCU1 ready\r\n", 0);
                    SetPLCMcuStatus1(false);
                    ShowMsg("Set MCU1 reset\r\n", 0);
                    //if (ComboBox_COM.SelectedIndex < 0)
                    //{

                    //}
                    //else
                    {
                        ///Thread t = new Thread(new ThreadStart(Connect_thread1));
                        ///
                       
                        t.Start();
                        LabelControl("BUSY...", 1);
                    }


                    //if (ComboBox_COM2.SelectedIndex < 0)
                    //{

                    //}
                    //else
                    //{
                    //    //Thread t2 = new Thread(new ThreadStart(Connect_thread2));
                    //    t2.Start();
                    //    LabelControl("BUSY...", 2);
                    //}


                    //if (ComboBox_COM3.SelectedIndex < 0)
                    //{

                    //}
                    //else
                    //{
                    //    //Thread t3 = new Thread(new ThreadStart(Connect_thread3));
                    //    t3.Start();
                    //    LabelControl("BUSY...", 3);
                    //}


                    //if (ComboBox_COM4.SelectedIndex < 0)
                    //{

                    //}
                    //else
                    //{
                    //    //Thread t4 = new Thread(new ThreadStart(Connect_thread4));
                    //    t4.Start();
                    //    LabelControl("BUSY...", 4);
                    //}


                    Control.CheckForIllegalCrossThreadCalls = true;
                    Button_Execute.Enabled = false;

                    Button_Start1.Enabled = false;
                    Button_Start2.Enabled = false;
                    Button_Start3.Enabled = false;
                    Button_Start4.Enabled = false;
                }
                if (COMFinished[1] == true)
                {
                    SetPLCMcu1Chip1Result(COMResult[1]);
                    Mcu1Finished ++;
                    COMFinished[1] = false;
                }
                if (COMFinished[2] == true)
                {
                    SetPLCMcu1Chip2Result(COMResult[2]);
                    Mcu1Finished++;
                    COMFinished[2] = false;
                }
                if (COMFinished[3] == true)
                {
                    SetPLCMcu1Chip3Result(COMResult[3]);
                    Mcu1Finished++;
                    COMFinished[3] = false;
                }
                if (COMFinished[4] == true)
                {
                    SetPLCMcu1Chip4Result(COMResult[4]);
                    Mcu1Finished++;
                    COMFinished[4] = false;
                }
                if (Mcu1Finished == 4)
                {
                    SetPLCMcuFinish1(true);
                    ShowMsg("MCU1 Finished\r\n", 0);
                    COMFinished[1] = false;
                    COMFinished[2] = false;
                    COMFinished[3] = false;
                    COMFinished[4] = false;
                    Mcu1Finished = 0;
                }



            }
        }
        private void Plc_thread2()
        {
            COMFinished[5] = false;
            COMFinished[6] = false;
            COMFinished[7] = false;
            COMFinished[8] = false;
            while (bStopAll == false)
            {
                Thread.Sleep(50);
                MCU2Start = GetPLCMcuStatus2();
                MCU2Start = true;
                if (MCU2Start == false)
                {
                    ShowMsg("MCU2 not ready\r\n",0);
                }
                else
                {
                    ShowMsg("MCU2 ready\r\n",0);
                    SetPLCMcuStatus2( false);
                    
                    if (ComboBox_COM7.SelectedIndex < 0)
                    {

                    }
                    else
                    {
                        //Thread t7 = new Thread(new ThreadStart(Connect_thread7));
                        t7.Start();
                        LabelControl("BUSY...", 7);
                    }
                    
                    if (ComboBox_COM8.SelectedIndex < 0)
                    {

                    }
                    else
                    {
                        //Thread t8 = new Thread(new ThreadStart(Connect_thread8));
                        t8.Start();
                        LabelControl("BUSY...", 8);
                    }

                    if (ComboBox_COM5.SelectedIndex < 0)
                    {

                    }
                    else
                    {
                        //Thread t5 = new Thread(new ThreadStart(Connect_thread5));
                        t5.Start();
                        LabelControl("BUSY...", 5);
                    }

                    if (ComboBox_COM6.SelectedIndex < 0)
                    {

                    }
                    else
                    {
                        //Thread t6 = new Thread(new ThreadStart(Connect_thread6));
                        t6.Start();
                        LabelControl("BUSY...", 6);
                    }
                    Control.CheckForIllegalCrossThreadCalls = true;
                    Button_Execute.Enabled = false;

                    Button_Start5.Enabled = false;
                    Button_Start6.Enabled = false;
                    Button_Start7.Enabled = false;
                    Button_Start8.Enabled = false;
                }

                if (COMFinished[5] == true)
                {
                    SetPLCMcu2Chip1Result( COMResult[5]);
                    Mcu2Finished++;
                    COMFinished[5] = false;
                }
                if (COMFinished[6] == true)
                {
                    SetPLCMcu2Chip2Result(COMResult[6]);
                    Mcu2Finished++;
                    COMFinished[6] = false;
                }
                if (COMFinished[7] == true)
                {
                    SetPLCMcu2Chip3Result( COMResult[7]);
                    Mcu2Finished++;
                    COMFinished[7] = false;
                }
                if (COMFinished[8] == true)
                {
                    SetPLCMcu2Chip4Result( COMResult[8]);
                    Mcu2Finished++;
                    COMFinished[8] = false;
                }
                if (Mcu2Finished == 4)
                {
                    SetPLCMcuFinish2( true);
                    COMFinished[5] = false;
                    COMFinished[6] = false;
                    COMFinished[7] = false;
                    COMFinished[8] = false;
                    Mcu2Finished = 0;
                }
            }

 
        }

        private void Connect_thread1()
        {
            ProgaramerOrderProcess1_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess1_Obj.SystemConfig_obj);
            byte stats = 0x00;
            ProcessbarControl(5, 1);

            if (true)//(ConnectFlagSub[1] == false)
            {

               // byte[] CRdata = new byte[ProgaramerOrderProcess1_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
               // byte[] UIDdata = new byte[ProgaramerOrderProcess1_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
                if (true)
                {
                    try
                    {

                        stats = ProgaramerOrderProcess1_Obj.ConnectProcess(SerialPort_Communiction1, ProgaramerOrderProcess1_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                   ComText1, frequnecy, Crystal);
                        
                    }
                    catch(Exception e)
                    {
                        MessageBox.Show(e.Message, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                        ProgaramerOrderProcess1_Obj.DisConnectProcess(SerialPort_Communiction1);
                        ConnectControlDisplay(ConnectFlagSub[1]);
                        //Button_Start1.Enabled = true;
                        StartControlDisplay(true,1);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        ConnectFlagSub[1] = false;
                        //ProgaramerOrderProcess_Obj.ErrProcess(stats);
                        LabelControl("FAIL", 1);
                        return;
                    }
                }
                if (stats == (byte)eErrNumber.Succesful)
                {
                    
                }
                else
                {
                    ProgaramerOrderProcess1_Obj.DisConnectProcess(SerialPort_Communiction1);
                    ConnectControlDisplay(ConnectFlagSub[1]);
                    //Button_Start1.Enabled = true;
                    StartControlDisplay(true,1);
                    ExcuteControlDisplay(true);
                    Control.CheckForIllegalCrossThreadCalls = true;
                    ConnectFlagSub[1] = false;
                    BusyFlagSub[1] = false;
                    LabelControl("FAIL", 1);
                    ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                    return;
                }
                /*
                stats = ProgaramerOrderProcess_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.UIDAdd[ComboBox_TargetMCU.SelectedIndex]), UIDdata.Length, ref UIDdata);
                string cr = "";
                if (stats == (byte)eErrNumber.Succesful)
                {
                    XMLProcess x = new XMLProcess();
                    
                    for (int i = 0; i < 12; i++)
                    {
                        cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                    }
                    //x.SaveUID(cr, ComboBox_TargetMCU.SelectedIndex);
                }
                else
                {
                    Button_Connect.Enabled = true;
                    //BusyFlag = false;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
                    //Button_Execute.Focus();
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlag = false;
                    return;
                }
                byte[] sentdata = new byte[16];
                for (int i = 0;i<16;i++)
                {
                    string ss = ProgaramerOrderProcess_Obj.SystemConfig_obj.UserArea[ComboBox_TargetMCU.SelectedIndex].Substring(i * 2, 2);
                    sentdata[i] = Convert.ToByte(ss,16);
                }

                if(cr == ProgaramerOrderProcess_Obj.SystemConfig_obj.UID[ComboBox_TargetMCU.SelectedIndex])
                {
                    //stats = ProgaramerOrderProcess_Obj.Read(SerialPort_Communiction,
                                                        //BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);
                    stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex])), sentdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        Button_Connect.Enabled = true;
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ProgaramerOrderProcess_Obj.ErrProcess(stats);
                        //Button_Execute.Focus();
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlag = false;
                        return;
                    }
                }
                */
                ProgaramerOrderProcess1_Obj.XMLProcess_obj.GetText(ref ProgaramerOrderProcess1_Obj.DisplayText_obj);
                ConnectedConfigSet();
                //TextBox_Info.Text = "";
                //if (TextBox_Info.Text == "")
                //{
                //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.ConnectSuccessful;
                //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                //    //TextBox_Info.ScrollToCaret();
                //    ShowMsg(ProgaramerOrderProcess1_Obj.DisplayText_obj.ConnectSuccessful,1);
                //}
                //else
                {
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.ConnectSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.ConnectSuccessful,1);
                }
                if (bStop1 == true)
                {
                    return;
                }
                ProcessbarControl( 2,1);
                
                ConnectFlagSub[1] = true;
                ConnectControlDisplay(ConnectFlagSub[1]);
                //Button_Start1.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.DisconnectText;
                //Button_Start1.Enabled = true;
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[1] = false;
                //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.ConnectSuccessful, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                            //MessageBoxIcon.Warning);
            }
            //else
            //{
            //    SaveConfig();
            //    ConnectedConfigClear();
            //    //if (TextBox_Info.Text == "")
            //    //{
            //    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.DisconnectSuccessful;
            //    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //    //    //TextBox_Info.ScrollToCaret();
            //    //    ShowMsg(ProgaramerOrderProcess1_Obj.DisplayText_obj.DisconnectSuccessful,1);
            //    //}
            //    //else
            //    {
            //        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.DisconnectSuccessful;
            //        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //        //TextBox_Info.ScrollToCaret();
            //        ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.DisconnectSuccessful, 1);
            //    }
            //    ProgaramerOrderProcess1_Obj.DisConnectProcess(SerialPort_Communiction1);
            //   // Button_Start1.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.ConnectText;
            //    ConnectFlagSub[1] = false;
            //    ConnectControlDisplay(ConnectFlagSub[1]);
            //    //Button_Start1.Enabled = true;
            //    Control.CheckForIllegalCrossThreadCalls = true;
            //    BusyFlagSub[1] = false;
            //    //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.DisconnectSuccessful, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
            //                                    //MessageBoxIcon.Warning);
            //}
            Button_Execute_fun1();

            StartControlDisplay(true,1);
            ProgaramerOrderProcess1_Obj.DisConnectProcess(SerialPort_Communiction1);
        }
        private void Connect_thread2()
        {
            ProgaramerOrderProcess2_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess2_Obj.SystemConfig_obj);
            byte stats = 0x00;
            ProcessbarControl(5, 2);
            if (true)//(ConnectFlagSub[2] == false)
            {

                //byte[] CRdata = new byte[ProgaramerOrderProcess2_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
                //byte[] UIDdata = new byte[ProgaramerOrderProcess2_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
                if (true)
                {
                    try
                    {
                        stats = ProgaramerOrderProcess2_Obj.ConnectProcess(SerialPort_Communiction2, ProgaramerOrderProcess2_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                   ComText2, frequnecy, Crystal);
                    }
                    catch //(Exception e)
                    {
                        // MessageBox.Show(e.Message, ProgaramerOrderProcess2_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                        //                              MessageBoxIcon.Error);
                        ProgaramerOrderProcess2_Obj.DisConnectProcess(SerialPort_Communiction2);
                        ConnectControlDisplay(ConnectFlagSub[2]);
                        //Button_Start2.Enabled = true;
                        StartControlDisplay(true,2);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[2] = false;
                        LabelControl("FAIL", 2);
                        //ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                        return;
                    }
                }
                if (stats == (byte)eErrNumber.Succesful)
                {

                }
                else
                {
                    ProgaramerOrderProcess2_Obj.DisConnectProcess(SerialPort_Communiction2);
                    ConnectControlDisplay(ConnectFlagSub[2]);
                    //Button_Start2.Enabled = true;
                    StartControlDisplay(true,2);
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlagSub[2] = false;
                    LabelControl("FAIL", 2);
                    ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                    return;
                }
                /*
                stats = ProgaramerOrderProcess2_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess2_Obj.SystemConfig_obj.UIDAdd[ComboBox_TargetMCU.SelectedIndex]), UIDdata.Length, ref UIDdata);
                string cr = "";
                if (stats == (byte)eErrNumber.Succesful)
                {
                    XMLProcess x = new XMLProcess();
                    
                    for (int i = 0; i < 12; i++)
                    {
                        cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                    }
                    //x.SaveUID(cr, ComboBox_TargetMCU.SelectedIndex);
                }
                else
                {
                    Button_Connect.Enabled = true;
                    //BusyFlag = false;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.MassEraseFail;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                    //Button_Execute.Focus();
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlag = false;
                    return;
                }
                byte[] sentdata = new byte[16];
                for (int i = 0;i<16;i++)
                {
                    string ss = ProgaramerOrderProcess2_Obj.SystemConfig_obj.UserArea[ComboBox_TargetMCU.SelectedIndex].Substring(i * 2, 2);
                    sentdata[i] = Convert.ToByte(ss,16);
                }

                if(cr == ProgaramerOrderProcess2_Obj.SystemConfig_obj.UID[ComboBox_TargetMCU.SelectedIndex])
                {
                    //stats = ProgaramerOrderProcess2_Obj.Read(SerialPort_Communiction,
                                                        //BitConverter.GetBytes(ProgaramerOrderProcess2_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);
                    stats = ProgaramerOrderProcess2_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess2_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex])), sentdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        Button_Connect.Enabled = true;
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.MassEraseFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                        //Button_Execute.Focus();
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlag = false;
                        return;
                    }
                }
                */
                ProgaramerOrderProcess2_Obj.XMLProcess_obj.GetText(ref ProgaramerOrderProcess2_Obj.DisplayText_obj);
                ConnectedConfigSet();
                //TextBox_Info.Text = "";
                //if (TextBox_Info.Text == "")
                //{
                //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.ConnectSuccessful;
                //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                //    //TextBox_Info.ScrollToCaret();
                //    ShowMsg(ProgaramerOrderProcess2_Obj.DisplayText_obj.ConnectSuccessful, 2);
                //}
                //else
                {
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.ConnectSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.ConnectSuccessful,2);
                }
                if (bStop2 == true)
                {
                    return;
                }
                ProcessbarControl( 2,2);

                ConnectFlagSub[2] = true;
                ConnectControlDisplay(ConnectFlagSub[2]);
                // Button_Start2.Text = ProgaramerOrderProcess2_Obj.DisplayText_obj.DisconnectText;
                //Button_Start2.Enabled = true;
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[2] = false;
                //MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.ConnectSuccessful, ProgaramerOrderProcess2_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                //MessageBoxIcon.Warning);
            }
            //else
            //{
            //    SaveConfig();
            //    ConnectedConfigClear();
            //    //if (TextBox_Info.Text == "")
            //    //{
            //    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.DisconnectSuccessful;
            //    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //    //    //TextBox_Info.ScrollToCaret();
            //    //    ShowMsg(ProgaramerOrderProcess2_Obj.DisplayText_obj.DisconnectSuccessful, 2);
            //    //}
            //    //else
            //    {
            //        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.DisconnectSuccessful;
            //        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //        //TextBox_Info.ScrollToCaret();
            //        ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.DisconnectSuccessful, 2);
            //    }
            //    ProgaramerOrderProcess2_Obj.DisConnectProcess(SerialPort_Communiction2);
            //    //Button_Start2.Text = ProgaramerOrderProcess2_Obj.DisplayText_obj.ConnectText;
            //    ConnectFlagSub[2] = false;
            //    ConnectControlDisplay(ConnectFlagSub[2]);
            //    //Button_Start2.Enabled = true;
            //    Control.CheckForIllegalCrossThreadCalls = true;
            //    BusyFlagSub[2] = false;
            //    //MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.DisconnectSuccessful, ProgaramerOrderProcess2_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
            //    //MessageBoxIcon.Warning);
            //}
            Thread.Sleep(5);
            Button_Execute_fun2();
            StartControlDisplay(true,2);
            ExcuteControlDisplay(true);
            ProgaramerOrderProcess2_Obj.DisConnectProcess(SerialPort_Communiction2);
        }
        private void Connect_thread3()
        {
            ProgaramerOrderProcess3_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess3_Obj.SystemConfig_obj);
            byte stats = 0x00;
            ProcessbarControl(5, 3);
            if (true)//(ConnectFlagSub[3] == false)
            {

                //byte[] CRdata = new byte[ProgaramerOrderProcess3_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
               // byte[] UIDdata = new byte[ProgaramerOrderProcess3_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
                if (true)
                {
                    try
                    {
                        stats = ProgaramerOrderProcess3_Obj.ConnectProcess(SerialPort_Communiction3, ProgaramerOrderProcess3_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                   ComText3, frequnecy, Crystal);
                    }
                    catch (Exception e)
                    {
                        MessageBox.Show(e.Message, ProgaramerOrderProcess3_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                        ProgaramerOrderProcess3_Obj.DisConnectProcess(SerialPort_Communiction1);
                        ConnectControlDisplay(ConnectFlagSub[3]);
                        Button_Start3.Enabled = true;
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[3] = false;
                        LabelControl("FAIL", 3);
                        //ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                        return;
                    }
                }
                if (stats == (byte)eErrNumber.Succesful)
                {

                }
                else
                {
                    ProgaramerOrderProcess3_Obj.DisConnectProcess(SerialPort_Communiction3);
                    ConnectControlDisplay(ConnectFlagSub[3]);
                    //Button_Start3.Enabled = true;
                    StartControlDisplay(true,3);
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlagSub[3] = false;
                    LabelControl("FAIL", 3);
                    ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                    return;
                }
                /*
                stats = ProgaramerOrderProcess3_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess3_Obj.SystemConfig_obj.UIDAdd[ComboBox_TargetMCU.SelectedIndex]), UIDdata.Length, ref UIDdata);
                string cr = "";
                if (stats == (byte)eErrNumber.Succesful)
                {
                    XMLProcess x = new XMLProcess();
                    
                    for (int i = 0; i < 12; i++)
                    {
                        cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                    }
                    //x.SaveUID(cr, ComboBox_TargetMCU.SelectedIndex);
                }
                else
                {
                    Button_Connect.Enabled = true;
                    //BusyFlag = false;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.MassEraseFail;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                    //Button_Execute.Focus();
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlag = false;
                    return;
                }
                byte[] sentdata = new byte[16];
                for (int i = 0;i<16;i++)
                {
                    string ss = ProgaramerOrderProcess3_Obj.SystemConfig_obj.UserArea[ComboBox_TargetMCU.SelectedIndex].Substring(i * 2, 2);
                    sentdata[i] = Convert.ToByte(ss,16);
                }

                if(cr == ProgaramerOrderProcess3_Obj.SystemConfig_obj.UID[ComboBox_TargetMCU.SelectedIndex])
                {
                    //stats = ProgaramerOrderProcess3_Obj.Read(SerialPort_Communiction,
                                                        //BitConverter.GetBytes(ProgaramerOrderProcess3_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);
                    stats = ProgaramerOrderProcess3_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess3_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex])), sentdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        Button_Connect.Enabled = true;
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.MassEraseFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                        //Button_Execute.Focus();
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlag = false;
                        return;
                    }
                }
                */
                ProgaramerOrderProcess3_Obj.XMLProcess_obj.GetText(ref ProgaramerOrderProcess3_Obj.DisplayText_obj);
                ConnectedConfigSet();
                //TextBox_Info.Text = "";
                //if (TextBox_Info.Text == "")
                //{
                //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.ConnectSuccessful;
                //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                //    //TextBox_Info.ScrollToCaret();
                //    ShowMsg(ProgaramerOrderProcess3_Obj.DisplayText_obj.ConnectSuccessful,3);
                //}
                //else
                {
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.ConnectSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.ConnectSuccessful, 3);
                }
                if (bStop3 == true)
                {
                    return;
                }
                ProcessbarControl( 2,3);

                ConnectFlagSub[3] = true;
                ConnectControlDisplay(ConnectFlagSub[3]);
                //Button_Start3.Text = ProgaramerOrderProcess3_Obj.DisplayText_obj.DisconnectText;
                //Button_Start3.Enabled = true;
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[3] = false;
                //MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.ConnectSuccessful, ProgaramerOrderProcess3_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                //MessageBoxIcon.Warning);
            }
            //else
            //{
            //    SaveConfig();
            //    ConnectedConfigClear();
            //    //if (TextBox_Info.Text == "")
            //    //{
            //    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.DisconnectSuccessful;
            //    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //    //    //TextBox_Info.ScrollToCaret();
            //    //    ShowMsg(ProgaramerOrderProcess3_Obj.DisplayText_obj.DisconnectSuccessful,3);
            //    //}
            //    //else
            //    {
            //        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.DisconnectSuccessful;
            //        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //        //TextBox_Info.ScrollToCaret();
            //        ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.DisconnectSuccessful, 3);
            //    }
            //    ProgaramerOrderProcess3_Obj.DisConnectProcess(SerialPort_Communiction3);
            //    // Button_Start3.Text = ProgaramerOrderProcess3_Obj.DisplayText_obj.ConnectText;
            //    ConnectFlagSub[3] = false;
            //    ConnectControlDisplay(ConnectFlagSub[3]);
            //    // Button_Start3.Enabled = true;
            //    Control.CheckForIllegalCrossThreadCalls = true;
            //    BusyFlagSub[3] = false;
            //    //MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.DisconnectSuccessful, ProgaramerOrderProcess3_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
            //    //MessageBoxIcon.Warning);
            //}
            Thread.Sleep(5);
            Button_Execute_fun3();
            StartControlDisplay(true,3);
            ProgaramerOrderProcess3_Obj.DisConnectProcess(SerialPort_Communiction3);
        }
        private void Connect_thread4()
        {
            ProgaramerOrderProcess4_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess4_Obj.SystemConfig_obj);
            byte stats = 0x00;
            ProcessbarControl(5, 4);
            if (true)//(ConnectFlagSub[4] == false)
            {

                //byte[] CRdata = new byte[ProgaramerOrderProcess4_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
                //byte[] UIDdata = new byte[ProgaramerOrderProcess4_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
                if (true)
                {
                    try
                    {
                        stats = ProgaramerOrderProcess4_Obj.ConnectProcess(SerialPort_Communiction4, ProgaramerOrderProcess4_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                   ComText4, frequnecy, Crystal);
                    }
                    catch (Exception e)
                    {
                        MessageBox.Show(e.Message, ProgaramerOrderProcess4_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                        ProgaramerOrderProcess4_Obj.DisConnectProcess(SerialPort_Communiction4);
                        ConnectControlDisplay(ConnectFlagSub[4]);
                        //Button_Start4.Enabled = true;
                        StartControlDisplay(true,4);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[4] = false;
                        LabelControl("FAIL", 4);
                        //ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                        return;
                    }
                }
                if (stats == (byte)eErrNumber.Succesful)
                {

                }
                else
                {
                    ProgaramerOrderProcess4_Obj.DisConnectProcess(SerialPort_Communiction4);
                    ConnectControlDisplay(ConnectFlagSub[4]);
                    //Button_Start4.Enabled = true;
                    StartControlDisplay(true,4);
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlagSub[4] = false;
                    LabelControl("FAIL", 4);
                    ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                    return;
                }
                /*
                stats = ProgaramerOrderProcess4_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess4_Obj.SystemConfig_obj.UIDAdd[ComboBox_TargetMCU.SelectedIndex]), UIDdata.Length, ref UIDdata);
                string cr = "";
                if (stats == (byte)eErrNumber.Succesful)
                {
                    XMLProcess x = new XMLProcess();
                    
                    for (int i = 0; i < 12; i++)
                    {
                        cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                    }
                    //x.SaveUID(cr, ComboBox_TargetMCU.SelectedIndex);
                }
                else
                {
                    Button_Connect.Enabled = true;
                    //BusyFlag = false;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.MassEraseFail;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                    //Button_Execute.Focus();
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlag = false;
                    return;
                }
                byte[] sentdata = new byte[16];
                for (int i = 0;i<16;i++)
                {
                    string ss = ProgaramerOrderProcess4_Obj.SystemConfig_obj.UserArea[ComboBox_TargetMCU.SelectedIndex].Substring(i * 2, 2);
                    sentdata[i] = Convert.ToByte(ss,16);
                }

                if(cr == ProgaramerOrderProcess4_Obj.SystemConfig_obj.UID[ComboBox_TargetMCU.SelectedIndex])
                {
                    //stats = ProgaramerOrderProcess4_Obj.Read(SerialPort_Communiction,
                                                        //BitConverter.GetBytes(ProgaramerOrderProcess4_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);
                    stats = ProgaramerOrderProcess4_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess4_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex])), sentdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        Button_Connect.Enabled = true;
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.MassEraseFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                        //Button_Execute.Focus();
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlag = false;
                        return;
                    }
                }
                */
                ProgaramerOrderProcess4_Obj.XMLProcess_obj.GetText(ref ProgaramerOrderProcess4_Obj.DisplayText_obj);
                ConnectedConfigSet();
                //TextBox_Info.Text = "";
                //if (TextBox_Info.Text == "")
                //{
                //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectSuccessful;
                //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                //    //TextBox_Info.ScrollToCaret();
                //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectSuccessful,4);
                //}
                //else
                {
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectSuccessful,4);
                }
                if (bStop4 == true)
                {
                    return;
                }
                ProcessbarControl( 2,4);

                ConnectFlagSub[4] = true;
                ConnectControlDisplay(ConnectFlagSub[4]);
                //Button_Start4.Text = ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectText;
                //Button_Start4.Enabled = true;
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[4] = false;

                //MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectSuccessful, ProgaramerOrderProcess4_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                //MessageBoxIcon.Warning);
            }
            //else
            //{
            //    SaveConfig();
            //    ConnectedConfigClear();
            //    //if (TextBox_Info.Text == "")
            //    //{
            //    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectSuccessful;
            //    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //    //    //TextBox_Info.ScrollToCaret();
            //    //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectSuccessful,4);
            //    //}
            //    //else
            //    {
            //        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectSuccessful;
            //        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //        //TextBox_Info.ScrollToCaret();
            //        ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectSuccessful,4);
            //    }
            //    ProgaramerOrderProcess4_Obj.DisConnectProcess(SerialPort_Communiction4);
            //    //Button_Start4.Text = ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectText;
            //    ConnectFlagSub[4] = false;
            //    ConnectControlDisplay(ConnectFlagSub[4]);
            //    //Button_Start4.Enabled = true;
            //    Control.CheckForIllegalCrossThreadCalls = true;
            //    BusyFlagSub[4] = false;
            //    //MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectSuccessful, ProgaramerOrderProcess4_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
            //    //MessageBoxIcon.Warning);
            //}
            Thread.Sleep(5);
            Button_Execute_fun4();
            StartControlDisplay(true,4);
            ProgaramerOrderProcess4_Obj.DisConnectProcess(SerialPort_Communiction4);
        }
        private void Connect_thread5()
        {
            ProgaramerOrderProcess5_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess5_Obj.SystemConfig_obj);
            byte stats = 0x00;
            ProcessbarControl(5, 5);
            if (true)//(ConnectFlagSub[5] == false)
            {

                //byte[] CRdata = new byte[ProgaramerOrderProcess5_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
                //byte[] UIDdata = new byte[ProgaramerOrderProcess5_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
                if (true)
                {
                    try
                    {
                        stats = ProgaramerOrderProcess5_Obj.ConnectProcess(SerialPort_Communiction5, ProgaramerOrderProcess5_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                   ComText5, frequnecy, Crystal);
                    }
                    catch (Exception e)
                    {
                        MessageBox.Show(e.Message, ProgaramerOrderProcess5_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                        ProgaramerOrderProcess5_Obj.DisConnectProcess(SerialPort_Communiction5);
                        ConnectControlDisplay(ConnectFlagSub[5]);
                        //Button_Start5.Enabled = true;
                        StartControlDisplay(true,5);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[5] = false;
                        LabelControl("FAIL", 5);
                        //ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                        return;
                    }
                }
                if (stats == (byte)eErrNumber.Succesful)
                {

                }
                else
                {
                    ProgaramerOrderProcess5_Obj.DisConnectProcess(SerialPort_Communiction5);
                    ConnectControlDisplay(ConnectFlagSub[5]);
                    //Button_Start5.Enabled = true;
                    StartControlDisplay(true,5);
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlagSub[5] = false;
                    LabelControl("FAIL", 5);
                    ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                    return;
                }
                /*
                stats = ProgaramerOrderProcess5_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess5_Obj.SystemConfig_obj.UIDAdd[ComboBox_TargetMCU.SelectedIndex]), UIDdata.Length, ref UIDdata);
                string cr = "";
                if (stats == (byte)eErrNumber.Succesful)
                {
                    XMLProcess x = new XMLProcess();
                    
                    for (int i = 0; i < 12; i++)
                    {
                        cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                    }
                    //x.SaveUID(cr, ComboBox_TargetMCU.SelectedIndex);
                }
                else
                {
                    Button_Connect.Enabled = true;
                    //BusyFlag = false;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.MassEraseFail;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                    //Button_Execute.Focus();
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlag = false;
                    return;
                }
                byte[] sentdata = new byte[16];
                for (int i = 0;i<16;i++)
                {
                    string ss = ProgaramerOrderProcess5_Obj.SystemConfig_obj.UserArea[ComboBox_TargetMCU.SelectedIndex].Substring(i * 2, 2);
                    sentdata[i] = Convert.ToByte(ss,16);
                }

                if(cr == ProgaramerOrderProcess5_Obj.SystemConfig_obj.UID[ComboBox_TargetMCU.SelectedIndex])
                {
                    //stats = ProgaramerOrderProcess5_Obj.Read(SerialPort_Communiction,
                                                        //BitConverter.GetBytes(ProgaramerOrderProcess5_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);
                    stats = ProgaramerOrderProcess5_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess5_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex])), sentdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        Button_Connect.Enabled = true;
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.MassEraseFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                        //Button_Execute.Focus();
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlag = false;
                        return;
                    }
                }
                */
                ProgaramerOrderProcess5_Obj.XMLProcess_obj.GetText(ref ProgaramerOrderProcess5_Obj.DisplayText_obj);
                ConnectedConfigSet();
                //TextBox_Info.Text = "";
                //if (TextBox_Info.Text == "")
                //{
                //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.ConnectSuccessful;
                //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                //    //TextBox_Info.ScrollToCaret();
                //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectSuccessful,5);

                //}
                //else
                {
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.ConnectSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectSuccessful,5);
                }
                if (bStop5 == true)
                {
                    return;
                }
                ProcessbarControl( 2,5);

                ConnectFlagSub[5] = true;
                ConnectControlDisplay(ConnectFlagSub[5]);
                //Button_Start5.Text = ProgaramerOrderProcess5_Obj.DisplayText_obj.DisconnectText;
                //Button_Start5.Enabled = true;
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[5] = false;
                //MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.ConnectSuccessful, ProgaramerOrderProcess5_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                //MessageBoxIcon.Warning);
            }
            //else
            //{
            //    SaveConfig();
            //    ConnectedConfigClear();
            //    //if (TextBox_Info.Text == "")
            //    //{
            //    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.DisconnectSuccessful;
            //    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //    //    //TextBox_Info.ScrollToCaret();
            //    //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectSuccessful,5);
            //    //}
            //    //else
            //    {
            //        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.DisconnectSuccessful;
            //        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //        //TextBox_Info.ScrollToCaret();
            //        ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectSuccessful,5);
            //    }
            //    ProgaramerOrderProcess5_Obj.DisConnectProcess(SerialPort_Communiction5);
            //    //Button_Start5.Text = ProgaramerOrderProcess5_Obj.DisplayText_obj.ConnectText;
            //    ConnectFlagSub[5] = false;
            //    ConnectControlDisplay(ConnectFlagSub[5]);
            //    //Button_Start5.Enabled = true;
            //    Control.CheckForIllegalCrossThreadCalls = true;
            //    BusyFlagSub[5] = false;
            //    //MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.DisconnectSuccessful, ProgaramerOrderProcess5_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
            //    //MessageBoxIcon.Warning);
            //}
            Thread.Sleep(5);

            Button_Execute_fun5();
            StartControlDisplay(true,5);
            ProgaramerOrderProcess5_Obj.DisConnectProcess(SerialPort_Communiction5);
        }
        private void Connect_thread6()
        {
            ProgaramerOrderProcess6_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess6_Obj.SystemConfig_obj);
            byte stats = 0x00;
            ProcessbarControl(5, 6);
            if (true)//(ConnectFlagSub[6] == false)
            {

                //byte[] CRdata = new byte[ProgaramerOrderProcess6_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
                //byte[] UIDdata = new byte[ProgaramerOrderProcess6_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
                if (true)
                {
                    try
                    {
                        stats = ProgaramerOrderProcess6_Obj.ConnectProcess(SerialPort_Communiction6, ProgaramerOrderProcess6_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                   ComText6, frequnecy, Crystal);
                    }
                    catch (Exception e)
                    {
                        MessageBox.Show(e.Message, ProgaramerOrderProcess6_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                        ProgaramerOrderProcess6_Obj.DisConnectProcess(SerialPort_Communiction6);
                        ConnectControlDisplay(ConnectFlagSub[6]);
                        //Button_Start6.Enabled = true;
                        StartControlDisplay(true,6);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[6] = false;
                        LabelControl("FAIL", 6);
                        //ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                        return;
                    }
                }
                if (stats == (byte)eErrNumber.Succesful)
                {

                }
                else
                {
                    ProgaramerOrderProcess6_Obj.DisConnectProcess(SerialPort_Communiction6);
                    ConnectControlDisplay(ConnectFlagSub[6]);
                    //Button_Start6.Enabled = true;
                    StartControlDisplay(true,6);
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlagSub[6] = false;
                    LabelControl("FAIL", 6);
                    ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                    return;
                }
                /*
                stats = ProgaramerOrderProcess6_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess6_Obj.SystemConfig_obj.UIDAdd[ComboBox_TargetMCU.SelectedIndex]), UIDdata.Length, ref UIDdata);
                string cr = "";
                if (stats == (byte)eErrNumber.Succesful)
                {
                    XMLProcess x = new XMLProcess();
                    
                    for (int i = 0; i < 12; i++)
                    {
                        cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                    }
                    //x.SaveUID(cr, ComboBox_TargetMCU.SelectedIndex);
                }
                else
                {
                    Button_Connect.Enabled = true;
                    //BusyFlag = false;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.MassEraseFail;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                    //Button_Execute.Focus();
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlag = false;
                    return;
                }
                byte[] sentdata = new byte[16];
                for (int i = 0;i<16;i++)
                {
                    string ss = ProgaramerOrderProcess6_Obj.SystemConfig_obj.UserArea[ComboBox_TargetMCU.SelectedIndex].Substring(i * 2, 2);
                    sentdata[i] = Convert.ToByte(ss,16);
                }

                if(cr == ProgaramerOrderProcess6_Obj.SystemConfig_obj.UID[ComboBox_TargetMCU.SelectedIndex])
                {
                    //stats = ProgaramerOrderProcess6_Obj.Read(SerialPort_Communiction,
                                                        //BitConverter.GetBytes(ProgaramerOrderProcess6_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);
                    stats = ProgaramerOrderProcess6_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess6_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex])), sentdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        Button_Connect.Enabled = true;
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.MassEraseFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                        //Button_Execute.Focus();
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlag = false;
                        return;
                    }
                }
                */
                ProgaramerOrderProcess6_Obj.XMLProcess_obj.GetText(ref ProgaramerOrderProcess6_Obj.DisplayText_obj);
                ConnectedConfigSet();
                //TextBox_Info.Text = "";
                //if (TextBox_Info.Text == "")
                //{
                //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.ConnectSuccessful;
                //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                //    //TextBox_Info.ScrollToCaret();
                //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectSuccessful,6);
                //}
                //else
                {
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.ConnectSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectSuccessful,6);
                }
                if (bStop6 == true)
                {
                    return;
                }
                ProcessbarControl( 2,6);

                ConnectFlagSub[6] = true;
                ConnectControlDisplay(ConnectFlagSub[6]);
                //Button_Start6.Text = ProgaramerOrderProcess6_Obj.DisplayText_obj.DisconnectText;
                //Button_Start6.Enabled = true;
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[6] = false;
                //MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.ConnectSuccessful, ProgaramerOrderProcess6_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                //MessageBoxIcon.Warning);
            }
            //else
            //{
            //    SaveConfig();
            //    ConnectedConfigClear();
            //    //if (TextBox_Info.Text == "")
            //    //{
            //    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.DisconnectSuccessful;
            //    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //    //    //TextBox_Info.ScrollToCaret();
            //    //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectSuccessful,6);
            //    //}
            //    //else
            //    {
            //        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.DisconnectSuccessful;
            //        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //        //TextBox_Info.ScrollToCaret();
            //        ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectSuccessful,6);
            //    }
            //    ProgaramerOrderProcess6_Obj.DisConnectProcess(SerialPort_Communiction6);
            //    //Button_Start6.Text = ProgaramerOrderProcess6_Obj.DisplayText_obj.ConnectText;
            //    ConnectFlagSub[6] = false;
            //    ConnectControlDisplay(ConnectFlagSub[6]);
            //    //Button_Start6.Enabled = true;
            //    Control.CheckForIllegalCrossThreadCalls = true;
            //    BusyFlagSub[6] = false;
            //    //MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.DisconnectSuccessful, ProgaramerOrderProcess6_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
            //    //MessageBoxIcon.Warning);
            //}
            Thread.Sleep(5);
            Button_Execute_fun6();
            StartControlDisplay(true,6);
            ProgaramerOrderProcess6_Obj.DisConnectProcess(SerialPort_Communiction6);
        }
        private void Connect_thread7()
        {
            ProgaramerOrderProcess7_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess7_Obj.SystemConfig_obj);
            byte stats = 0x00;
            ProcessbarControl(5, 7);
            if (true)//(ConnectFlagSub[7] == false)
            {

                //byte[] CRdata = new byte[ProgaramerOrderProcess7_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
                //byte[] UIDdata = new byte[ProgaramerOrderProcess7_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
                if (true)
                {
                    try
                    {
                        stats = ProgaramerOrderProcess7_Obj.ConnectProcess(SerialPort_Communiction7, ProgaramerOrderProcess7_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                   ComText7, frequnecy, Crystal);
                    }
                    catch (Exception e)
                    {
                        MessageBox.Show(e.Message, ProgaramerOrderProcess7_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                        ProgaramerOrderProcess7_Obj.DisConnectProcess(SerialPort_Communiction7);
                        ConnectControlDisplay(ConnectFlagSub[7]);
                        //Button_Start7.Enabled = true;
                        StartControlDisplay(true,7);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[7] = false;
                        LabelControl("FAIL", 7);
                        //ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                        return;
                    }
                }
                if (stats == (byte)eErrNumber.Succesful)
                {

                }
                else
                {
                    ProgaramerOrderProcess7_Obj.DisConnectProcess(SerialPort_Communiction7);
                    ConnectControlDisplay(ConnectFlagSub[7]);
                    //Button_Start7.Enabled = true;
                    StartControlDisplay(true,7);
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlagSub[7] = false;
                    LabelControl("FAIL", 7);
                    ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                    return;
                }
                /*
                stats = ProgaramerOrderProcess7_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess7_Obj.SystemConfig_obj.UIDAdd[ComboBox_TargetMCU.SelectedIndex]), UIDdata.Length, ref UIDdata);
                string cr = "";
                if (stats == (byte)eErrNumber.Succesful)
                {
                    XMLProcess x = new XMLProcess();
                    
                    for (int i = 0; i < 12; i++)
                    {
                        cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                    }
                    //x.SaveUID(cr, ComboBox_TargetMCU.SelectedIndex);
                }
                else
                {
                    Button_Connect.Enabled = true;
                    //BusyFlag = false;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.MassEraseFail;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                    //Button_Execute.Focus();
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlag = false;
                    return;
                }
                byte[] sentdata = new byte[16];
                for (int i = 0;i<16;i++)
                {
                    string ss = ProgaramerOrderProcess7_Obj.SystemConfig_obj.UserArea[ComboBox_TargetMCU.SelectedIndex].Substring(i * 2, 2);
                    sentdata[i] = Convert.ToByte(ss,16);
                }

                if(cr == ProgaramerOrderProcess7_Obj.SystemConfig_obj.UID[ComboBox_TargetMCU.SelectedIndex])
                {
                    //stats = ProgaramerOrderProcess7_Obj.Read(SerialPort_Communiction,
                                                        //BitConverter.GetBytes(ProgaramerOrderProcess7_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);
                    stats = ProgaramerOrderProcess7_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess7_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex])), sentdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        Button_Connect.Enabled = true;
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.MassEraseFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                        //Button_Execute.Focus();
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlag = false;
                        return;
                    }
                }
                */
                ProgaramerOrderProcess7_Obj.XMLProcess_obj.GetText(ref ProgaramerOrderProcess7_Obj.DisplayText_obj);
                ConnectedConfigSet();
                //TextBox_Info.Text = "";
                //if (TextBox_Info.Text == "")
                //{
                //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.ConnectSuccessful;
                //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                //    //TextBox_Info.ScrollToCaret();
                //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectSuccessful,7);
                //}
                //else
                {
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.ConnectSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectSuccessful,7);
                }
                if (bStop7 == true)
                {
                    return;
                }
                ProcessbarControl( 2,7);

                ConnectFlagSub[7] = true;
                ConnectControlDisplay(ConnectFlagSub[7]);
                //Button_Start7.Text = ProgaramerOrderProcess7_Obj.DisplayText_obj.DisconnectText;
                //Button_Start7.Enabled = true;
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[7] = false;
                //MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.ConnectSuccessful, ProgaramerOrderProcess7_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                //MessageBoxIcon.Warning);
            }
            //else
            //{
            //    SaveConfig();
            //    ConnectedConfigClear();
            //    //if (TextBox_Info.Text == "")
            //    //{
            //    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.DisconnectSuccessful;
            //    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //    //    //TextBox_Info.ScrollToCaret();
            //    //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectSuccessful,7);
            //    //}
            //    //else
            //    {
            //        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.DisconnectSuccessful;
            //        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //        //TextBox_Info.ScrollToCaret();
            //        ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectSuccessful,7);
            //    }
            //    ProgaramerOrderProcess7_Obj.DisConnectProcess(SerialPort_Communiction7);
            //    //Button_Start7.Text = ProgaramerOrderProcess7_Obj.DisplayText_obj.ConnectText;
            //    ConnectFlagSub[7] = false;
            //    ConnectControlDisplay(ConnectFlagSub[7]);
            //    //Button_Start7.Enabled = true;
            //    Control.CheckForIllegalCrossThreadCalls = true;
            //    BusyFlagSub[7] = false;
            //    //MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.DisconnectSuccessful, ProgaramerOrderProcess7_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
            //    //MessageBoxIcon.Warning);
            //}
            Thread.Sleep(5);
            Button_Execute_fun7();
            StartControlDisplay(true,7);
            ProgaramerOrderProcess7_Obj.DisConnectProcess(SerialPort_Communiction7);
        }
        private void Connect_thread8()
        {
            ProgaramerOrderProcess8_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess8_Obj.SystemConfig_obj);
            byte stats = 0x00;
            ProcessbarControl(5, 8);
            if (true)//(ConnectFlagSub[8] == false)
            {

                //byte[] CRdata = new byte[ProgaramerOrderProcess8_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
                //byte[] UIDdata = new byte[ProgaramerOrderProcess8_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
                if (true)
                {
                    try
                    {
                        stats = ProgaramerOrderProcess8_Obj.ConnectProcess(SerialPort_Communiction8, ProgaramerOrderProcess8_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                   ComText8, frequnecy, Crystal);
                    }
                    catch (Exception e)
                    {
                        MessageBox.Show(e.Message, ProgaramerOrderProcess8_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                        ProgaramerOrderProcess8_Obj.DisConnectProcess(SerialPort_Communiction8);
                        ConnectControlDisplay(ConnectFlagSub[8]);
                        //Button_Start8.Enabled = true;
                        StartControlDisplay(true,8);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[8] = false;
                        LabelControl("FAIL", 8);
                        //ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                        return;
                    }
                }
                if (stats == (byte)eErrNumber.Succesful)
                {

                }
                else
                {
                    ProgaramerOrderProcess8_Obj.DisConnectProcess(SerialPort_Communiction8);
                    ConnectControlDisplay(ConnectFlagSub[8]);
                    //Button_Start8.Enabled = true;
                    StartControlDisplay(true,8);
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlagSub[8] = false;
                    LabelControl("FAIL", 8);
                    ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                    return;
                }
                /*
                stats = ProgaramerOrderProcess8_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess8_Obj.SystemConfig_obj.UIDAdd[ComboBox_TargetMCU.SelectedIndex]), UIDdata.Length, ref UIDdata);
                string cr = "";
                if (stats == (byte)eErrNumber.Succesful)
                {
                    XMLProcess x = new XMLProcess();
                    
                    for (int i = 0; i < 12; i++)
                    {
                        cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                    }
                    //x.SaveUID(cr, ComboBox_TargetMCU.SelectedIndex);
                }
                else
                {
                    Button_Connect.Enabled = true;
                    //BusyFlag = false;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.MassEraseFail;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                    //Button_Execute.Focus();
                    Control.CheckForIllegalCrossThreadCalls = true;
                    BusyFlag = false;
                    return;
                }
                byte[] sentdata = new byte[16];
                for (int i = 0;i<16;i++)
                {
                    string ss = ProgaramerOrderProcess8_Obj.SystemConfig_obj.UserArea[ComboBox_TargetMCU.SelectedIndex].Substring(i * 2, 2);
                    sentdata[i] = Convert.ToByte(ss,16);
                }

                if(cr == ProgaramerOrderProcess8_Obj.SystemConfig_obj.UID[ComboBox_TargetMCU.SelectedIndex])
                {
                    //stats = ProgaramerOrderProcess8_Obj.Read(SerialPort_Communiction,
                                                        //BitConverter.GetBytes(ProgaramerOrderProcess8_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);
                    stats = ProgaramerOrderProcess8_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess8_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex])), sentdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        Button_Connect.Enabled = true;
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.MassEraseFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                        //Button_Execute.Focus();
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlag = false;
                        return;
                    }
                }
                */
                ProgaramerOrderProcess8_Obj.XMLProcess_obj.GetText(ref ProgaramerOrderProcess8_Obj.DisplayText_obj);
                ConnectedConfigSet();
                //TextBox_Info.Text = "";
                //if (TextBox_Info.Text == "")
                //{
                //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.ConnectSuccessful;
                //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                //    //TextBox_Info.ScrollToCaret();
                //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectSuccessful,8);
                //}
                //else
                {
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.ConnectSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.ConnectSuccessful,8);
                }
                if (bStop8 == true)
                {
                    return;
                }
                ProcessbarControl( 2,8);

                ConnectFlagSub[8] = true;
                ConnectControlDisplay(ConnectFlagSub[8]);
                //Button_Start8.Text = ProgaramerOrderProcess8_Obj.DisplayText_obj.DisconnectText;
                //Button_Start8.Enabled = true;
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[8] = false;
                //MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.ConnectSuccessful, ProgaramerOrderProcess8_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                //MessageBoxIcon.Warning);
            }
            //else
            //{
            //    SaveConfig();
            //    ConnectedConfigClear();
            //    //if (TextBox_Info.Text == "")
            //    //{
            //    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.DisconnectSuccessful;
            //    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //    //    //TextBox_Info.ScrollToCaret();
            //    //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectSuccessful,8);
            //    //}
            //    //else
            //    {
            //        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.DisconnectSuccessful;
            //        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
            //        //TextBox_Info.ScrollToCaret();
            //        ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectSuccessful,8);
            //    }
            //    ProgaramerOrderProcess8_Obj.DisConnectProcess(SerialPort_Communiction8);
            //    // Button_Start8.Text = ProgaramerOrderProcess8_Obj.DisplayText_obj.ConnectText;
            //    ConnectFlagSub[8] = false;
            //    ConnectControlDisplay(ConnectFlagSub[8]);
            //    //Button_Start8.Enabled = true;
            //    Control.CheckForIllegalCrossThreadCalls = true;
            //    BusyFlagSub[8] = false;
            //    //MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.DisconnectSuccessful, ProgaramerOrderProcess8_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
            //    //MessageBoxIcon.Warning);
            //}
            Thread.Sleep(5);
            ProcessbarControl(10, 8);
            Button_Execute_fun8();
            StartControlDisplay(true,8);
            ProgaramerOrderProcess8_Obj.DisConnectProcess(SerialPort_Communiction8);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="connectflag"></param>
        void ConnectControlDisplay(bool connectflag)
        {
            //if (connectflag)
            //{
            //    Button_BlankCheck.Enabled = true;
            //    Button_Checksum.Enabled = true;
            //    Button_Erase.Enabled = true;
            //    //Button_Execute.Enabled = true;
            //    Button_Program.Enabled = true;
            //    Button_Upload.Enabled = true;
            //    Button_Verify.Enabled = true;
            //    CheckBox_Erase.Enabled = true;
            //    CheckBox_BlankCheck.Enabled = true;
            //    CheckBox_Encrypt.Enabled = true;
            //    CheckBox_Program.Enabled = true;
            //    CheckBox_Verify.Enabled = true;
            //    RadioButton_ChipErase.Enabled = true;
            //    RadioButton_PageErase.Enabled = true;
            //    ComboBox_COM.Enabled = false;
            //    ComboBox_Frequency.Enabled = false;
            //    ComboBox_TargetMCU.Enabled = false;
            //    //TextBox_HexFile.Enabled = true;
            //    //PictureBox_hexFile.Enabled= true;
            //    //TextBox_NumberAddress.Enabled = true;
            //    //TextBox_StartNumber.Enabled = true;
            //    //TextBox_Length.Enabled = true;
            //    //TextBox_Interval.Enabled = true;
            //    CheckBox_AutoNumber.Enabled = true;
            //    //Button_OpenClose.Enabled = true;
            //}
            //else
            //{
            //    Button_BlankCheck.Enabled = false;
            //    Button_Checksum.Enabled = false;
            //    Button_Erase.Enabled = false;
            //    //Button_Execute.Enabled = false;
            //    Button_Program.Enabled = false;
            //    Button_Upload.Enabled = false;
            //    Button_Verify.Enabled = false;
            //    CheckBox_Erase.Enabled = false;
            //    CheckBox_BlankCheck.Enabled = false;
            //    CheckBox_Encrypt.Enabled = false;
            //    CheckBox_Program.Enabled = false;
            //    CheckBox_Verify.Enabled = false;
            //    RadioButton_ChipErase.Enabled = false;
            //    RadioButton_PageErase.Enabled = false;
            //    ComboBox_COM.Enabled = true;
            //    ComboBox_Frequency.Enabled = true;
            //    ComboBox_TargetMCU.Enabled = true;
            //    //TextBox_HexFile.Enabled = true;
            //    //PictureBox_hexFile.Enabled= true;
            //    TextBox_NumberAddress.Enabled = false;
            //    TextBox_StartNumber.Enabled = false;
            //    TextBox_Length.Enabled = false;
            //    TextBox_Interval.Enabled = false;
            //    CheckBox_AutoNumber.Enabled = false;
            //    Button_OpenClose.Enabled = false;
            //}
        }
        void StartControlDisplay(bool busyflag,int index)
        {
            lock (lockThisStart)
            {
                if (index == 1)
                {
                    Button_Start1.BeginInvoke(new Action<bool>((b) =>
                    {
                        Button_Start1.Enabled = b;
                    }), busyflag);
                }
                if (index == 2)
                {
                    Button_Start2.BeginInvoke(new Action<bool>((b) =>
                    {
                        Button_Start2.Enabled = b;
                    }), busyflag);
                }
                if (index == 3)
                {
                    Button_Start3.BeginInvoke(new Action<bool>((b) =>
                    {
                        Button_Start3.Enabled = b;
                    }), busyflag);
                }
                if (index == 4)
                {
                    Button_Start4.BeginInvoke(new Action<bool>((b) =>
                    {
                        Button_Start4.Enabled = b;
                    }), busyflag);
                }
                if (index == 5)
                {
                    Button_Start5.BeginInvoke(new Action<bool>((b) =>
                    {
                        Button_Start5.Enabled = b;
                    }), busyflag);
                }
                if (index == 6)
                {
                    Button_Start6.BeginInvoke(new Action<bool>((b) =>
                    {
                        Button_Start6.Enabled = b;
                    }), busyflag);
                }
                if (index == 7)
                {
                    Button_Start7.BeginInvoke(new Action<bool>((b) =>
                    {
                        Button_Start7.Enabled = b;
                    }), busyflag);
                }
                if (index == 8)
                {
                    Button_Start8.BeginInvoke(new Action<bool>((b) =>
                    {
                        Button_Start8.Enabled = b;
                    }), busyflag);
                }
            }

        }
        void ExcuteControlDisplay(bool busyflag)
        {
            lock (lockThisExcute)
            {
                if (busyflag)
                {
                    Button_Execute.BeginInvoke(new Action<bool>((b) =>
                    {
                        Button_Execute.Enabled = b;
                    }), true);
                }
                else
                {
                    Button_Execute.BeginInvoke(new Action<bool>((b) =>
                    {
                        Button_Execute.Enabled = b;
                    }), false);
                }
            }
        }
        void ExcuteControlFocus(bool busyflag)
        {
            lock (lockThisExcuteF)
            {
                Button_Execute.BeginInvoke(new Action<bool>((b) =>
                {
                    Button_Execute.Focus();
                }), busyflag);
            }
        }

        void ProcessbarControl(int val,int index)////
        {
            lock (lockThisProcessbar)
            {
                if (index == 1)
                {
                    progressBar1.BeginInvoke(new Action<int>((v) =>
                    {
                        progressBar1.Value = v;
                    }), val);
                }
                else if (index == 2)
                {
                    progressBar2.BeginInvoke(new Action<int>((v) =>
                    {
                        progressBar2.Value = v;
                    }), val);
                }
                else if (index == 3)
                {
                    progressBar3.BeginInvoke(new Action<int>((v) =>
                    {
                        progressBar3.Value = v;
                    }), val);
                }
                else if (index == 4)
                {
                    progressBar4.BeginInvoke(new Action<int>((v) =>
                    {
                        progressBar4.Value = v;
                    }), val);
                }
                else if (index == 5)
                {
                    progressBar5.BeginInvoke(new Action<int>((v) =>
                    {
                        progressBar5.Value = v;
                    }), val);
                }
                else if (index == 6)
                {
                    progressBar6.BeginInvoke(new Action<int>((v) =>
                    {
                        progressBar6.Value = v;
                    }), val);

                }
                else if (index == 7)
                {
                    progressBar7.BeginInvoke(new Action<int>((v) =>
                    {
                        progressBar7.Value = v;
                    }), val);
                }
                else if (index == 8)
                {
                    progressBar8.BeginInvoke(new Action<int>((v) =>
                    {
                        progressBar8.Value = v;
                    }), val);
                }
            }
        }
        void LabelControl(string str, int index)////
        {
            Color colOk = System.Drawing.Color.Green;
            Color colFail = System.Drawing.Color.Red;
            Color colReady = System.Drawing.Color.Black;
            lock (lockThisLabel)
            {
                if (index == 1)
                {
                    StatusText1.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText1.Text = s;
                        if ("OK" == str)
                        {
                            StatusText1.ForeColor = colOk;
                            COMResult[index] = true;
                            COMFinished[index] = true;
                        }
                        else if ("FAIL" == str)
                        {
                            StatusText1.ForeColor = colFail;
                            COMResult[index] = false;
                            COMFinished[index] = true;
                        }
                        else
                        {
                            COMFinished[index] = false;
                            StatusText1.ForeColor = colReady;
                        }
                    }), str);
                }
                else if (index == 2)
                {
                    StatusText2.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText2.Text = s;
                        if ("OK" == str)
                        {
                            StatusText2.ForeColor = colOk;
                            COMResult[index] = true;
                            COMFinished[index] = true;
                        }
                        else if ("FAIL" == str)
                        {
                            StatusText2.ForeColor = colFail;
                            COMResult[index] = false;
                            COMFinished[index] = true;
                        }
                        else
                        {
                            COMFinished[index] = false;
                            StatusText2.ForeColor = colReady;
                        }
                    }), str);
                }
                else if (index == 3)
                {
                    StatusText3.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText3.Text = s;
                        if ("OK" == str)
                        {
                            StatusText3.ForeColor = colOk;
                            COMResult[index] = true;
                            COMFinished[index] = true;
                        }
                        else if ("FAIL" == str)
                        {
                            StatusText3.ForeColor = colFail;
                            COMResult[index] = false;
                            COMFinished[index] = true;
                        }
                        else
                        {
                            COMFinished[index] = false;
                            StatusText3.ForeColor = colReady;
                        }
                    }), str);
                }
                else if (index == 4)
                {
                    StatusText4.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText4.Text = s;
                        if ("OK" == str)
                        {
                            StatusText4.ForeColor = colOk;
                            COMResult[index] = true;
                            COMFinished[index] = true;
                        }
                        else if ("FAIL" == str)
                        {
                            StatusText4.ForeColor = colFail;
                            COMResult[index] = false;
                            COMFinished[index] = true;
                        }
                        else
                        {
                            COMFinished[index] = false;
                            StatusText4.ForeColor = colReady;
                        }
                    }), str); ;
                }
                else if (index == 5)
                {
                    StatusText5.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText5.Text = s;
                        if ("OK" == str)
                        {
                            StatusText5.ForeColor = colOk;
                            COMResult[index] = true;
                            COMFinished[index] = true;
                        }
                        else if ("FAIL" == str)
                        {
                            StatusText5.ForeColor = colFail;
                            COMResult[index] = false;
                            COMFinished[index] = true;
                        }
                        else
                        {
                            COMFinished[index] = false;
                            StatusText5.ForeColor = colReady;
                        }
                    }), str);
                }
                else if (index == 6)
                {
                    StatusText6.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText6.Text = s;
                        if ("OK" == str)
                        {
                            StatusText6.ForeColor = colOk;
                            COMResult[index] = true;
                            COMFinished[index] = true;
                        }
                        else if ("FAIL" == str)
                        {
                            StatusText6.ForeColor = colFail;
                            COMResult[index] = false;
                            COMFinished[index] = true;
                        }
                        else
                        {
                            COMFinished[index] = false;
                            StatusText6.ForeColor = colReady;
                        }
                    }), str);

                }
                else if (index == 7)
                {
                    StatusText7.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText7.Text = s;
                        if ("OK" == str)
                        {
                            StatusText7.ForeColor = colOk;
                            COMResult[index] = true;
                            COMFinished[index] = true;
                        }
                        else if ("FAIL" == str)
                        {
                            StatusText7.ForeColor = colFail;
                            COMResult[index] = false;
                            COMFinished[index] = true;
                        }
                        else
                        {
                            COMFinished[index] = false;
                            StatusText7.ForeColor = colReady;
                        }
                    }), str);
                }
                else if (index == 8)
                {
                    StatusText8.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText8.Text = s;
                        if ("OK" == str)
                        {
                            StatusText8.ForeColor = colOk;
                            COMResult[index] = true;
                            COMFinished[index] = true;
                        }
                        else if ("FAIL" == str)
                        {
                            StatusText8.ForeColor = colFail;
                            COMResult[index] = false;
                            COMFinished[index] = true;
                        }
                        else
                        {
                            COMFinished[index] = false;
                            StatusText8.ForeColor = colReady;
                        }
                    }), str);
                }
            }
        }
        void StatusTextControl(string str, int index)////
        {
            lock (lockThisStatus)
            {
                if (index == 1)
                {
                    StatusText1.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText1.Text = s;
                    }), str);
                }
                else if (index == 2)
                {
                    StatusText2.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText2.Text = s;
                    }), str);
                }
                else if (index == 3)
                {
                    StatusText3.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText3.Text = s;
                    }), str);
                }
                else if (index == 4)
                {
                    StatusText4.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText4.Text = s;
                    }), str);
                }
                else if (index == 5)
                {
                    StatusText5.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText5.Text = s;
                    }), str);
                }
                else if (index == 6)
                {
                    StatusText6.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText6.Text = s;
                    }), str);

                }
                else if (index == 7)
                {
                    StatusText7.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText7.Text = s;
                    }), str);
                }
                else if (index == 8)
                {
                    StatusText8.BeginInvoke(new Action<string>((s) =>
                    {
                        StatusText8.Text = s;
                    }), str);
                }
            }
        }
        private void ControlsText()
        {
            if(ProgaramerOrderProcess1_Obj.DisplayText_obj.LanguageSelect==true)
            {
                /*
                Label_TargetMCU.Location = new Point(18, 24);
                Label_Frequency.Location = new Point(18, 58);
                Label_HexFile.Location = new Point(18, 94);
                Label_COM.Location = new Point(18, 130);
                Label_StartAddress.Location = new Point(9, 31);
                Label_PageSize.Location = new Point(9, 65);
                Label_PageCount.Location = new Point(9, 100);
                Label_PassCount.Location = new Point(7, 32);
                Label_FailCount.Location = new Point(7, 69);
                label_TotalCount.Location = new Point(7, 104);
                ChineseToolStripMenuItem.Checked = true;
                EnglishToolStripMenuItem.Checked = false;
                */
            }
            else
            {
                /*
                Label_TargetMCU.Location = new Point(35, 24);
                Label_Frequency.Location = new Point(23, 57);
                Label_HexFile.Location = new Point(47, 94);
                Label_COM.Location = new Point(29, 130);
                Label_StartAddress.Location = new Point(9, 31);
                Label_PageSize.Location = new Point(33, 65);
                Label_PageCount.Location = new Point(27, 100);
                Label_PassCount.Location = new Point(13, 32);
                Label_FailCount.Location = new Point(13, 66);
                label_TotalCount.Location = new Point(7, 104);
                ChineseToolStripMenuItem.Checked = false;
                EnglishToolStripMenuItem.Checked = true;
                */

            }
            FileToolStripMenuItem.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.MenuFileText;
            //SaveToolStripMenuItem.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.MenuSaveText;
            LanguageToolStripMenuItem.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.MenuLanguageText;
            ChineseToolStripMenuItem.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.MenuChineseText;
            //EnglishToolStripMenuItem.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.MenuEnglishText;
            ExitToolStripMenuItem.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.MenuExitText;
            HelpToolStripMenuItem.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.MenuHelpText;
            SubHelpToolStripMenuItem1.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.MenuSubHelpText;
            GroupBox_MCUSetting.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.GroupMCUSettingText;
            Label_TargetMCU.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.TargetMCUText;
            //Label_TargetMCU.TextAlign = Alignment.Left;
            Label_Frequency.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.CrystalFrequencyText;
            Label_HexFile.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.HexFileText;
            //Label_COM.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.COMSettingText;
////            if (ConnectFlag == true)
////            {
////               //Button_Connect.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.DisconnectText;
////-+            }
////            else
////            {
////                //Button_Connect.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.ConnectText;
////            }
            GroupBox_FlashInf.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.MCUFlashInfoText;
            Label_StartAddress.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.StartAddressText;
            Label_PageSize.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.PageSizeText;
            Label_PageCount.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.PageCountText;
            Label_NumberAddress.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.NumberAddress;
            GroupBox_Results.Text = "";
            Label_Length.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.NumberLength;
            Label_StartNumber.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.StartNumber;
            Label_Interval.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.NumberInterval;
            Label_CurrentNumber.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.CurrentNumber;
            Label_HistoryNumber.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.HistoryNumber;
            CheckBox_AutoNumber.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.AutoNumber;
            if (AutoNumberEnable == true)
            {
                Button_OpenClose.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.AutoNumberClose;
            }
            else
            {
                Button_OpenClose.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.AutoNumberOpen;
            }
            GroupBox_Operation.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.OperationText;
            RadioButton_ChipErase.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.ChipEraseText;
            RadioButton_PageErase.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.PageEraseText;
            Button_BlankCheck.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.BlankCheckText;
            Button_Erase.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.EraseText;
            Button_Program.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.ProgramText;
            Button_Verify.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyText;
            //Button_Execute.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.ExecuteText;
            CheckBox_BlankCheck.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.CheckBlankCheckText;
            CheckBox_Program.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.CheckProgramText;
            CheckBox_Verify.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.CHeckVerifyText;
            CheckBox_Encrypt.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.CheckEncryptText;
            Button_Upload.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.UploadText;
            Button_Checksum.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.ChecksumText;
            Label_Version.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.Version;
            CheckBox_Erase.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.EraseCheck;
            if (ComboBox_TargetMCU.Items.Count > 0)
            {
                TargetMCUSlecet = ComboBox_TargetMCU.SelectedIndex;
            }
            ComboBox_TargetMCU.Items.Clear();
            for (int i = 0; i < ProgaramerOrderProcess1_Obj.SystemConfig_obj.MCUNumber; i++)
            {
                ComboBox_TargetMCU.Items.Add(ProgaramerOrderProcess1_Obj.SystemConfig_obj.MCUName[i]);
            }
            if(ComboBox_TargetMCU.Items.Count>0)
            {
                ComboBox_TargetMCU.SelectedIndex = TargetMCUSlecet;
            }

            if (ComboBox_Frequency.Items.Count > 0)
            {
                FrequencySlecet = ComboBox_Frequency.SelectedIndex;
            }
            else
            {
                FrequencySlecet = 1;
            }
            ComboBox_Frequency.Items.Clear();
            ComboBox_Frequency.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.FrequencyText;
            for (int i = 0; i < ProgaramerOrderProcess1_Obj.DisplayText_obj.Items; i++)
            {
                ComboBox_Frequency.Items.Add(ProgaramerOrderProcess1_Obj.DisplayText_obj.Item[i]);
            }
            if(ComboBox_Frequency.Items.Count>0)
            {
                ComboBox_Frequency.SelectedIndex = FrequencySlecet;
            }
            UARTProcess UARTProcess_obj = new UARTProcess();
            COMSlecet[0] = -1;
            if (ComboBox_COM.Items.Count > 0)
            {
                COMSlecet[1] = ComboBox_COM.SelectedIndex;
            }
            else
            {
                COMSlecet[1] = -1;
            }

            if (ComboBox_COM2.Items.Count > 0)
            {
                COMSlecet[2] = ComboBox_COM2.SelectedIndex;
            }
            else
            {
                COMSlecet[2] = -1;
            }
            if (ComboBox_COM3.Items.Count > 0)
            {
                COMSlecet[3] = ComboBox_COM3.SelectedIndex;
            }
            else
            {
                COMSlecet[3] = -1;
            }

            if (ComboBox_COM4.Items.Count > 0)
            {
                COMSlecet[4] = ComboBox_COM4.SelectedIndex;
            }
            else
            {
                COMSlecet[4] = -1;
            }
            if (ComboBox_COM5.Items.Count > 0)
            {
                COMSlecet[5] = ComboBox_COM5.SelectedIndex;
            }
            else
            {
                COMSlecet[5] = -1;
            }

            if (ComboBox_COM6.Items.Count > 0)
            {
                COMSlecet[6] = ComboBox_COM6.SelectedIndex;
            }
            else
            {
                COMSlecet[6] = -1;
            }
            if (ComboBox_COM7.Items.Count > 0)
            {
                COMSlecet[7] = ComboBox_COM7.SelectedIndex;
            }
            else
            {
                COMSlecet[7] = -1;
            }

            if (ComboBox_COM8.Items.Count > 0)
            {
                COMSlecet[8] = ComboBox_COM8.SelectedIndex;
            }
            else
            {
                COMSlecet[8] = -1;
            }



            ComboBox_COM.Items.Clear();
            ComboBox_COM2.Items.Clear();
            ComboBox_COM3.Items.Clear();
            ComboBox_COM4.Items.Clear();
            ComboBox_COM5.Items.Clear();
            ComboBox_COM6.Items.Clear();
            ComboBox_COM7.Items.Clear();
            ComboBox_COM8.Items.Clear();

            UARTProcess_obj.GetPortNames(ComboBox_COM);
            UARTProcess_obj.GetPortNames(ComboBox_COM2);
            UARTProcess_obj.GetPortNames(ComboBox_COM3);
            UARTProcess_obj.GetPortNames(ComboBox_COM4);
            UARTProcess_obj.GetPortNames(ComboBox_COM5);
            UARTProcess_obj.GetPortNames(ComboBox_COM6);
            UARTProcess_obj.GetPortNames(ComboBox_COM7);
            UARTProcess_obj.GetPortNames(ComboBox_COM8);

            DeviceManageProcess DevProcess_obj = new DeviceManageProcess();

            List<UARTeviceInfo> devices = new List<UARTeviceInfo>();
            devices = DevProcess_obj.GetUartDevices(); 

            if (ComboBox_COM.Items.Count > 0)
            {
                ComboBox_COM.SelectedIndex = COMSlecet[1];
            }
            if (ComboBox_COM2.Items.Count > 0)
            {
                ComboBox_COM2.SelectedIndex = COMSlecet[2];
            }
            if (ComboBox_COM3.Items.Count > 0)
            {
                ComboBox_COM3.SelectedIndex = COMSlecet[3];
            }
            if (ComboBox_COM4.Items.Count > 0)
            {
                ComboBox_COM4.SelectedIndex = COMSlecet[4];
            }
            if (ComboBox_COM5.Items.Count > 0)
            {
                ComboBox_COM5.SelectedIndex = COMSlecet[5];
            }
            if (ComboBox_COM6.Items.Count > 0)
            {
                ComboBox_COM6.SelectedIndex = COMSlecet[6];
            }
            if (ComboBox_COM7.Items.Count > 0)
            {
                ComboBox_COM7.SelectedIndex = COMSlecet[7];
            }
            if (ComboBox_COM8.Items.Count > 0)
            {
                ComboBox_COM8.SelectedIndex = COMSlecet[8];
            }
            //TextBox_Length.Text = FailCount.ToString();
            //TextBox_NumberAddress.Text = PassCount.ToString();
            //TextBox_StartNumber.Text = TotalCount.ToString();
            //if (ConnectFlag == false)
            //{
            //    //RadioButton_ChipErase.Checked = true;
            //    Button_BlankCheck.Enabled = false;
            //    Button_Checksum.Enabled = false;
            //    Button_Erase.Enabled = false;
            //    Button_Execute.Enabled = false;
            //    Button_Program.Enabled = false;
            //    Button_Upload.Enabled = false;
            //    Button_Verify.Enabled = false;
            //    CheckBox_Erase.Enabled = false;
            //    CheckBox_BlankCheck.Enabled = false;
            //    CheckBox_Encrypt.Enabled = false;
            //    CheckBox_Program.Enabled = false;
            //    CheckBox_Verify.Enabled = false;
            //    RadioButton_ChipErase.Enabled = false;
            //    RadioButton_PageErase.Enabled = false;
            //    TextBox_NumberAddress.Enabled = false;
            //    TextBox_StartNumber.Enabled = false;
            //    TextBox_Length.Enabled = false;
            //    TextBox_Interval.Enabled = false;
            //    CheckBox_AutoNumber.Enabled = false;
            //    Button_OpenClose.Enabled = false;
            //}
            //else
            //{
            //    //RadioButton_ChipErase.Checked = true;
            //    Button_BlankCheck.Enabled = true;
            //    Button_Checksum.Enabled = true;
            //    Button_Erase.Enabled = true;
            //    Button_Execute.Enabled = true;
            //    Button_Program.Enabled = true;
            //    Button_Upload.Enabled = true;
            //    Button_Verify.Enabled = true;
            //    CheckBox_Erase.Enabled = true;
            //    CheckBox_BlankCheck.Enabled = true;
            //    CheckBox_Encrypt.Enabled = true;
            //    CheckBox_Program.Enabled = true;
            //    CheckBox_Verify.Enabled = true;
            //    RadioButton_ChipErase.Enabled = true;
            //    RadioButton_PageErase.Enabled = true;
            //    //TextBox_NumberAddress.Enabled = true;
            //    //TextBox_StartNumber.Enabled = true;
            //    //TextBox_Length.Enabled = true;
            //    //TextBox_Interval.Enabled = true;
            //    CheckBox_AutoNumber.Enabled = true;
            //    //Button_OpenClose.Enabled = true;
            //}
            //ComboBox_Frequency.SelectedIndex = 0x01;
            
            //TextBox_StartAdess.Text =Convert.ToString(ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[],16);
        }

        private void ComboBox_TargetMCU_SelectedIndexChanged(object sender, EventArgs e)
        {
            TextBox_StartAdess.Text = Convert.ToString(ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex], 16).ToUpper().PadLeft(8, '0') + "H";
            TextBox_PageSize.Text = ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageSize[ComboBox_TargetMCU.SelectedIndex].ToString();
            TextBox_PageCount.Text = ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageCount[ComboBox_TargetMCU.SelectedIndex].ToString();
        }

        UInt32 NumberAdderss = 0x00;
        UInt32 StartNumber = 0x00;
        UInt32 CurrentNumber = 0x00;
        UInt32 HistoryNumber = 0x00;
        UInt32 NumberLength = 0x00;
        UInt32 NumberInterval = 0x00;
        bool AutoNumberEnable = false;

        private void Button_Clear_Click(object sender, EventArgs e)
        {
        //    //if (ConnectFlag == false)
        //    //    return;
        //    if (BusyFlagSub[1] == true || BusyFlagSub[2]|| BusyFlagSub[3] || BusyFlagSub[4] || BusyFlagSub[5] || BusyFlagSub[6] || BusyFlagSub[7] || BusyFlagSub[8])
        //    {
        //        MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Warning);
        //        return;
        //    }
        //    else
        //    {
        //        BusyFlag = true;
        //    }
        //    if (Button_OpenClose.Text == ProgaramerOrderProcess_Obj.DisplayText_obj.AutoNumberOpen)
        //    {
        //        if (TextBox_NumberAddress.Text == "")
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.EmptyFill, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //            TextBox_NumberAddress.Focus();
        //            BusyFlag = false;
        //            return;
        //        }
        //        if (TextBox_StartNumber.Text == "")
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.EmptyFill, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //            TextBox_StartNumber.Focus();
        //            BusyFlag = false;
        //            return;
        //        }
        //        if (TextBox_Length.Text == "")
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.EmptyFill, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //            TextBox_Length.Focus();
        //            BusyFlag = false;
        //            return;
        //        }
        //        if (TextBox_Interval.Text == "")
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.EmptyFill, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //            TextBox_Interval.Focus();

        //            BusyFlag = false;
        //            return;
        //        }
        //        try
        //        {
        //            NumberAdderss = Convert.ToUInt32(TextBox_NumberAddress.Text, 16);
        //        }
        //        catch
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.FormatErr, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //            TextBox_NumberAddress.Focus();
        //            BusyFlag = false;
        //            return;
        //        }
        //        try
        //        {

        //            StartNumber = Convert.ToUInt32(TextBox_StartNumber.Text, 10);
        //        }
        //        catch
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.FormatErr, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //            TextBox_StartNumber.Focus();
        //            BusyFlag = false;
        //            return;
        //        }
        //        try
        //        {

        //            NumberLength = Convert.ToUInt32(TextBox_Length.Text, 10);
        //        }
        //        catch
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.FormatErr, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //            TextBox_Length.Focus();
        //            BusyFlag = false;
        //            return;
        //        }
        //        try
        //        {
                    
        //            NumberInterval = Convert.ToUInt32(TextBox_Interval.Text, 10);
        //        }
        //        catch
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.FormatErr, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //            TextBox_Interval.Focus();
        //            BusyFlag = false;
        //            return;
        //        }
        //        if ((ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex] +
        //            ProgaramerOrderProcess_Obj.SystemConfig_obj.PageCount[ComboBox_TargetMCU.SelectedIndex] *
        //            ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[ComboBox_TargetMCU.SelectedIndex]) < (NumberAdderss + 4))
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.FormatErr, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //            TextBox_StartNumber.Focus();
        //            BusyFlag = false;
        //            return;
        //        }
        //        CurrentNumber = StartNumber;
        //        Label_CurrentNumbers.Text = CurrentNumber.ToString();
        //        TextBox_NumberAddress.Enabled = false;
        //        TextBox_StartNumber.Enabled = false;
        //        TextBox_Interval.Enabled = false;
        //        TextBox_Length.Enabled = false;
        //        Button_OpenClose.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.AutoNumberClose;
        //        AutoNumberEnable = true;
        //    }
        //    else
        //    {
        //        TextBox_NumberAddress.Enabled = true;
        //        TextBox_StartNumber.Enabled = true;
        //        TextBox_Interval.Enabled = true;
        //        TextBox_Length.Enabled = true;
        //        AutoNumberEnable = false;
        //        Button_OpenClose.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.AutoNumberOpen;
        //    }
        //    BusyFlag = false;
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            OpenFileDialog_ISP.Filter = "Hex(*.hex)|*.hex|Srec(*.srec)|*.srec|Bin(*.bin)|*.bin";
            OpenFileDialog_ISP.FileName = "";
            DialogResult dr = OpenFileDialog_ISP.ShowDialog();
            if (dr == DialogResult.OK)
            {
                TextBox_HexFile.Text = OpenFileDialog_ISP.FileName;
                //TextBox_OnlineProFile.TextAlign = HorizontalAlignment.Left;
                //TextBox_OnlineProFile.ForeColor = Color.Black;
                if(OpenFileDialog_ISP.FilterIndex == 0x01)
                {
                    hexformat = "hex";
                }
                else if (OpenFileDialog_ISP.FilterIndex == 0x02)
                {
                    hexformat = "srec";
                }
                else if (OpenFileDialog_ISP.FilterIndex == 0x03)
                {
                    hexformat = "bin";
                }
            }
        }

        //private void Button_Erase_Click(object sender, EventArgs e)
        //{
        //    if (ConnectFlag == false)
        //        return;
        //    if (BusyFlag == true)
        //    {
        //        MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Warning);
        //        return;
        //    }
        //    else
        //    {
        //        BusyFlag = true;
        //    }
        //    if (RadioButton_ChipErase.Checked == true)
        //    {
        //        Thread t = new Thread(new ThreadStart(ChipErase_thread));
        //        t.Start();
        //    }
        //    else if (RadioButton_PageErase.Checked == true)
        //    {
        //        Thread t = new Thread(new ThreadStart(PageErase_thread));
        //        t.Start();
        //    }

        //    Control.CheckForIllegalCrossThreadCalls = false;
        //    Button_Erase.Enabled = false;
        //    //t.Start();
        //}


        //void ChipErase_thread()
        //{
        //    Control.CheckForIllegalCrossThreadCalls = false;
        //    byte[] CRdata = new byte[ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
        //    byte[] UIDdata = new byte[ProgaramerOrderProcess_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
        //    if (TextBox_Info.Text == "")
        //    {
        //        TextBox_Info.Text += "<--" + DateTime.Now + "-->"+ProgaramerOrderProcess_Obj.DisplayText_obj.StartChipErase;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    else
        //    {
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartChipErase ;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    //byte[] ReceiveData = new byte[100];
        //    if (SerialPort_Communiction.BytesToRead > 0)
        //    {
        //        byte[] ReceiveData = new byte[SerialPort_Communiction.BytesToRead];
        //        byte[] t = new byte[SerialPort_Communiction.BytesToRead];
        //        SerialPort_Communiction.Read(ReceiveData, 0, SerialPort_Communiction.BytesToRead);
        //    }
        //    ProcessbarControl( 0;
        //    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //    //byte[] CRadd = 
        //    string cr = "";
        //    /*
        //        byte stats = ProgaramerOrderProcess_Obj.Read(SerialPort_Communiction,
        //                                                    BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);

        //        if (stats == (byte)eErrNumber.Succesful)
        //    {
        //        XMLProcess x = new XMLProcess();
        //        cr = "";
        //        for (int i = 0; i < 16; i++)
        //        {
        //            cr += Convert.ToString(CRdata[i], 16).PadLeft(2, '0');
        //        }
        //        x.SaveUserArea(cr, ComboBox_TargetMCU.SelectedIndex);
        //    }
        //    else
        //    {
        //        Button_Erase.Enabled = true;
        //        //BusyFlag = false;
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }*/
        //    /*
        //    stats = ProgaramerOrderProcess_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.UIDAdd[ComboBox_TargetMCU.SelectedIndex]), UIDdata.Length, ref UIDdata);
            
        //    if (stats == (byte)eErrNumber.Succesful)
        //    {
        //        XMLProcess x = new XMLProcess();
        //        cr = "";
        //        for (int i = 0; i < 12; i++)
        //        {
        //            cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
        //        }
        //        x.SaveUID(cr, ComboBox_TargetMCU.SelectedIndex);
        //    }
        //    else
        //    {
        //        Button_Erase.Enabled = true;
        //        //BusyFlag = false;
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Button_Execute.Focus();
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }*/

        //    byte Result = 0;
        //    byte stats = (byte)eErrNumber.Succesful;
        //    try
        //    {
        //        stats = ProgaramerOrderProcess_Obj.CheckEncrypt(SerialPort_Communiction, ref Result);
        //    }
        //    catch (Exception e)
        //    {
        //        MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                            MessageBoxIcon.Error);
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //        //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Button_Erase.Enabled = true;
        //        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadSuccessful ;
        //        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        //TextBox_Info.ScrollToCaret();
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }
        //    if (stats == (byte)eErrNumber.Succesful)
        //    {
        //        //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //        /*if (Result == 0x01)
        //        {
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadFail + ": " + ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted;
        //            //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //            //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //            //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //            //MessageBoxIcon.Error);
        //            Button_Upload.Enabled = true;
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
        //            return;
        //        }*/
        //    }
        //    else
        //    {
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //        //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Button_Erase.Enabled = true;
        //        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadSuccessful ;
        //        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        //TextBox_Info.ScrollToCaret();
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }

        //    try
        //    {
        //        stats = ProgaramerOrderProcess_Obj.EraseFlash(SerialPort_Communiction);
        //    }
        //    catch(Exception e) 
        //    {
        //        MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                            MessageBoxIcon.Error);
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //        //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Button_Erase.Enabled = true;
        //        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadSuccessful ;
        //        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        //TextBox_Info.ScrollToCaret();
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }
        //    if (stats == (byte)eErrNumber.Succesful)
        //    {
        //        /*
        //        Button_Erase.Enabled = true;
        //        //BusyFlag = false;
        //        ChipEraseFlag = true;
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ChipEraseSuccessful ;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        ProcessbarControl( 100;
        //        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //        */
                
        //    }
        //    else
        //    {
        //        Button_Erase.Enabled = true;
        //        //BusyFlag = false;
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail ;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }
        //    //stats = ProgaramerOrderProcess_Obj.Read(SerialPort_Communiction,
        //                                                //BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);
        //    //CRdata =new byte[]{ 0xf0,0x41,0x42,0x08,0x00,0x55,0x00,0x00,0x00,0x08,0xbd,0x00,0x00,0x00,0x00,0x00 };
        //    /*stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata);
        //    //stats = ProgaramerOrderProcess_Obj.Read(SerialPort_Communiction,
        //                                                //BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);
        //    if (stats == (byte)eErrNumber.Succesful)
        //    {

        //    }
        //    else
        //    {
        //        Button_Erase.Enabled = true;
        //        //BusyFlag = false;
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }
        //    */

        //    if (Result == 0x01)
        //    {
        //        try
        //        {
        //            stats = ProgaramerOrderProcess_Obj.MCUReset(SerialPort_Communiction);
        //        }
        //        catch(Exception e)
        //        {
        //            MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                            MessageBoxIcon.Error);
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //            //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //            //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //            Button_Erase.Enabled = true;
        //            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadSuccessful ;
        //            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            //TextBox_Info.ScrollToCaret();
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
        //            return;
        //        }

        //        if (stats == (byte)eErrNumber.Succesful)
        //        {

        //        }
        //        else
        //        {
        //            Button_Erase.Enabled = true;
        //            //BusyFlag = false;
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
        //            return;
        //        }

        //        //ProgaramerOrderProcess_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess_Obj.SystemConfig_obj);
        //        //CRdata = new byte[ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
        //        //UIDdata = new byte[ProgaramerOrderProcess_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
        //        if (true)
        //        {
        //            try
        //            {
        //                stats = ProgaramerOrderProcess_Obj.ConnectProcess(SerialPort_Communiction, ProgaramerOrderProcess_Obj.SystemConfig_obj.RAMCodeAdd[ComboBox_TargetMCU.SelectedIndex],
        //                                                           ComboBox_COM.Text, frequnecy, Crystal);
        //            }
        //            catch (Exception e)
        //            {
        //                MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                                MessageBoxIcon.Error);
        //                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //                //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //                //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                Button_Erase.Enabled = true;
        //                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadSuccessful ;
        //                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                //TextBox_Info.ScrollToCaret();
        //                Control.CheckForIllegalCrossThreadCalls = true;
        //                BusyFlag = false;
        //                return;
        //            }
        //        }
        //        if (stats == (byte)eErrNumber.Succesful)
        //        {

        //        }
        //        else
        //        {
        //            Button_Erase.Enabled = true;
        //            ProgaramerOrderProcess_Obj.DisConnectProcess(SerialPort_Communiction);
        //            ConnectControlDisplay(ConnectFlag);
        //            //Button_Connect.Enabled = true;
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
        //            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //            return;
        //        }
        //    }
        //    /*
        //    stats = ProgaramerOrderProcess_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.UIDAdd[ComboBox_TargetMCU.SelectedIndex]), UIDdata.Length, ref UIDdata);
        //    cr = "";
        //    if (stats == (byte)eErrNumber.Succesful)
        //    {
        //        XMLProcess x = new XMLProcess();

        //        for (int i = 0; i < 12; i++)
        //        {
        //            cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
        //        }
        //        //x.SaveUID(cr, ComboBox_TargetMCU.SelectedIndex);
        //    }
        //    else
        //    {
        //        Button_Connect.Enabled = true;
        //        //BusyFlag = false;
        //        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        //TextBox_Info.ScrollToCaret();
        //        ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        //Button_Execute.Focus();
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }
        //    byte[] sentdata = new byte[16];
        //    for (int i = 0; i < 16; i++)
        //    {
        //        string ss = ProgaramerOrderProcess_Obj.SystemConfig_obj.UserArea[ComboBox_TargetMCU.SelectedIndex].Substring(i * 2, 2);
        //        sentdata[i] = Convert.ToByte(ss, 16);
        //    }

        //    if (cr == ProgaramerOrderProcess_Obj.SystemConfig_obj.UID[ComboBox_TargetMCU.SelectedIndex])
        //    {
        //        //stats = ProgaramerOrderProcess_Obj.Read(SerialPort_Communiction,
        //        //BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);
        //        stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex])), sentdata);
        //        if (stats == (byte)eErrNumber.Succesful)
        //        {

        //        }
        //        else
        //        {
        //            Button_Connect.Enabled = true;
        //            //BusyFlag = false;
        //            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            //TextBox_Info.ScrollToCaret();
        //            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //            //Button_Execute.Focus();
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
        //            return;
        //        }
        //    }*/
        //    //ConnectedConfigSet();
        //    /*
        //    if (TextBox_Info.Text == "")
        //    {
        //        TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ConnectSuccessful;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    else
        //    {
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ConnectSuccessful;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    */
        //    //ProcessbarControl( 0;
        //    //TextBox_Info.Text = "";
        //    //ConnectFlag = true;
        //    //ConnectControlDisplay(ConnectFlag);
        //    //Button_Connect.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.DisconnectText;
        //    //Button_Connect.Enabled = true;
        //    //Control.CheckForIllegalCrossThreadCalls = true;
        //    //BusyFlag = false;


        //    Button_Erase.Enabled = true;
        //    //BusyFlag = false;
        //    ChipEraseFlag = true;
        //    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ChipEraseSuccessful;
        //    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //    TextBox_Info.ScrollToCaret();
        //    ProcessbarControl( 100;
        //    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //    checkAutoNumber = false;
        //    Control.CheckForIllegalCrossThreadCalls = true;
        //    BusyFlag = false;
        //}

        //void PageErase_thread()
        //{
        //    Control.CheckForIllegalCrossThreadCalls = false;
        //    if (TextBox_Info.Text == "")
        //    {
        //        TextBox_Info.Text += "<--" + DateTime.Now + "-->"+ProgaramerOrderProcess_Obj.DisplayText_obj.StartPageErase ;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    else
        //    {
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartPageErase ;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    ProcessbarControl( 0;
        //    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //    float interval = (float)(100000/(HexData.Length + 511) / ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex] );
        //    for (int i = 0; i < (HexData.Length + 511) / ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]; i++)
        //    {
        //        byte[] pageaddress = BitConverter.GetBytes((UInt32)(i * ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]
        //                                                   + ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]));
        //        byte stats = (byte)eErrNumber.Succesful;
        //        try
        //        {
        //            stats = ProgaramerOrderProcess_Obj.ErasePage(SerialPort_Communiction, pageaddress);
        //        }
        //        catch (Exception e)
        //        {
        //            MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                            MessageBoxIcon.Error);
        //            Button_Erase.Enabled = true;
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.PageEraseFail;
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //            //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
        //            return;
        //        }
        //        if (stats == (byte)eErrNumber.Succesful)
        //        {
        //            ChipEraseFlag = false;
                    
        //            ProcessbarControl( (int)((i+1)* interval/1000);
        //            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //        }
        //        else
        //        {
                    
        //            Button_Erase.Enabled = true;
        //            string s = "";
        //            if (stats == (byte)eErrNumber.Encrypted)
        //            {
        //                s = ": "+ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted;
        //            }
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.PageEraseFail +s;
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
        //            return;
        //        }
        //    }
        //    //if(NumberAdd <= HexData.Length+ ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]-1)
        //    //{
        //        checkAutoNumber = false;
        //    //}
        //    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.PageEraseSuccessful;
        //    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //    TextBox_Info.ScrollToCaret();
        //    ProcessbarControl( 100;
        //    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //    //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.PageEraseSuccessful, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //                                    //MessageBoxIcon.Warning);
        //    Button_Erase.Enabled = true;
            
        //    Control.CheckForIllegalCrossThreadCalls = true;
        //    BusyFlag = false;
        //}


        //private void Button_BlankCheck_Click(object sender, EventArgs e)
        //{
        //    if (ConnectFlag == false)
        //        return;
        //    if (BusyFlag == true)
        //    {
        //        MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Warning);
        //        return;
        //    }
        //    else
        //    {
        //        BusyFlag = true;
        //    }

        //    Thread t = new Thread(new ThreadStart(BlankCHeck_thread));
        //    t.Start();
        //    Control.CheckForIllegalCrossThreadCalls = false;
        //    Button_BlankCheck.Enabled = false;
        //}


        //void BlankCHeck_thread()
        //{
        //    Control.CheckForIllegalCrossThreadCalls = false;
        //    byte result = 0x00;
        //    UInt32 Lenght = 0x00;
        //    if (TextBox_Info.Text == "")
        //    {
        //        TextBox_Info.Text += "<--" + DateTime.Now + "-->"+ProgaramerOrderProcess_Obj.DisplayText_obj.StartBlankCheck ;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    else
        //    {
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartBlankCheck ;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    //byte[] ReceiveData = new byte[100];
        //    if (SerialPort_Communiction.BytesToRead > 0)
        //    {
        //        byte[] ReceiveData = new byte[SerialPort_Communiction.BytesToRead];
        //        byte[] t = new byte[SerialPort_Communiction.BytesToRead];
        //        SerialPort_Communiction.Read(ReceiveData, 0, SerialPort_Communiction.BytesToRead);
        //    }
        //    ProcessbarControl( 0;
        //    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //    if (ChipEraseFlag == true)
        //    {
        //        Lenght = (UInt32)(ProgaramerOrderProcess_Obj.SystemConfig_obj.PageCount[this.ComboBox_TargetMCU.SelectedIndex] *
        //                     ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]);
        //    }
        //    else
        //    {
        //        Lenght = (UInt32)(((HexData.Length + 511) / ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]) *
        //                     ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]);
        //    }
        //    UInt32 ErrAdd = 0x00;
        //    byte stats = (byte)eErrNumber.Succesful;
        //    try
        //    {
        //        stats = ProgaramerOrderProcess_Obj.CheckBlank(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]), Lenght, ref result, ref ErrAdd);
        //    }
        //    catch (Exception e)
        //    {
        //        MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //        Button_BlankCheck.Enabled = true;
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.BlankCheckFail;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }
        //    if (stats == (byte)eErrNumber.Succesful)
        //    {

        //    }
        //    else
        //    {
        //        string ss = "";
        //        if (stats == (byte)eErrNumber.Encrypted)
        //        {
        //            ss = ": " + ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted;
        //        }
        //        Button_BlankCheck.Enabled = true;
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.BlankCheckFail +ss;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }
            
        //    string s = "";
        //    if(result == 0x01)
        //    {
        //        s = ProgaramerOrderProcess_Obj.DisplayText_obj.ResultBlank;
        //    }
        //    else if(result == 0x00)
        //    {
        //        s = ProgaramerOrderProcess_Obj.DisplayText_obj.ResultNotBlank+"0x"+Convert.ToString(ErrAdd,16).ToUpper().PadLeft(8,'0');
        //    }
        //    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.BlankCheckSuccessful+s ;
        //    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //    TextBox_Info.ScrollToCaret();
        //    ProcessbarControl( 100;
        //    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //    //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.BlankCheckSuccessful+s, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //                                    //MessageBoxIcon.Warning);
            
        //    Button_BlankCheck.Enabled = true;
        //    Control.CheckForIllegalCrossThreadCalls = true;
        //    BusyFlag = false;
        //}

        //private void Button_Program_Click(object sender, EventArgs e)
        //{
        //    TotalCount++;
        //    //TextBox_StartNumber.Text = TotalCount.ToString();
        //    if (ConnectFlag == false)
        //        return;
        //    if (BusyFlag == true)
        //    {
        //        MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Warning);
        //        return;
        //    }
        //    else
        //    {
        //        BusyFlag = true;
        //    }
        //    byte stats = GetHexFile();
        //    if (stats != (byte)eErrNumber.Succesful)
        //    {
        //        BusyFlag = false;
        //        return;
        //    }
        //    Thread t = new Thread(new ThreadStart(Button_Program_thread));
        //    t.Start();
        //    Control.CheckForIllegalCrossThreadCalls = false;
        //    Button_Program.Enabled = false;
        //    //TextBox_HexFile.Enabled = false;
        //    //PictureBox_hexFile.Enabled= false;
        //}

        bool checkAutoNumber = false;
        UInt32 NumberAdd = 0x00000000;
        //void Button_Program_thread()
        //{
        //    Control.CheckForIllegalCrossThreadCalls = false;
        //    byte stats = 0x00;
        //    byte[] sentdata = new byte[512];
        //    int count = (int)((HexData.Length + 511) / ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]);
        //    if (TextBox_Info.Text == "")
        //    {
        //        TextBox_Info.Text += "<--" + DateTime.Now + "-->"+ProgaramerOrderProcess_Obj.DisplayText_obj.StartProgram ;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    else
        //    {
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartProgram ;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    //byte[] ReceiveData = new byte[100];
        //    if (SerialPort_Communiction.BytesToRead > 0)
        //    {
        //        byte[] ReceiveData = new byte[SerialPort_Communiction.BytesToRead];
        //        byte[] t = new byte[SerialPort_Communiction.BytesToRead];
        //        SerialPort_Communiction.Read(ReceiveData, 0, SerialPort_Communiction.BytesToRead);
        //    }
        //    if (CheckBox_AutoNumber.Checked == true)
        //    {
        //        if(AutoNumberEnable == false)
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
        //            //TextBox_HexFile.Enabled = true;
        //            //PictureBox_hexFile.Enabled= true;
        //            Button_Program.Enabled = true;
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
        //            return;
        //        }
        //        else
        //        {
        //            if((NumberAdderss- ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex])< HexData.Length)
        //            {
        //                DialogResult dr = MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OverHexData, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.YesNo,MessageBoxIcon.Warning);
        //                if(dr == DialogResult.No)
        //                {
        //                    //TextBox_HexFile.Enabled = true;
        //                    //PictureBox_hexFile.Enabled= true;
        //                    Button_Program.Enabled = true;
        //                    Control.CheckForIllegalCrossThreadCalls = true;
        //                    BusyFlag = false;
        //                    return;
        //                }
        //                else if(dr == DialogResult.Yes)
        //                {
        //                    byte[] CurrentNumData = BitConverter.GetBytes(CurrentNumber);
        //                    for(int i = 0;i<4;i++)
        //                    {
        //                        if ((NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex] + i) < HexData.Length)
        //                        {
        //                            HexData[NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]+i] = CurrentNumData[i];
        //                        }
        //                    }
        //                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) == 3)
        //                    {
        //                        byte[] senddata = new byte[1];
        //                        senddata[0] = CurrentNumData[3];
        //                        try
        //                        {
        //                            stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), senddata);

        //                        }
        //                        catch (Exception e)
        //                        {
        //                            MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                                            MessageBoxIcon.Error);
        //                            Button_Program.Enabled = true;
        //                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ProgramFail;
        //                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                            TextBox_Info.ScrollToCaret();
        //                            //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                        if (stats == (byte)eErrNumber.Succesful)
        //                        {

        //                        }
        //                        else
        //                        {
        //                            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            //TextBox_Length.Text = FailCount.ToString();
        //                            //TextBox_HexFile.Enabled = true;
        //                            //PictureBox_hexFile.Enabled= true;
        //                            Button_Program.Enabled = true;
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                    }
        //                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) == 2)
        //                    {
        //                        byte[] senddata = new byte[2];
        //                        senddata[0] = CurrentNumData[2];
        //                        senddata[1] = CurrentNumData[3];
        //                        try
        //                        {
        //                            stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), senddata);

        //                        }
        //                        catch (Exception e)
        //                        {
        //                            MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                                            MessageBoxIcon.Error);
        //                            Button_Program.Enabled = true;
        //                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ProgramFail;
        //                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                            TextBox_Info.ScrollToCaret();
        //                            //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                        if (stats == (byte)eErrNumber.Succesful)
        //                        {

        //                        }
        //                        else
        //                        {
        //                            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            //TextBox_Length.Text = FailCount.ToString();
        //                            //TextBox_HexFile.Enabled = true;
        //                            //PictureBox_hexFile.Enabled= true;
        //                            Button_Program.Enabled = true;
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                    }
        //                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) == 1)
        //                    {
        //                        byte[] senddata = new byte[3];
        //                        senddata[0] = CurrentNumData[1];
        //                        senddata[1] = CurrentNumData[2];
        //                        senddata[2] = CurrentNumData[3];
        //                        try
        //                        {
        //                            stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), senddata);
        //                        }
        //                        catch (Exception e)
        //                        {
        //                            MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                                            MessageBoxIcon.Error);
        //                            Button_Program.Enabled = true;
        //                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ProgramFail;
        //                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                            TextBox_Info.ScrollToCaret();
        //                            //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                        if (stats == (byte)eErrNumber.Succesful)
        //                        {

        //                        }
        //                        else
        //                        {
        //                            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            //TextBox_Length.Text = FailCount.ToString();
        //                            //TextBox_HexFile.Enabled = true;
        //                            //PictureBox_hexFile.Enabled= true;
        //                            Button_Program.Enabled = true;
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                try
        //                {
        //                    stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdderss)), BitConverter.GetBytes((UInt32)(CurrentNumber)));
        //                }
        //                catch (Exception e)
        //                {
        //                    MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                                    MessageBoxIcon.Error);
        //                    Button_Program.Enabled = true;
        //                    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ProgramFail;
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                    //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                    Control.CheckForIllegalCrossThreadCalls = true;
        //                    BusyFlag = false;
        //                    return;
        //                }
        //                if (stats == (byte)eErrNumber.Succesful)
        //                {

        //                }
        //                else
        //                {
        //                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                    //TextBox_Length.Text = FailCount.ToString();
        //                    //TextBox_HexFile.Enabled = true;
        //                    //PictureBox_hexFile.Enabled= true;
        //                    Button_Program.Enabled = true;
        //                    Control.CheckForIllegalCrossThreadCalls = true;
        //                    BusyFlag = false;
        //                    return;
        //                }
        //            }
        //            NumberAdd = NumberAdderss;
        //            checkAutoNumber = true;
        //        }
        //    }
        //    else
        //    {
        //        //checkAutoNumber = false;
        //    }

        //    ProcessbarControl( 0;
        //    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //    float interval = (float)(100000/count);
        //    for (int i = 0; i < count; i++)
        //    {
        //        if (i == (count - 1))
        //        {
        //            sentdata = new byte[HexData.Length - (i * 512)];
        //            Array.Copy(HexData, i * 512, sentdata, 0, HexData.Length - (i * 512));
        //        }
        //        else
        //        {
        //            Array.Copy(HexData, i * 512, sentdata, 0, 512);
        //        }
        //        try
        //        {
        //            stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex] + i * 512)), sentdata);
        //        }
        //        catch (Exception e)
        //        {
        //            MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                            MessageBoxIcon.Error);
        //            Button_Program.Enabled = true;
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ProgramFail;
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //            //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
        //            return;
        //        }
        //        if (stats == (byte)eErrNumber.Succesful)
        //        {
        //            ProcessbarControl( (int)((i + 1) * interval/1000);
        //            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //        }
        //        else
        //        {
        //            string s = "";
        //            if (stats == (byte)eErrNumber.Encrypted)
        //            {
        //                s = ": " + ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted;
        //            }
        //            FailCount++;
        //            Button_Program.Enabled = true;

        //            //TextBox_HexFile.Enabled = true;
        //            //PictureBox_hexFile.Enabled= true;
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ProgramFail +s;
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //            //TextBox_Length.Text = FailCount.ToString();
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
                    
        //            return;
        //        }
        //    }
        //    PassCount++;
        //    Button_Program.Enabled = true;
        //    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ProgramSuccessful ;
        //    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //    TextBox_Info.ScrollToCaret();
        //    ProcessbarControl( 100;
        //    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //    //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.ProgramSuccessful, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //                                    //MessageBoxIcon.Warning);
        //    //TextBox_NumberAddress.Text = PassCount.ToString();
        //    if (AutoNumberEnable == true&& CheckBox_AutoNumber.Checked == true)
        //    {
        //        HistoryNumber = CurrentNumber;
        //        CurrentNumber += NumberInterval;

        //        if (!(CurrentNumber < (StartNumber + (NumberLength)* NumberInterval)))
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.AutoNumberFinsh, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK, MessageBoxIcon.Warning);
        //            CheckBox_AutoNumber.Checked = false;
        //            AutoNumberEnable = false;
        //            Button_OpenClose.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.AutoNumberOpen;
        //            Button_OpenClose.Enabled = false;
        //        }
        //        else
        //        {
        //            Label_CurrentNumbers.Text = CurrentNumber.ToString();
        //        }
        //        Label_HistoryNumbers.Text = HistoryNumber.ToString();
        //    }

        //    //TextBox_HexFile.Enabled = true;
        //    //PictureBox_hexFile.Enabled= true;
        //    Control.CheckForIllegalCrossThreadCalls = true;
        //    BusyFlag = false;
        //}

        //private void Button_Verify_Click(object sender, EventArgs e)
        //{
        //    if (ConnectFlag == false)
        //        return;
        //    if (BusyFlag == true)
        //    {
        //        MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Warning);
        //        return;
        //    }
        //    else
        //    {
        //        BusyFlag = true;
        //    }
        //    byte stats = GetHexFile();
        //    if (stats != (byte)eErrNumber.Succesful)
        //    {
        //        BusyFlag = false;
        //        return;
        //    }
        //    Thread t = new Thread(new ThreadStart(Button_Verify_thread));
        //    t.Start();

        //    Control.CheckForIllegalCrossThreadCalls = false;
        //    Button_Verify.Enabled = false;
        //    //TextBox_HexFile.Enabled = false;
        //    //PictureBox_hexFile.Enabled= false;
        //}

        //void Button_Verify_thread()
        //{
        //    Control.CheckForIllegalCrossThreadCalls = false;
        //    byte[] checksumdata = new byte[2];
        //    UInt16 checksumdata1 = 0x00;
        //    byte stats = 0x00;
        //    //byte[] ReceiveData = new byte[100];
        //    if (SerialPort_Communiction.BytesToRead > 0)
        //    {
        //        byte[] ReceiveData = new byte[SerialPort_Communiction.BytesToRead];
        //        byte[] t = new byte[SerialPort_Communiction.BytesToRead];
        //        SerialPort_Communiction.Read(ReceiveData, 0, SerialPort_Communiction.BytesToRead);
        //    }
        //    if (TextBox_Info.Text == "")
        //    {
        //        TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartVerify;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    else
        //    {
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartVerify;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    if (checkAutoNumber == true)
        //    {
        //        byte[] CurrentNumData = BitConverter.GetBytes((UInt32)HistoryNumber);
        //        //if (AutoNumberEnable == false)
        //        if (false)
        //        {
        //            MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
        //            //TextBox_HexFile.Enabled = true;
        //            //PictureBox_hexFile.Enabled= true;
        //            Button_Verify.Enabled = true;
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
        //            return;
        //        }
        //        else
        //        {
        //            if ((NumberAdd - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) < HexData.Length)
        //            {
        //                /*DialogResult dr = MessageBox.Show("", "", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
        //                if (dr == DialogResult.No)
        //                {
        //                    return;
        //                }
        //                else */
        //                if (true)
        //                {

        //                    for (int i = 0; i < 4; i++)
        //                    {
        //                        if ((NumberAdd - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex] + i) < HexData.Length)
        //                        {
        //                            HexData[NumberAdd - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]+i] = CurrentNumData[i];
        //                        }
        //                    }
        //                    if (HexData.Length - (NumberAdd - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) == 3)
        //                    {
        //                        byte[] senddata = new byte[1];
        //                        byte[] recdata = new byte[2];
        //                        senddata[0] = CurrentNumData[3];
        //                        try
        //                        {
        //                            stats = ProgaramerOrderProcess_Obj.Verify(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdd + 3)), recdata.Length, ref recdata);
        //                        }
        //                        catch (Exception e)
        //                        {
        //                            MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                                            MessageBoxIcon.Error);
        //                            Button_Verify.Enabled = true;
        //                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyFail;
        //                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                            TextBox_Info.ScrollToCaret();
        //                            //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                        if (stats == (byte)eErrNumber.Succesful)
        //                        {
        //                            string s = "";
        //                            /*
        //                            if (((recdata[0] << 8) + recdata[1]) == (HistoryNumber & 0xff))
        //                            {
        //                                s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyMatch;
        //                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->"+"自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
        //                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                TextBox_Info.ScrollToCaret();
        //                            }
        //                            else
        //                            {
        //                                s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyNotMatch;
        //                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s;
        //                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                TextBox_Info.ScrollToCaret();
        //                            }
        //                            */
        //                        }
        //                        else
        //                        {
        //                            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            //TextBox_Length.Text = FailCount.ToString();
        //                            //TextBox_HexFile.Enabled = true;
        //                            //PictureBox_hexFile.Enabled= true;
        //                            Button_Verify.Enabled = true;
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                    }
        //                    else if (HexData.Length - (NumberAdd - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) == 2)
        //                    {
        //                        byte[] senddata = new byte[2];
        //                        byte[] recdata = new byte[2];
        //                        senddata[0] = CurrentNumData[2];
        //                        senddata[1] = CurrentNumData[3];
        //                        try
        //                        {
        //                            stats = ProgaramerOrderProcess_Obj.Verify(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdd + 2)), recdata.Length, ref recdata);
        //                        }
        //                        catch (Exception e)
        //                        {
        //                            MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                                            MessageBoxIcon.Error);
        //                            Button_Verify.Enabled = true;
        //                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyFail;
        //                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                            TextBox_Info.ScrollToCaret();
        //                            //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                        if (stats == (byte)eErrNumber.Succesful)
        //                        {
        //                            string s = "";
        //                            /*
        //                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
        //                            {
        //                                s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyMatch;
        //                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
        //                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                TextBox_Info.ScrollToCaret();
        //                            }
        //                            else
        //                            {
        //                                s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyNotMatch;
        //                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s;
        //                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                TextBox_Info.ScrollToCaret();
        //                            }
        //                            */
        //                        }
        //                        else
        //                        {
        //                            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            //TextBox_Length.Text = FailCount.ToString();
        //                            //TextBox_HexFile.Enabled = true;
        //                            //PictureBox_hexFile.Enabled= true;
        //                            Button_Verify.Enabled = true;
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                    }
        //                    else if (HexData.Length - (NumberAdd - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) == 1)
        //                    {
        //                        byte[] senddata = new byte[3];
        //                        byte[] recdata = new byte[2];
        //                        senddata[0] = CurrentNumData[1];
        //                        senddata[1] = CurrentNumData[2];
        //                        senddata[2] = CurrentNumData[3];
        //                        try
        //                        {
        //                            stats = ProgaramerOrderProcess_Obj.Verify(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdd + 1)), recdata.Length, ref recdata);
        //                        }
        //                        catch (Exception e)
        //                        {
        //                            MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                                            MessageBoxIcon.Error);
        //                            Button_Verify.Enabled = true;
        //                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyFail;
        //                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                            TextBox_Info.ScrollToCaret();
        //                            //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                        if (stats == (byte)eErrNumber.Succesful)
        //                        {
        //                            string s = "";
        //                            /*
        //                            if (((recdata[0] << 8) + recdata[1]) == ((((HistoryNumber & 0xff0000) >> 16) + (HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
        //                            {
        //                                s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyMatch;
        //                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
        //                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                TextBox_Info.ScrollToCaret();
        //                            }
        //                            else
        //                            {
        //                                s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyNotMatch;
        //                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s;
        //                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                TextBox_Info.ScrollToCaret();
        //                            }
        //                            */
        //                        }
        //                        else
        //                        {
        //                            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            //TextBox_Length.Text = FailCount.ToString();
        //                            //TextBox_HexFile.Enabled = true;
        //                            //PictureBox_hexFile.Enabled= true;
        //                            Button_Verify.Enabled = true;
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                byte[] recdata = new byte[2];
        //                byte[] re = new byte[4];
        //                try
        //                {
        //                    stats = ProgaramerOrderProcess_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdd)), re.Length, ref re);
        //                    stats = ProgaramerOrderProcess_Obj.Verify(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdd)), recdata.Length, ref recdata);
        //                }
        //                catch (Exception e)
        //                {
        //                    MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                                    MessageBoxIcon.Error);
        //                    Button_Verify.Enabled = true;
        //                    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyFail;
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                    //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                    Control.CheckForIllegalCrossThreadCalls = true;
        //                    BusyFlag = false;
        //                    return;
        //                }
        //                if (stats == (byte)eErrNumber.Succesful)
        //                {
        //                    string s = "";
        //                    /*
        //                    if (((recdata[0] << 8) + recdata[1]) == ((((HistoryNumber & 0xff000000) >> 24) + (((HistoryNumber & 0xff0000) >> 16) + (HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff)))
        //                    {
        //                        s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyMatch;
        //                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
        //                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                        TextBox_Info.ScrollToCaret();
        //                    }
        //                    else
        //                    {
        //                        s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyNotMatch;
        //                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s;
        //                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                        TextBox_Info.ScrollToCaret();
        //                    }
        //                    */
        //                }
        //                else
        //                {
        //                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                    //TextBox_Length.Text = FailCount.ToString();
        //                    //TextBox_HexFile.Enabled = true;
        //                    //PictureBox_hexFile.Enabled= true;
        //                    Button_Verify.Enabled = true;
        //                    Control.CheckForIllegalCrossThreadCalls = true;
        //                    BusyFlag = false;
        //                    return;
        //                }
        //            }
        //        }
        //    }

        //    checksumdata1 = ProgaramerOrderProcess_Obj.CheckSumUInt16(HexData, 0, HexData.Length);
        //    try
        //    {
        //        stats = ProgaramerOrderProcess_Obj.Verify(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex])), HexData.Length, ref checksumdata);

        //    }
        //    catch (Exception e)
        //    {
        //        MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //        Button_Verify.Enabled = true;
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyFail;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }


        //    ProcessbarControl( 0;
        //    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //    if (stats == (byte)eErrNumber.Succesful)
        //    {
        //        string s = "";
        //        if (((checksumdata[0] << 8) + checksumdata[1]) == ProgaramerOrderProcess_Obj.CheckSumUInt16(HexData, 0, HexData.Length))
        //        {
        //            s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyMatch;
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful+s +"(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //        }
        //        else
        //        {
        //            s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyNotMatch;
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s ;
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //        }
        //        //BusyFlag = false;
        //        ChipEraseFlag = true;
        //        ProcessbarControl( 100;
        //        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //        //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s+"(0x"+ Convert.ToString(((checksumdata[0] << 8) + checksumdata[1] ),16).ToUpper().PadLeft(4,'0')+ ")", ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //                                        //MessageBoxIcon.Warning);
        //        Button_Verify.Enabled = true;
        //    }
        //    else
        //    {
        //        string s = "";
        //        if (stats == (byte)eErrNumber.Encrypted)
        //        {
        //            s = ": " + ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted;
        //        }
        //        //BusyFlag = false;
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyFail+s ;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Button_Verify.Enabled = true;
        //    }
        //    //TextBox_HexFile.Enabled = true;
        //    //PictureBox_hexFile.Enabled= true;
        //    Control.CheckForIllegalCrossThreadCalls = true;
        //    BusyFlag = false;
        //}

        //private void Button_Upload_Click(object sender, EventArgs e)
        //{
        //    Control.CheckForIllegalCrossThreadCalls = false;
        //    if (ConnectFlag == false)
        //        return;
        //    if (BusyFlag == true)
        //    {
        //        MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Warning);
        //        return;
        //    }
        //    else
        //    {
        //        BusyFlag = true;
        //    }
        //    t1.Tick += t1_Tick;
        //    t1.Interval = 10;
        //    t1.Start();

        //    Thread t = new Thread(new ThreadStart(Button_Upload_thread));
        //    t.Start();
        //    Control.CheckForIllegalCrossThreadCalls = false;
        //    Button_Upload.Enabled = false;
        //}
        //bool comp = false;
        byte[] recivedata = new byte[1];

        void t1_Tick(object sender, EventArgs e)
        {
            //HexSrec_Process HexProcess_obj = new HexSrec_Process();
            //FrameFormatStr[] Data = new FrameFormatStr[1];

            //if (comp == true)
            //{
            //    comp = false;
            //    t1.Stop();
            //    SaveFileDialog_ISP.Filter = "Hex(*.hex)|*.hex|Srec(*srec)|*srec";
            //    SaveFileDialog_ISP.FileName = "";
            //    //DialogResult dr = ;
            //    BinProcess BinProcessobj = new BinProcess();
            //    if (SaveFileDialog_ISP.ShowDialog() == DialogResult.OK)
            //    {
            //        HexProcess_obj.Bin2Hex(recivedata, ref Data);
            //        if (SaveFileDialog_ISP.FilterIndex == 0x01)
            //        {
            //            string xchar = SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length - 1, 1);
            //            string echar = SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length - 2, 1);
            //            string hchar = SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length - 3, 1);
            //            string dot = SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length - 4, 1);
            //            if ((xchar != "x" && xchar != "X") || (echar != "e" && echar != "E")|| (hchar != "h" && hchar != "H") || dot != ".")
            //            {
            //                SaveFileDialog_ISP.FileName += ".hex";
            //                HexProcess_obj.WriteIntelHex(Data, SaveFileDialog_ISP.FileName);
            //            }
            //            else
            //            {
            //                HexProcess_obj.WriteIntelHex(Data, SaveFileDialog_ISP.FileName);
            //            }
            //        }
            //        else if (SaveFileDialog_ISP.FilterIndex == 0x02)
            //        {
            //            HexProcess_obj.Intel2Motorola(ref Data);
            //            if ((SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length - 1, 1) != "c"
            //                && SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length - 1, 1) != "C")
            //                || (SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length - 2, 1) != "e"
            //                && SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length - 2, 1) != "E")
            //                || (SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length - 3, 1) != "r"
            //                && SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length - 3, 1) != "R")
            //                || (SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length - 4, 1) != "s"
            //                && SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length - 4, 1) != "S")
            //                || SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length - 5, 1) != ".")
            //            {
            //                SaveFileDialog_ISP.FileName += ".srec";
                            
            //                HexProcess_obj.WriteMotorolaHex(Data, SaveFileDialog_ISP.FileName);
            //            }
            //            else
            //            {
            //                HexProcess_obj.WriteMotorolaHex(Data, SaveFileDialog_ISP.FileName);
            //            }
            //        }
            //        /*
            //        if(SaveFileDialog_ISP.FileName.Substring(SaveFileDialog_ISP.FileName.Length-4,4) == "srec")
            //        {
            //            HexProcess_obj.WriteMotorolaHex(Data, SaveFileDialog_ISP.FileName);
            //        }
            //        else
            //        {
            //            HexProcess_obj.WriteIntelHex(Data, SaveFileDialog_ISP.FileName);
            //        }
            //        */
            //        //BinProcessobj.WriteBinFile(recivedata, 0, (int)(ProgaramerOrderProcess_Obj.SystemConfig_obj.PageCount[this.ComboBox_TargetMCU.SelectedIndex] *
            //                                   //ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]), SaveFileDialog_ISP.FileName);
            //    }

            //    ProcessbarControl( 100;
            //    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
            //    //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.UploadSuccessful, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
            //                                        //MessageBoxIcon.Warning);
            //    BusyFlag = false;
                
            //    Control.CheckForIllegalCrossThreadCalls = true;
            //}
        }

        //void Button_Upload_thread()
        //{
        //    //byte[] ReceiveData = new byte[100];
        //    if (SerialPort_Communiction.BytesToRead > 0)
        //    {
        //        byte[] ReceiveData = new byte[SerialPort_Communiction.BytesToRead];
        //        byte[] t = new byte[SerialPort_Communiction.BytesToRead];
        //        SerialPort_Communiction.Read(ReceiveData, 0, SerialPort_Communiction.BytesToRead);
        //    }
        //    if (TextBox_Info.Text == "")
        //    {
        //        TextBox_Info.Text += "<--" + DateTime.Now + "-->"+ProgaramerOrderProcess_Obj.DisplayText_obj.StartUpload ;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    else
        //    {
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartUpload ;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //    }
        //    recivedata = new byte[ProgaramerOrderProcess_Obj.SystemConfig_obj.PageCount[this.ComboBox_TargetMCU.SelectedIndex] *
        //                                       ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]];
        //    byte[] recivedata1 = new byte[512];
        //    int lenght = 0x00;
        //    byte Result = 0x00;
        //    int count = (int)(ProgaramerOrderProcess_Obj.SystemConfig_obj.PageCount[this.ComboBox_TargetMCU.SelectedIndex]);
        //    ProcessbarControl( 0;
        //    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //    byte stats = (byte)eErrNumber.Succesful;
        //    try
        //    {
        //        stats = ProgaramerOrderProcess_Obj.CheckEncrypt(SerialPort_Communiction, ref Result);
        //    }
        //    catch (Exception e)
        //    {
        //        MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //        Button_Upload.Enabled = true;
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadFail;
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }
        //    if (stats == (byte)eErrNumber.Succesful)
        //    {
        //        //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //        if (Result == 0x01)
        //        {
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadFail+ ": " + ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted;
        //            //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //            ProgaramerOrderProcess_Obj.ErrProcess((byte)eErrNumber.Encrypted);
        //            //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //            //MessageBoxIcon.Error);
        //            Button_Upload.Enabled = true;
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
        //            return;
        //        }

        //    }
        //    else
        //    {
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadFail ;
        //        //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Button_Upload.Enabled = true;
        //        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadSuccessful ;
        //        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        //TextBox_Info.ScrollToCaret();
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }
        //    ProcessbarControl( 5;
        //    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //    int temp = ProgressBar_1.Value;
        //    double interval = (double)(90000/(count));
        //    for (int i = 0; i < count; i++)
        //    {
        //        //if (i == (count - 1))
        //        //{
        //            //lenght = HexData.Length - (i * 512);
        //            //recivedata1 = new byte[lenght];
        //        //}
        //        //else
        //        //{
        //        if(i == 111)
        //        {
        //            ;
        //        }
        //            lenght = 512;
        //        //}
        //        try
        //        {
        //            stats = ProgaramerOrderProcess_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex] + i * 512)), lenght, ref recivedata1);

        //        }
        //        catch (Exception e)
        //        {
        //            MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                            MessageBoxIcon.Error);
        //            Button_Upload.Enabled = true;
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadFail;
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //            //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
        //            return;
        //        }
        //        if (stats == (byte)eErrNumber.Succesful)
        //        {
        //            //BusyFlag = false;
        //            //ProgaramerOrderProcess_Obj.serialportclose();
        //            Array.Copy(recivedata1, 0, recivedata, i * 512, lenght);

        //            ProcessbarControl( (int)((i+1)*interval/1000 + temp);
        //            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //        }
        //        else
        //        {
        //            //ProgaramerOrderProcess_Obj.serialportclose();
        //            //BusyFlag = false;
        //            label1.Text = i.ToString();
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadFail;
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //            Button_Upload.Enabled = true;
        //            Control.CheckForIllegalCrossThreadCalls = true;
        //            BusyFlag = false;
        //            return;
        //        }
        //    }
            
        //    Button_Upload.Enabled = true;
        //    //Control.CheckForIllegalCrossThreadCalls = true;
        //    comp = true;
        //    //BusyFlag = false;
        //}

        //private void SerialPort_Communiction_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
        //{
        //    return;
        //    int readdata = 0x00;
        //    int receivedBytesThreshold = 0x00;
        //    int index = 0x00;
        //    //if (SerialPort_Communiction.IsOpen == false)
        //    //{
        //    //SerialPort_Communiction.Open();
        //    //}
        //    if(ProgaramerOrderProcess_Obj.serialstop)
        //    {
        //        return;
        //    }
        //    if(SerialPort_Communiction.IsOpen == false)
        //    {
        //        return;
        //    }
        //    int l = 0x00;
        //    receivedBytesThreshold = SerialPort_Communiction.ReceivedBytesThreshold;
        //    ProgaramerOrderProcess_Obj.ReceiveData = new byte[receivedBytesThreshold];
        //    if (SerialPort_Communiction.BytesToRead < receivedBytesThreshold)
        //    {
        //        return;
        //        l = SerialPort_Communiction.BytesToRead;
        //    }
        //    try
        //    {


        //        readdata = SerialPort_Communiction.Read(ProgaramerOrderProcess_Obj.ReceiveData, 0, SerialPort_Communiction.ReceivedBytesThreshold);
        //    }
        //    catch (Exception e3)
        //    {
        //        MessageBox.Show("hint", e3.Message);
        //    }
        //    /*
        //    receivedBytesThreshold -= readdata;
        //    index = readdata;
        //    while (receivedBytesThreshold != 0)
        //    {
        //        readdata = SerialPort_Communiction.Read(ProgaramerOrderProcess_Obj.ReceiveData, index, receivedBytesThreshold);
        //        index += readdata;

        //        receivedBytesThreshold -= readdata;
        //    }
        //    */
        //    ProgaramerOrderProcess_Obj.ReceiveFlag = true;
        //    SerialPort_Communiction.DiscardInBuffer();
        //}

        private void SerialPort_Communiction1_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
        {
            //return;
            //int readdata = 0x00;
            //int receivedBytesThreshold = 0x00;
            ////int index = 0x00;
            ////if (SerialPort_Communiction.IsOpen == false)
            ////{
            ////SerialPort_Communiction.Open();
            ////}
            //if (ProgaramerOrderProcess1_Obj.serialstop)
            //{
            //    return;
            //}
            //if (SerialPort_Communiction1.IsOpen == false)
            //{
            //    return;
            //}
            //int l = 0x00;
            //receivedBytesThreshold = SerialPort_Communiction1.ReceivedBytesThreshold;
            //ProgaramerOrderProcess1_Obj.ReceiveData = new byte[receivedBytesThreshold];
            //if (SerialPort_Communiction1.BytesToRead < receivedBytesThreshold)
            //{
            //    return;
            //    l = SerialPort_Communiction1.BytesToRead;
            //}
            //try
            //{


            //    readdata = SerialPort_Communiction1.Read(ProgaramerOrderProcess1_Obj.ReceiveData, 0, SerialPort_Communiction1.ReceivedBytesThreshold);
            //}
            //catch (Exception e3)
            //{
            //    MessageBox.Show("hint", e3.Message);
            //}
            ///*
            //receivedBytesThreshold -= readdata;
            //index = readdata;
            //while (receivedBytesThreshold != 0)
            //{
            //    readdata = SerialPort_Communiction.Read(ProgaramerOrderProcess_Obj.ReceiveData, index, receivedBytesThreshold);
            //    index += readdata;

            //    receivedBytesThreshold -= readdata;
            //}
            //*/
            //ProgaramerOrderProcess1_Obj.ReceiveFlag = true;
            //SerialPort_Communiction1.DiscardInBuffer();
        }
        private void SerialPort_Communiction2_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
        {
            //return;
            //int readdata = 0x00;
            //int receivedBytesThreshold = 0x00;
            ////int index = 0x00;
            ////if (SerialPort_Communiction.IsOpen == false)
            ////{
            ////SerialPort_Communiction.Open();
            ////}
            //if (ProgaramerOrderProcess2_Obj.serialstop)
            //{
            //    return;
            //}
            //if (SerialPort_Communiction2.IsOpen == false)
            //{
            //    return;
            //}
            //int l = 0x00;
            //receivedBytesThreshold = SerialPort_Communiction2.ReceivedBytesThreshold;
            //ProgaramerOrderProcess2_Obj.ReceiveData = new byte[receivedBytesThreshold];
            //if (SerialPort_Communiction2.BytesToRead < receivedBytesThreshold)
            //{
            //    return;
            //    l = SerialPort_Communiction2.BytesToRead;
            //}
            //try
            //{


            //    readdata = SerialPort_Communiction2.Read(ProgaramerOrderProcess2_Obj.ReceiveData, 0, SerialPort_Communiction2.ReceivedBytesThreshold);
            //}
            //catch (Exception e3)
            //{
            //    MessageBox.Show("hint", e3.Message);
            //}
            ///*
            //receivedBytesThreshold -= readdata;
            //index = readdata;
            //while (receivedBytesThreshold != 0)
            //{
            //    readdata = SerialPort_Communiction.Read(ProgaramerOrderProcess_Obj.ReceiveData, index, receivedBytesThreshold);
            //    index += readdata;

            //    receivedBytesThreshold -= readdata;
            //}
            //*/
            //ProgaramerOrderProcess2_Obj.ReceiveFlag = true;
            //SerialPort_Communiction2.DiscardInBuffer();
        }
        private void SerialPort_Communiction3_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
        {
           // return;
           // int readdata = 0x00;
           // int receivedBytesThreshold = 0x00;
           //// int index = 0x00;
           // //if (SerialPort_Communiction.IsOpen == false)
           // //{
           // //SerialPort_Communiction.Open();
           // //}
           // if (ProgaramerOrderProcess3_Obj.serialstop)
           // {
           //     return;
           // }
           // if (SerialPort_Communiction3.IsOpen == false)
           // {
           //     return;
           // }
           // int l = 0x00;
           // receivedBytesThreshold = SerialPort_Communiction3.ReceivedBytesThreshold;
           // ProgaramerOrderProcess3_Obj.ReceiveData = new byte[receivedBytesThreshold];
           // if (SerialPort_Communiction3.BytesToRead < receivedBytesThreshold)
           // {
           //     return;
           //     l = SerialPort_Communiction3.BytesToRead;
           // }
           // try
           // {


           //     readdata = SerialPort_Communiction3.Read(ProgaramerOrderProcess3_Obj.ReceiveData, 0, SerialPort_Communiction3.ReceivedBytesThreshold);
           // }
           // catch (Exception e3)
           // {
           //     MessageBox.Show("hint", e3.Message);
           // }
           // /*
           // receivedBytesThreshold -= readdata;
           // index = readdata;
           // while (receivedBytesThreshold != 0)
           // {
           //     readdata = SerialPort_Communiction.Read(ProgaramerOrderProcess_Obj.ReceiveData, index, receivedBytesThreshold);
           //     index += readdata;

           //     receivedBytesThreshold -= readdata;
           // }
           // */
           // ProgaramerOrderProcess3_Obj.ReceiveFlag = true;
           // SerialPort_Communiction3.DiscardInBuffer();
        }
        private void SerialPort_Communiction4_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
        {
            //return;
            //int readdata = 0x00;
            //int receivedBytesThreshold = 0x00;
            ////int index = 0x00;
            ////if (SerialPort_Communiction.IsOpen == false)
            ////{
            ////SerialPort_Communiction.Open();
            ////}
            //if (ProgaramerOrderProcess4_Obj.serialstop)
            //{
            //    return;
            //}
            //if (SerialPort_Communiction4.IsOpen == false)
            //{
            //    return;
            //}
            //int l = 0x00;
            //receivedBytesThreshold = SerialPort_Communiction4.ReceivedBytesThreshold;
            //ProgaramerOrderProcess4_Obj.ReceiveData = new byte[receivedBytesThreshold];
            //if (SerialPort_Communiction4.BytesToRead < receivedBytesThreshold)
            //{
            //    return;
            //    l = SerialPort_Communiction4.BytesToRead;
            //}
            //try
            //{


            //    readdata = SerialPort_Communiction4.Read(ProgaramerOrderProcess4_Obj.ReceiveData, 0, SerialPort_Communiction4.ReceivedBytesThreshold);
            //}
            //catch (Exception e3)
            //{
            //    MessageBox.Show("hint", e3.Message);
            //}
            ///*
            //receivedBytesThreshold -= readdata;
            //index = readdata;
            //while (receivedBytesThreshold != 0)
            //{
            //    readdata = SerialPort_Communiction.Read(ProgaramerOrderProcess_Obj.ReceiveData, index, receivedBytesThreshold);
            //    index += readdata;

            //    receivedBytesThreshold -= readdata;
            //}
            //*/
            //ProgaramerOrderProcess4_Obj.ReceiveFlag = true;
            //SerialPort_Communiction4.DiscardInBuffer();
        }
        private void SerialPort_Communiction5_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
        {
          //  return;
          //  int readdata = 0x00;
          //  int receivedBytesThreshold = 0x00;
          ////  int index = 0x00;
          //  //if (SerialPort_Communiction.IsOpen == false)
          //  //{
          //  //SerialPort_Communiction.Open();
          //  //}
          //  if (ProgaramerOrderProcess5_Obj.serialstop)
          //  {
          //      return;
          //  }
          //  if (SerialPort_Communiction5.IsOpen == false)
          //  {
          //      return;
          //  }
          //  int l = 0x00;
          //  receivedBytesThreshold = SerialPort_Communiction5.ReceivedBytesThreshold;
          //  ProgaramerOrderProcess5_Obj.ReceiveData = new byte[receivedBytesThreshold];
          //  if (SerialPort_Communiction5.BytesToRead < receivedBytesThreshold)
          //  {
          //      return;
          //      l = SerialPort_Communiction5.BytesToRead;
          //  }
          //  try
          //  {


          //      readdata = SerialPort_Communiction5.Read(ProgaramerOrderProcess5_Obj.ReceiveData, 0, SerialPort_Communiction5.ReceivedBytesThreshold);
          //  }
          //  catch (Exception e3)
          //  {
          //      MessageBox.Show("hint", e3.Message);
          //  }
          //  /*
          //  receivedBytesThreshold -= readdata;
          //  index = readdata;
          //  while (receivedBytesThreshold != 0)
          //  {
          //      readdata = SerialPort_Communiction.Read(ProgaramerOrderProcess_Obj.ReceiveData, index, receivedBytesThreshold);
          //      index += readdata;

          //      receivedBytesThreshold -= readdata;
          //  }
          //  */
          //  ProgaramerOrderProcess5_Obj.ReceiveFlag = true;
          //  SerialPort_Communiction5.DiscardInBuffer();
        }
        private void SerialPort_Communiction6_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
        {
            //return;
            //int readdata = 0x00;
            //int receivedBytesThreshold = 0x00;
            ////int index = 0x00;
            ////if (SerialPort_Communiction.IsOpen == false)
            ////{
            ////SerialPort_Communiction.Open();
            ////}
            //if (ProgaramerOrderProcess6_Obj.serialstop)
            //{
            //    return;
            //}
            //if (SerialPort_Communiction6.IsOpen == false)
            //{
            //    return;
            //}
            //int l = 0x00;
            //receivedBytesThreshold = SerialPort_Communiction6.ReceivedBytesThreshold;
            //ProgaramerOrderProcess6_Obj.ReceiveData = new byte[receivedBytesThreshold];
            //if (SerialPort_Communiction6.BytesToRead < receivedBytesThreshold)
            //{
            //    return;
            //    l = SerialPort_Communiction6.BytesToRead;
            //}
            //try
            //{


            //    readdata = SerialPort_Communiction6.Read(ProgaramerOrderProcess6_Obj.ReceiveData, 0, SerialPort_Communiction6.ReceivedBytesThreshold);
            //}
            //catch (Exception e3)
            //{
            //    MessageBox.Show("hint", e3.Message);
            //}
            ///*
            //receivedBytesThreshold -= readdata;
            //index = readdata;
            //while (receivedBytesThreshold != 0)
            //{
            //    readdata = SerialPort_Communiction.Read(ProgaramerOrderProcess_Obj.ReceiveData, index, receivedBytesThreshold);
            //    index += readdata;

            //    receivedBytesThreshold -= readdata;
            //}
            //*/
            //ProgaramerOrderProcess6_Obj.ReceiveFlag = true;
            //SerialPort_Communiction6.DiscardInBuffer();
        }
        private void SerialPort_Communiction7_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
        {
           // return;
           // int readdata = 0x00;
           // int receivedBytesThreshold = 0x00;
           //// int index = 0x00;
           // //if (SerialPort_Communiction.IsOpen == false)
           // //{
           // //SerialPort_Communiction.Open();
           // //}
           // if (ProgaramerOrderProcess7_Obj.serialstop)
           // {
           //     return;
           // }
           // if (SerialPort_Communiction7.IsOpen == false)
           // {
           //     return;
           // }
           // int l = 0x00;
           // receivedBytesThreshold = SerialPort_Communiction7.ReceivedBytesThreshold;
           // ProgaramerOrderProcess7_Obj.ReceiveData = new byte[receivedBytesThreshold];
           // if (SerialPort_Communiction7.BytesToRead < receivedBytesThreshold)
           // {
           //     return;
           //     l = SerialPort_Communiction7.BytesToRead;
           // }
           // try
           // {


           //     readdata = SerialPort_Communiction7.Read(ProgaramerOrderProcess7_Obj.ReceiveData, 0, SerialPort_Communiction7.ReceivedBytesThreshold);
           // }
           // catch (Exception e3)
           // {
           //     MessageBox.Show("hint", e3.Message);
           // }
           // /*
           // receivedBytesThreshold -= readdata;
           // index = readdata;
           // while (receivedBytesThreshold != 0)
           // {
           //     readdata = SerialPort_Communiction.Read(ProgaramerOrderProcess_Obj.ReceiveData, index, receivedBytesThreshold);
           //     index += readdata;

           //     receivedBytesThreshold -= readdata;
           // }
           // */
           // ProgaramerOrderProcess7_Obj.ReceiveFlag = true;
           // SerialPort_Communiction7.DiscardInBuffer();
        }
        private void SerialPort_Communiction8_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
        {
          //  return;
          //  int readdata = 0x00;
          //  int receivedBytesThreshold = 0x00;
          ////  int index = 0x00;
          //  //if (SerialPort_Communiction.IsOpen == false)
          //  //{
          //  //SerialPort_Communiction.Open();
          //  //}
          //  if (ProgaramerOrderProcess8_Obj.serialstop)
          //  {
          //      return;
          //  }
          //  if (SerialPort_Communiction8.IsOpen == false)
          //  {
          //      return;
          //  }
          //  int l = 0x00;
          //  receivedBytesThreshold = SerialPort_Communiction8.ReceivedBytesThreshold;
          //  ProgaramerOrderProcess8_Obj.ReceiveData = new byte[receivedBytesThreshold];
          //  if (SerialPort_Communiction8.BytesToRead < receivedBytesThreshold)
          //  {
          //      return;
          //      l = SerialPort_Communiction8.BytesToRead;
          //  }
          //  try
          //  {


          //      readdata = SerialPort_Communiction8.Read(ProgaramerOrderProcess8_Obj.ReceiveData, 0, SerialPort_Communiction8.ReceivedBytesThreshold);
          //  }
          //  catch (Exception e3)
          //  {
          //      MessageBox.Show("hint", e3.Message);
          //  }
          //  /*
          //  receivedBytesThreshold -= readdata;
          //  index = readdata;
          //  while (receivedBytesThreshold != 0)
          //  {
          //      readdata = SerialPort_Communiction.Read(ProgaramerOrderProcess_Obj.ReceiveData, index, receivedBytesThreshold);
          //      index += readdata;

          //      receivedBytesThreshold -= readdata;
          //  }
          //  */
          //  ProgaramerOrderProcess8_Obj.ReceiveFlag = true;
          //  SerialPort_Communiction8.DiscardInBuffer();
        }

        private OperateResult<bool> PLCResult;
        private OperateResult PLCChipResult;
        private bool MCU1Start,MCU2Start;
        private bool MCU1StartClr, MCU2StartClr;
        private enum PLCMcu_List
        {
           ST3MCU1 = 1,
           ST3MCU2 = 2
        }
        private enum PLCMcuChip_List
        {
            ST3MCU1Chip1 = 1,
            ST3MCU1Chip2 = 2,
            ST3MCU1Chip3 = 3,
            ST3MCU1Chip4 = 4,
            ST3MCU2Chip1 = 5,
            ST3MCU2Chip2 = 6,
            ST3MCU2Chip3 = 7,
            ST3MCU2Chip4 = 8,
        }
        //private static bool Delay(int delayTime)
        //{
        //    DateTime now = DateTime.Now;
        //    int s;
        //    do
        //    {
        //        TimeSpan spand = DateTime.Now - now;
        //        s = spand.Seconds;
        //        Application.DoEvents();
        //    }
        //    while (s < delayTime);
        //    return true;
        //}
        [DllImport("kernel32.dll",
    CallingConvention = CallingConvention.Winapi)]
        extern static int GetTickCount();
        void Delay(UInt32 Count)
        {
            //t1.Interval = Count;         
            //t1.Enabled = true;
            //t1.Start();
            //while (true)
            //{
            //    if(DelayFlag == true)
            //    {
            //        t1.Stop();
            //        t1.Enabled = false;
            //        DelayFlag = false;
            //        return;
            //    }
            //}
            int start = GetTickCount();
            while (GetTickCount() - start < Count)
            {
                Application.DoEvents();
            }
        }
        private bool bSimRc1 = true;
        private bool bSimRc2 = true;

        private bool bSimM1C1Finish = true;
        private bool bSimM1C2Finish = true;
        private bool bSimM1C3Finish = true;
        private bool bSimM1C4Finish = true;

        private bool bSimM2C1Finish = true;
        private bool bSimM2C2Finish = true;
        private bool bSimM2C3Finish = true;
        private bool bSimM2C4Finish = true;


        private bool bSimFinish1 = true;
        private bool bSimFinish2 = true;
        private bool bSimResult = true;


        private void Button_Execute_Click(object sender, EventArgs e)
        {
            bStopAll = false;
            bStop1 = false;
            bStop2 = false;
            bStop3 = false;
            bStop4 = false;
            bStop5 = false;
            bStop6 = false;
            bStop7 = false;
            bStop8 = false;
            if (BusyFlagSub[1] == true || BusyFlagSub[2] == true || BusyFlagSub[3] == true || BusyFlagSub[4] == true || BusyFlagSub[5] == true || BusyFlagSub[6] == true || BusyFlagSub[7] == true || BusyFlagSub[8] == true)
            {
                MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Warning);
                return;
            }
            else
            {
                //BusyFlagSub[1] = true;
            }

            TargetMCUSlecet = ComboBox_TargetMCU.SelectedIndex;
            FrequencySlecet = ComboBox_Frequency.SelectedIndex;
            COMSlecet[1] = ComboBox_COM.SelectedIndex;
            COMSlecet[2] = ComboBox_COM2.SelectedIndex;
            COMSlecet[3] = ComboBox_COM3.SelectedIndex;
            COMSlecet[4] = ComboBox_COM4.SelectedIndex;
            COMSlecet[5] = ComboBox_COM5.SelectedIndex;
            COMSlecet[6] = ComboBox_COM6.SelectedIndex;
            COMSlecet[7] = ComboBox_COM7.SelectedIndex;
            COMSlecet[8] = ComboBox_COM8.SelectedIndex;
            comboBoxPortList.SelectedIndex = 0;//all
            TextBox_Info.Text = "";
            strTextinfoAll = "";
            strTextinfo1 = "";
            strTextinfo2 = "";
            strTextinfo3 = "";
            strTextinfo4 = "";
            strTextinfo5 = "";
            strTextinfo6 = "";
            strTextinfo7 = "";
            strTextinfo8 = "";

            if (ComboBox_TargetMCU.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.SelectTargetMCUEmpty, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[1] = false;
                return;
            }
            if (ComboBox_Frequency.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.SelectFrequencyEmpty, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[1] = false;
                return;
            }
            if (TextBox_HexFile.Text == "")
            {
                MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.SelectHexFileEmpty, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[1] = false;
                return;
            }
            RecordCount = 0;
            switch (ComboBox_Frequency.SelectedIndex)
            {
                case 0:
                    frequnecy = (int)(9600 * (ProgaramerOrderProcess1_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex] / 4000000));
                    //Crystal = ProgaramerOrderProcess_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex];
                    Crystal = 0;
                    break;

                case 1:
                    frequnecy = (int)(9600 * 1);
                    Crystal = 4000000;
                    break;
                case 2:
                    frequnecy = (int)(9600 * 1.5);
                    Crystal = 6000000;
                    break;

                case 3:
                    frequnecy = (int)(9600 * 2);
                    Crystal = 8000000;
                    break;
                case 4:
                    frequnecy = (int)(9600 * 2.5);
                    Crystal = 10000000;
                    break;
                case 5:
                    frequnecy = (int)(9600 * 3);
                    Crystal = 12000000;
                    break;
                case 6:
                    frequnecy = (int)(9600 * 4);
                    Crystal = 16000000;
                    break;
                case 7:
                    frequnecy = (int)(9600 * 4.5);
                    Crystal = 18000000;
                    break;
                case 8:
                    frequnecy = (int)(9600 * 5);
                    Crystal = 20000000;
                    break;
                case 9:
                    frequnecy = (int)(9600 * 6);
                    Crystal = 24000000;
                    break;
                case 10:
                    frequnecy = (int)(9600 * 8);
                    Crystal = 32000000;
                    break;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess1_Obj.RetryCnt = 5;
                ProgaramerOrderProcess1_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess1_Obj.RetryCnt = 25;
                ProgaramerOrderProcess1_Obj.ConnectTimeOut = 200;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess2_Obj.RetryCnt = 5;
                ProgaramerOrderProcess2_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess2_Obj.RetryCnt = 25;
                ProgaramerOrderProcess2_Obj.ConnectTimeOut = 200;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess3_Obj.RetryCnt = 5;
                ProgaramerOrderProcess3_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess3_Obj.RetryCnt = 25;
                ProgaramerOrderProcess3_Obj.ConnectTimeOut = 200;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess4_Obj.RetryCnt = 5;
                ProgaramerOrderProcess4_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess4_Obj.RetryCnt = 25;
                ProgaramerOrderProcess4_Obj.ConnectTimeOut = 200;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess5_Obj.RetryCnt = 5;
                ProgaramerOrderProcess5_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess5_Obj.RetryCnt = 25;
                ProgaramerOrderProcess5_Obj.ConnectTimeOut = 200;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess6_Obj.RetryCnt = 5;
                ProgaramerOrderProcess6_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess6_Obj.RetryCnt = 25;
                ProgaramerOrderProcess6_Obj.ConnectTimeOut = 200;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess7_Obj.RetryCnt = 5;
                ProgaramerOrderProcess7_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess7_Obj.RetryCnt = 25;
                ProgaramerOrderProcess7_Obj.ConnectTimeOut = 200;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess8_Obj.RetryCnt = 5;
                ProgaramerOrderProcess8_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess8_Obj.RetryCnt = 25;
                ProgaramerOrderProcess8_Obj.ConnectTimeOut = 200;
            }
            //if (SerialPort_Communiction1.IsOpen == true)
            //{
            //    try
            //    {
            //        SerialPort_Communiction1.Close();
            //    }
            //    catch
            //    {

            //    }
            //}
            //SerialPort_Communiction1.BaudRate = frequnecy;
            //SerialPort_Communiction1.PortName = ComboBox_COM.Text;
            //SerialPort_Communiction2.BaudRate = frequnecy;
            //SerialPort_Communiction2.PortName = ComboBox_COM2.Text;
            //SerialPort_Communiction3.BaudRate = frequnecy;
            //SerialPort_Communiction3.PortName = ComboBox_COM3.Text;
            //SerialPort_Communiction4.BaudRate = frequnecy;
            //SerialPort_Communiction4.PortName = ComboBox_COM4.Text;
            //SerialPort_Communiction5.BaudRate = frequnecy;
            //SerialPort_Communiction5.PortName = ComboBox_COM5.Text;
            //SerialPort_Communiction6.BaudRate = frequnecy;
            //SerialPort_Communiction6.PortName = ComboBox_COM6.Text;
            //SerialPort_Communiction7.BaudRate = frequnecy;
            //SerialPort_Communiction7.PortName = ComboBox_COM7.Text;
            //SerialPort_Communiction8.BaudRate = frequnecy;
            //SerialPort_Communiction8.PortName = ComboBox_COM8.Text;

            //if (SerialPort_Communiction1.IsOpen == false)
            //{
            //    try
            //    {
            //        SerialPort_Communiction1.Open();
            //    }
            //    catch (Exception ex)
            //    {

            //    }
            //}
            // Control.CheckForIllegalCrossThreadCalls = false;

            byte stats = GetHexFile();
            if (stats != (byte)eErrNumber.Succesful)
            {
                MessageBox.Show("文件读取失败");
                return;
            }
            //ComboBox_COM.Enabled = false;
            ////PictureBox_hexFile.Enabled= false;
            ////TextBox_HexFile.Enabled = false;
            ComText1 = ComboBox_COM.Text;
            ComText2 = ComboBox_COM2.Text;
            ComText3 = ComboBox_COM3.Text;
            ComText4 = ComboBox_COM4.Text;
            ComText5 = ComboBox_COM5.Text;
            ComText6 = ComboBox_COM6.Text;
            ComText7 = ComboBox_COM7.Text;
            ComText8 = ComboBox_COM8.Text;

            ProcessbarControl(0, 1);
            ProcessbarControl(0, 2);
            ProcessbarControl(0, 3);
            ProcessbarControl(0, 4);
            ProcessbarControl(0, 5);
            ProcessbarControl(0, 6);
            ProcessbarControl(0, 7);
            ProcessbarControl(0, 8);

           //t5 = new Thread(new ThreadStart(Connect_thread5));
           //t6 = new Thread(new ThreadStart(Connect_thread6));
           //t7 = new Thread(new ThreadStart(Connect_thread7));
           //t8 = new Thread(new ThreadStart(Connect_thread8));
           //t = new Thread(new ThreadStart(Connect_thread1));
           //t2 = new Thread(new ThreadStart(Connect_thread2));
           //t3 = new Thread(new ThreadStart(Connect_thread3));
           //t4 = new Thread(new ThreadStart(Connect_thread4));

            //Thread tPlc1 = new Thread(new ThreadStart(Plc_thread1));
            //Thread tPlc2 = new Thread(new ThreadStart(Plc_thread2));

            if (ProgaramerOrderProcess1_Obj.DisplayText_obj.ModBustEnb == "1")
            {

                byte rc = PLCConnect(ProgaramerOrderProcess1_Obj.DisplayText_obj.IPAddr, int.Parse(ProgaramerOrderProcess1_Obj.DisplayText_obj.Port));
                if (rc != (byte)eErrNumber.Succesful)
                {
                    return;
                }
                else
                {
                    while (bStopAll == false)
                    {
                        //Application.DoEvents();
                        Delay(100);
                        if (Mcu1Busy == false)
                        {
                            MCU1Start = GetPLCMcuStatus1();
                            if (MCU1Start == false)
                            {
                                //Application.DoEvents();
                                Delay(100);
                                //ShowMsg("MCU1 not ready\r\n", 0);
                            }
                            else
                            {
                                Mcu1Busy = true;
                                ShowMsg("MCU1 ready\r\n", 0);
                                SetPLCMcuStatus1(false);
                                MCU1StartClr = GetPLCMcuStatus1();
                                if (!MCU1StartClr)
                                {
                                    ShowMsg("MCU1 clr\r\n", 0);
                                }


                                t = new Thread(new ThreadStart(Connect_thread1));
                                t2 = new Thread(new ThreadStart(Connect_thread2));
                                t3 = new Thread(new ThreadStart(Connect_thread3));
                                t4 = new Thread(new ThreadStart(Connect_thread4));
                                COMFinished[1] = false;
                                COMFinished[2] = false;
                                COMFinished[3] = false;
                                COMFinished[4] = false;
                                if (ComboBox_COM.SelectedIndex < 0)
                                {

                                }
                                else
                                {
                                    ///Thread t = new Thread(new ThreadStart(Connect_thread1));
                                    ///
                                    Mcu1Start++;
                                    t.Start();
                                    LabelControl("BUSY...", 1);
                                }


                                if (ComboBox_COM2.SelectedIndex < 0)
                                {

                                }
                                else
                                {
                                    //Thread t2 = new Thread(new ThreadStart(Connect_thread2));
                                    Mcu1Start++;
                                    t2.Start();
                                    LabelControl("BUSY...", 2);
                                }


                                if (ComboBox_COM3.SelectedIndex < 0)
                                {

                                }
                                else
                                {
                                    //Thread t3 = new Thread(new ThreadStart(Connect_thread3));
                                    Mcu1Start++;
                                    t3.Start();
                                    LabelControl("BUSY...", 3);
                                }


                                if (ComboBox_COM4.SelectedIndex < 0)
                                {

                                }
                                else
                                {
                                    //Thread t4 = new Thread(new ThreadStart(Connect_thread4));
                                    Mcu1Start++;
                                    t4.Start();
                                    LabelControl("BUSY...", 4);
                                }


                                Control.CheckForIllegalCrossThreadCalls = true;
                                Button_Execute.Enabled = false;

                                Button_Start1.Enabled = false;
                                Button_Start2.Enabled = false;
                                Button_Start3.Enabled = false;
                                Button_Start4.Enabled = false;
                            }
                        }
                        else
                        {
                            if (COMFinished[1] == true)
                            {
                                SetPLCMcu1Chip1Result(COMResult[1]);
                                ShowMsg("MCU1Chip1 Finished\r\n", 0);
                                Mcu1Finished++;
                                COMFinished[1] = false;
                            }
                            if (COMFinished[2] == true)
                            {
                                SetPLCMcu1Chip2Result(COMResult[2]);
                                ShowMsg("MCU1Chip2 Finished\r\n", 0);
                                Mcu1Finished++;
                                COMFinished[2] = false;
                            }
                            if (COMFinished[3] == true)
                            {
                                SetPLCMcu1Chip3Result(COMResult[3]);
                                ShowMsg("MCU1Chip3 Finished\r\n", 0);
                                Mcu1Finished++;
                                COMFinished[3] = false;
                            }
                            if (COMFinished[4] == true)
                            {
                                SetPLCMcu1Chip4Result(COMResult[4]);
                                ShowMsg("MCU1Chip4 Finished\r\n", 0);
                                Mcu1Finished++;
                                COMFinished[4] = false;
                            }

                            if (Mcu1Finished >= Mcu1Start)
                            {
                                //Delay(200);
                                SetPLCMcuFinish1(true);
                                ShowMsg("MCU1 Finished\r\n", 0);
                                COMFinished[1] = false;
                                COMFinished[2] = false;
                                COMFinished[3] = false;
                                COMFinished[4] = false;
                                Mcu1Finished = 0;
                                Mcu1Start = 0;
                                Mcu1Busy = false;
                            }
                        }
                        if (Mcu2Busy == false)
                        {
                            MCU2Start = GetPLCMcuStatus2();
                            if (MCU2Start == false)
                            {
                                //Application.DoEvents();
                                Delay(100);
                                //ShowMsg("MCU2 not ready\r\n", 0);
                            }
                            else
                            {
                                
                                t5 = new Thread(new ThreadStart(Connect_thread5));
                                t6 = new Thread(new ThreadStart(Connect_thread6));
                                t7 = new Thread(new ThreadStart(Connect_thread7));
                                t8 = new Thread(new ThreadStart(Connect_thread8));
                                COMFinished[5] = false;
                                COMFinished[6] = false;
                                COMFinished[7] = false;
                                COMFinished[8] = false;
                                Mcu2Busy = true;
                                ShowMsg("MCU2 ready\r\n", 0);
                                SetPLCMcuStatus2(false);
                                if (ComboBox_COM7.SelectedIndex < 0)
                                {

                                }
                                else
                                {
                                    //Thread t7 = new Thread(new ThreadStart(Connect_thread7));
                                    Mcu2Start++;
                                    t7.Start();
                                    LabelControl("BUSY...", 7);
                                }

                                if (ComboBox_COM8.SelectedIndex < 0)
                                {

                                }
                                else
                                {
                                    //Thread t8 = new Thread(new ThreadStart(Connect_thread8));
                                    Mcu2Start++;
                                    t8.Start();
                                    LabelControl("BUSY...", 8);
                                }

                                if (ComboBox_COM5.SelectedIndex < 0)
                                {

                                }
                                else
                                {
                                    //Thread t5 = new Thread(new ThreadStart(Connect_thread5));
                                    Mcu2Start++;
                                    t5.Start();
                                    LabelControl("BUSY...", 5);
                                }

                                if (ComboBox_COM6.SelectedIndex < 0)
                                {

                                }
                                else
                                {
                                    //Thread t6 = new Thread(new ThreadStart(Connect_thread6));
                                    Mcu2Start++;
                                    t6.Start();
                                    LabelControl("BUSY...", 6);
                                }
                                Control.CheckForIllegalCrossThreadCalls = true;
                                Button_Execute.Enabled = false;

                                Button_Start5.Enabled = false;
                                Button_Start6.Enabled = false;
                                Button_Start7.Enabled = false;
                                Button_Start8.Enabled = false;
                            }
                        }
                        else
                        {
                            if (COMFinished[5] == true)
                            {
                                SetPLCMcu2Chip1Result(COMResult[5]);
                                Mcu2Finished++;
                                COMFinished[5] = false;
                            }
                            if (COMFinished[6] == true)
                            {
                                SetPLCMcu2Chip2Result(COMResult[6]);
                                Mcu2Finished++;
                                COMFinished[6] = false;
                            }
                            if (COMFinished[7] == true)
                            {
                                SetPLCMcu2Chip3Result(COMResult[7]);
                                Mcu2Finished++;
                                COMFinished[7] = false;
                            }
                            if (COMFinished[8] == true)
                            {
                                SetPLCMcu2Chip4Result(COMResult[8]);
                                Mcu2Finished++;
                                COMFinished[8] = false;
                            }

                            if (Mcu2Finished >= Mcu2Start)
                            {
                                //Delay(100);

                                SetPLCMcuFinish2(true);
                                ShowMsg("MCU2 Finished\r\n", 0);
                                COMFinished[5] = false;
                                COMFinished[6] = false;
                                COMFinished[7] = false;
                                COMFinished[8] = false;
                                Mcu2Finished = 0;
                                Mcu2Start = 0;
                                Mcu2Busy = false;
                            }
                        }
                    }
                    PLCClose();
                }
               // tPlc1.Start();
                //tPlc2.Start();
            }
            else
            {
                t5 = new Thread(new ThreadStart(Connect_thread5));
                t6 = new Thread(new ThreadStart(Connect_thread6));
                t7 = new Thread(new ThreadStart(Connect_thread7));
                t8 = new Thread(new ThreadStart(Connect_thread8));
                t = new Thread(new ThreadStart(Connect_thread1));
                t2 = new Thread(new ThreadStart(Connect_thread2));
                t3 = new Thread(new ThreadStart(Connect_thread3));
                t4 = new Thread(new ThreadStart(Connect_thread4));
                if (ComboBox_COM7.SelectedIndex < 0)
                {

                }
                else
                {
                    //Thread t7 = new Thread(new ThreadStart(Connect_thread7));
                    t7.Start();
                    LabelControl("BUSY...", 7);
                }
                if (ComboBox_COM8.SelectedIndex < 0)
                {

                }
                else
                {
                    //Thread t8 = new Thread(new ThreadStart(Connect_thread8));
                    t8.Start();
                    LabelControl("BUSY...", 8);
                }
                if (ComboBox_COM.SelectedIndex < 0)
                {

                }
                else
                {
                    ///Thread t = new Thread(new ThreadStart(Connect_thread1));
                    t.Start();
                    LabelControl("BUSY...", 1);
                }
                if (ComboBox_COM2.SelectedIndex < 0)
                {

                }
                else
                {
                    //Thread t2 = new Thread(new ThreadStart(Connect_thread2));
                    t2.Start();
                    LabelControl("BUSY...", 2);
                }
                if (ComboBox_COM3.SelectedIndex < 0)
                {

                }
                else
                {
                    //Thread t3 = new Thread(new ThreadStart(Connect_thread3));
                    t3.Start();
                    LabelControl("BUSY...", 3);
                }
                if (ComboBox_COM4.SelectedIndex < 0)
                {

                }
                else
                {
                    //Thread t4 = new Thread(new ThreadStart(Connect_thread4));
                    t4.Start();
                    LabelControl("BUSY...", 4);
                }
                if (ComboBox_COM5.SelectedIndex < 0)
                {

                }
                else
                {
                    //Thread t5 = new Thread(new ThreadStart(Connect_thread5));
                    t5.Start();
                    LabelControl("BUSY...", 5);
                }
                if (ComboBox_COM6.SelectedIndex < 0)
                {

                }
                else
                {
                    //Thread t6 = new Thread(new ThreadStart(Connect_thread6));
                    t6.Start();
                    LabelControl("BUSY...", 6);
                }

                Control.CheckForIllegalCrossThreadCalls = true;
                Button_Execute.Enabled = true;

                Button_Start1.Enabled = false;
                Button_Start2.Enabled = false;
                Button_Start3.Enabled = false;
                Button_Start4.Enabled = false;
                Button_Start5.Enabled = false;
                Button_Start6.Enabled = false;
                Button_Start7.Enabled = false;
                Button_Start8.Enabled = false;
            }
        }


        //void Button_Execute_thread()
        //{
        //    try
        //    {
        //        if (SerialPort_Communiction.BytesToRead > 0)
        //        {
        //            byte[] ReceiveData = new byte[SerialPort_Communiction.BytesToRead];
        //            byte[] t = new byte[SerialPort_Communiction.BytesToRead];
        //            SerialPort_Communiction.Read(ReceiveData, 0, SerialPort_Communiction.BytesToRead);
        //        }
        //        //for (int ii = 0; ii < Convert.ToInt32(textBox1.Text,10); ii++)
        //        //{
        //        //label4.Text = ii.ToString();
        //        Control.CheckForIllegalCrossThreadCalls = false;
        //        ProcessbarControl( 0;
        //        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //        if (CheckBox_Erase.Checked == true)
        //        {
        //            if (RadioButton_ChipErase.Checked == true)
        //            {
        //                byte[] CRdata = new byte[ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
        //                byte[] UIDdata = new byte[ProgaramerOrderProcess_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
        //                if (TextBox_Info.Text == "")
        //                {
        //                    TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartChipErase;
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                }
        //                else
        //                {
        //                    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartChipErase;
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                }

        //                ProcessbarControl( 2;
        //                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //                //byte[] CRadd = 
        //                /*byte stats = ProgaramerOrderProcess_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);

        //                if (stats == (byte)eErrNumber.Succesful)
        //                {
        //                    XMLProcess x = new XMLProcess();
        //                    string cr = "";
        //                    for (int i = 0; i < 16; i++)
        //                    {
        //                        cr += Convert.ToString(CRdata[i], 16).PadLeft(2, '0');
        //                    }
        //                    x.SaveUserArea(cr, ComboBox_TargetMCU.SelectedIndex);
        //                }
        //                else
        //                {
        //                    Button_Execute.Enabled = true;
        //                    //BusyFlag = false;
        //                    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                    Button_Execute.Focus();
        //                    Control.CheckForIllegalCrossThreadCalls = true;
        //                    BusyFlag = false;
        //                    return;
        //                }*/
        //                ProcessbarControl( 4;
        //                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //                /*stats = ProgaramerOrderProcess_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.UIDAdd[ComboBox_TargetMCU.SelectedIndex]), UIDdata.Length, ref UIDdata);
        //                ProcessbarControl( 8;
        //                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //                if (stats == (byte)eErrNumber.Succesful)
        //                {
        //                    XMLProcess x = new XMLProcess();
        //                    string cr = "";
        //                    for (int i = 0; i < 12; i++)
        //                    {
        //                        cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
        //                    }
        //                    x.SaveUID(cr, ComboBox_TargetMCU.SelectedIndex);
        //                }
        //                else
        //                {
        //                    Button_Execute.Enabled = true;
        //                    //BusyFlag = false;
        //                    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                    Button_Execute.Focus();
        //                    Control.CheckForIllegalCrossThreadCalls = true;
        //                    BusyFlag = false;
        //                    return;
        //                }
        //                */
        //                byte Result = 0;
        //                byte stats = ProgaramerOrderProcess_Obj.CheckEncrypt(SerialPort_Communiction, ref Result);
        //                if (stats == (byte)eErrNumber.Succesful)
        //                {
        //                    //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //                    /*if (Result == 0x01)
        //                    {
        //                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadFail + ": " + ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted;
        //                        //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                        TextBox_Info.ScrollToCaret();
        //                        //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                        //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                        //MessageBoxIcon.Error);
        //                        Button_Upload.Enabled = true;
        //                        Control.CheckForIllegalCrossThreadCalls = true;
        //                        BusyFlag = false;
        //                        return;
        //                    }*/
        //                }
        //                else
        //                {
        //                    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //                    //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                    Button_Execute.Enabled = true;
        //                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.UploadSuccessful ;
        //                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    //TextBox_Info.ScrollToCaret();
        //                    Control.CheckForIllegalCrossThreadCalls = true;
        //                    BusyFlag = false;
        //                    return;
        //                }

        //                ProcessbarControl( 6;
        //                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //                stats = ProgaramerOrderProcess_Obj.EraseFlash(SerialPort_Communiction);
        //                if (stats == (byte)eErrNumber.Succesful)
        //                {
        //                    /*
        //                    Button_Erase.Enabled = true;
        //                    //BusyFlag = false;
        //                    ChipEraseFlag = true;
        //                    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ChipEraseSuccessful;
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                    ProcessbarControl( 100;
        //                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //                    */

        //                }
        //                else
        //                {
        //                    Button_Execute.Enabled = true;
        //                    //BusyFlag = false;
        //                    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                    Button_Execute.Focus();
        //                    Control.CheckForIllegalCrossThreadCalls = true;
        //                    BusyFlag = false;
        //                    return;
        //                }
        //                ProcessbarControl( 8;
        //                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //                /*
        //                stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata);
        //                if (stats == (byte)eErrNumber.Succesful)
        //                {

        //                }
        //                else
        //                {
        //                    Button_Execute.Enabled = true;
        //                    //BusyFlag = false;
        //                    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                    Button_Execute.Focus();
        //                    Control.CheckForIllegalCrossThreadCalls = true;
        //                    BusyFlag = false;
        //                    return;
        //                }
        //                */
        //                if (Result == 0x01)
        //                {
        //                    stats = ProgaramerOrderProcess_Obj.MCUReset(SerialPort_Communiction);
        //                    if (stats == (byte)eErrNumber.Succesful)
        //                    {

        //                    }
        //                    else
        //                    {
        //                        Button_Execute.Enabled = true;
        //                        //BusyFlag = false;
        //                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.MassEraseFail;
        //                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                        TextBox_Info.ScrollToCaret();
        //                        ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                        Control.CheckForIllegalCrossThreadCalls = true;
        //                        BusyFlag = false;
        //                        return;
        //                    }

        //                    //ProgaramerOrderProcess_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess_Obj.SystemConfig_obj);
        //                    //CRdata = new byte[ProgaramerOrderProcess_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
        //                    //UIDdata = new byte[ProgaramerOrderProcess_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
        //                    if (true)
        //                    {
        //                        stats = ProgaramerOrderProcess_Obj.ConnectProcess(SerialPort_Communiction, ProgaramerOrderProcess_Obj.SystemConfig_obj.RAMCodeAdd[ComboBox_TargetMCU.SelectedIndex],
        //                                                                   ComboBox_COM.Text, frequnecy, Crystal);
        //                    }
        //                    if (stats == (byte)eErrNumber.Succesful)
        //                    {

        //                    }
        //                    else
        //                    {
        //                        Button_Execute.Enabled = true;
        //                        ProgaramerOrderProcess_Obj.DisConnectProcess(SerialPort_Communiction);
        //                        ConnectControlDisplay(ConnectFlag);
        //                        //Button_Connect.Enabled = true;
        //                        Control.CheckForIllegalCrossThreadCalls = true;
        //                        BusyFlag = false;
        //                        ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                        return;
        //                    }
        //                }
        //                Button_Erase.Enabled = true;
        //                //BusyFlag = false;
        //                ChipEraseFlag = true;
        //                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ChipEraseSuccessful;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //                //ProcessbarControl( 100;
        //                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //                checkAutoNumber = false;
        //                ProcessbarControl( 10;
        //                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //            }
        //            else if (RadioButton_PageErase.Checked == true)
        //            {
        //                if (TextBox_Info.Text == "")
        //                {
        //                    TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartPageErase;
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                }
        //                else
        //                {
        //                    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartPageErase;
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                }
        //                double tep = 10 / ((HexData.Length + 511) / ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]);
        //                for (int i = 0; i < (HexData.Length + 511) / ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]; i++)
        //                {
        //                    byte[] pageaddress = BitConverter.GetBytes((UInt32)(i * ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]
        //                                                               + ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]));
        //                    byte stats = ProgaramerOrderProcess_Obj.ErasePage(SerialPort_Communiction, pageaddress);
        //                    if (stats == (byte)eErrNumber.Succesful)
        //                    {
        //                        ChipEraseFlag = false;

        //                    }
        //                    else
        //                    {
        //                        string s = "";
        //                        if (stats == (byte)eErrNumber.Encrypted)
        //                        {
        //                            s = ": " + ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted;
        //                        }
        //                        Button_Execute.Enabled = true;
        //                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.PageEraseFail + s;
        //                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                        TextBox_Info.ScrollToCaret();
        //                        ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                        Button_Execute.Focus();
        //                        Control.CheckForIllegalCrossThreadCalls = true;
        //                        BusyFlag = false;
        //                        return;
        //                    }
        //                    ProcessbarControl( (int)(i * tep);
        //                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //                }
        //                checkAutoNumber = false;
        //                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.PageEraseSuccessful;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();

        //                //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.PageEraseSuccessful, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //                //MessageBoxIcon.Warning);
        //            }
        //        }
        //        ProcessbarControl( 10;
        //        ////label2.Text = ProgressBar_1.Value.ToString() + "%";

        //        if (CheckBox_BlankCheck.Checked == true)
        //        {
        //            if (TextBox_Info.Text == "")
        //            {
        //                TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartBlankCheck;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //            }
        //            else
        //            {
        //                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartBlankCheck;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //            }
        //            ProcessbarControl( 12;
        //            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //            byte result = 0x00;
        //            UInt32 Lenght = 0x00;
        //            if (ChipEraseFlag == true)
        //            {
        //                Lenght = (UInt32)(ProgaramerOrderProcess_Obj.SystemConfig_obj.PageCount[this.ComboBox_TargetMCU.SelectedIndex] *
        //                             ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]);
        //            }
        //            else
        //            {
        //                Lenght = (UInt32)(((HexData.Length + 511) / ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]) *
        //                             ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]);
        //            }
        //            ProcessbarControl( 15;
        //            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //            UInt32 ErrAdd = 0x00;
        //            byte stats = ProgaramerOrderProcess_Obj.CheckBlank(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]), Lenght, ref result, ref ErrAdd);
        //            if (stats == (byte)eErrNumber.Succesful)
        //            {

        //            }
        //            else
        //            {
        //                string ss = "";
        //                if (stats == (byte)eErrNumber.Encrypted)
        //                {
        //                    ss = ": " + ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted;
        //                }
        //                Button_Execute.Enabled = true;
        //                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.BlankCheckFail + ss;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //                ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                Button_Execute.Focus();
        //                Control.CheckForIllegalCrossThreadCalls = true;
        //                BusyFlag = false;
        //                return;
        //            }
        //            ProcessbarControl( 17;
        //            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //            string s = "";
        //            if (result == 0x01)
        //            {
        //                s = ProgaramerOrderProcess_Obj.DisplayText_obj.ResultBlank;
        //            }
        //            else if (result == 0x00)
        //            {
        //                s = ProgaramerOrderProcess_Obj.DisplayText_obj.ResultNotBlank + "0x" + Convert.ToString(ErrAdd, 16).ToUpper().PadLeft(8, '0');
        //            }
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.BlankCheckSuccessful + s;
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //            //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.BlankCheckSuccessful + s, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //            //MessageBoxIcon.Warning);
        //        }
        //        ProcessbarControl( 20;
        //        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //        if (CheckBox_Program.Checked == true)
        //        {
        //            byte stats = GetHexFile();
        //            if (stats != (byte)eErrNumber.Succesful)
        //            {
        //                Button_Execute.Enabled = true;
        //                BusyFlag = false;
        //                Control.CheckForIllegalCrossThreadCalls = true;
        //                return;
        //            }
        //            //PictureBox_hexFile.Enabled= false;
        //            //TextBox_HexFile.Enabled = false;

        //            if (TextBox_Info.Text == "")
        //            {
        //                TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartProgram;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //            }
        //            else
        //            {
        //                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartProgram;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //            }
        //            ProcessbarControl( 20;
        //            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //            if (CheckBox_AutoNumber.Checked == true)
        //            {
        //                if (AutoNumberEnable == false)
        //                {
        //                    MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
        //                    //TextBox_HexFile.Enabled = true;
        //                    //PictureBox_hexFile.Enabled= true;
        //                    Button_Execute.Enabled = true;
        //                    Control.CheckForIllegalCrossThreadCalls = true;
        //                    BusyFlag = false;
        //                    return;
        //                }
        //                else
        //                {
        //                    if ((NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) < HexData.Length)
        //                    {
        //                        DialogResult dr = MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OverHexData, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
        //                        if (dr == DialogResult.No)
        //                        {
        //                            Button_Execute.Enabled = true;
        //                            Button_Execute.Focus();
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                        else if (dr == DialogResult.Yes)
        //                        {
        //                            byte[] CurrentNumData = BitConverter.GetBytes(CurrentNumber);
        //                            for (int i = 0; i < 4; i++)
        //                            {
        //                                if ((NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex] + i) < HexData.Length)
        //                                {
        //                                    HexData[NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex] + i] = CurrentNumData[i];
        //                                }
        //                            }
        //                            if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) == 3)
        //                            {
        //                                byte[] senddata = new byte[1];
        //                                senddata[0] = CurrentNumData[3];
        //                                stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), senddata);
        //                                if (stats == (byte)eErrNumber.Succesful)
        //                                {

        //                                }
        //                                else
        //                                {
        //                                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                                    //TextBox_Length.Text = FailCount.ToString();
        //                                    //TextBox_HexFile.Enabled = true;
        //                                    //PictureBox_hexFile.Enabled= true;
        //                                    Button_Execute.Enabled = true;
        //                                    Control.CheckForIllegalCrossThreadCalls = true;
        //                                    BusyFlag = false;
        //                                    return;
        //                                }
        //                            }
        //                            else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) == 2)
        //                            {
        //                                byte[] senddata = new byte[2];
        //                                senddata[0] = CurrentNumData[2];
        //                                senddata[1] = CurrentNumData[3];
        //                                stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), senddata);
        //                                if (stats == (byte)eErrNumber.Succesful)
        //                                {

        //                                }
        //                                else
        //                                {
        //                                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                                    //TextBox_Length.Text = FailCount.ToString();
        //                                    //TextBox_HexFile.Enabled = true;
        //                                    //PictureBox_hexFile.Enabled= true;
        //                                    Button_Execute.Enabled = true;
        //                                    Control.CheckForIllegalCrossThreadCalls = true;
        //                                    BusyFlag = false;
        //                                    return;
        //                                }
        //                            }
        //                            else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) == 1)
        //                            {
        //                                byte[] senddata = new byte[3];
        //                                senddata[0] = CurrentNumData[1];
        //                                senddata[1] = CurrentNumData[2];
        //                                senddata[2] = CurrentNumData[3];
        //                                stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), senddata);
        //                                if (stats == (byte)eErrNumber.Succesful)
        //                                {

        //                                }
        //                                else
        //                                {
        //                                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                                    //TextBox_Length.Text = FailCount.ToString();
        //                                    //TextBox_HexFile.Enabled = true;
        //                                    //PictureBox_hexFile.Enabled= true;
        //                                    Button_Execute.Enabled = true;
        //                                    Control.CheckForIllegalCrossThreadCalls = true;
        //                                    BusyFlag = false;
        //                                    return;
        //                                }
        //                            }
        //                        }
        //                    }
        //                    else
        //                    {
        //                        stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdderss)), BitConverter.GetBytes((UInt32)(CurrentNumber)));
        //                        if (stats == (byte)eErrNumber.Succesful)
        //                        {

        //                        }
        //                        else
        //                        {
        //                            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            //TextBox_Length.Text = FailCount.ToString();
        //                            //TextBox_HexFile.Enabled = true;
        //                            //PictureBox_hexFile.Enabled= true;
        //                            Button_Execute.Enabled = true;
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                    }
        //                    checkAutoNumber = true;
        //                    NumberAdd = NumberAdderss;
        //                }
        //            }
        //            ProcessbarControl( 25;
        //            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //            TotalCount++;
        //            stats = 0x00;
        //            byte[] sentdata = new byte[512];
        //            int count = (int)((HexData.Length + 511) / ProgaramerOrderProcess_Obj.SystemConfig_obj.PageSize[this.ComboBox_TargetMCU.SelectedIndex]);
        //            int tep = 45000 / count;
        //            for (int i = 0; i < count; i++)
        //            {
        //                if (i == (count - 1))
        //                {
        //                    sentdata = new byte[HexData.Length - (i * 512)];
        //                    Array.Copy(HexData, i * 512, sentdata, 0, HexData.Length - (i * 512));
        //                }
        //                else
        //                {
        //                    Array.Copy(HexData, i * 512, sentdata, 0, 512);
        //                }
        //                stats = ProgaramerOrderProcess_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex] + i * 512)), sentdata);
        //                if (stats == (byte)eErrNumber.Succesful)
        //                {

        //                }
        //                else
        //                {
        //                    string s = "";
        //                    if (stats == (byte)eErrNumber.Encrypted)
        //                    {
        //                        s = ": " + ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted;
        //                    }
        //                    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ProgramFail + s;
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                    FailCount++;
        //                    Button_Execute.Enabled = true;
        //                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                    //TextBox_Length.Text = FailCount.ToString();
        //                    //PictureBox_hexFile.Enabled= true;
        //                    //TextBox_HexFile.Enabled = true;
        //                    Button_Execute.Focus();
        //                    Control.CheckForIllegalCrossThreadCalls = true;
        //                    BusyFlag = false;
        //                    return;
        //                }
        //                ProcessbarControl( (int)(25 + ((i * tep) / 1000));
        //                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //            }
        //            if (AutoNumberEnable == true&& CheckBox_AutoNumber.Checked == true)
        //            {
        //                HistoryNumber = CurrentNumber;
        //                if (CheckBox_AutoNumber.Checked == true)
        //                {
        //                    CurrentNumber += NumberInterval;
        //                }

        //                if (!(CurrentNumber < (StartNumber + (NumberLength)* NumberInterval)))
        //                {
        //                    MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.AutoNumberFinsh, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK, MessageBoxIcon.Warning);
        //                    CheckBox_AutoNumber.Checked = false;
        //                    AutoNumberEnable = false;
        //                    Button_OpenClose.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.AutoNumberOpen;
        //                    Button_OpenClose.Enabled = false;
        //                }
        //                else
        //                {
        //                    Label_CurrentNumbers.Text = CurrentNumber.ToString();
        //                }
        //                Label_HistoryNumbers.Text = HistoryNumber.ToString();
        //            }
        //            //PictureBox_hexFile.Enabled= true;
        //            //TextBox_HexFile.Enabled = true;
        //            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.ProgramSuccessful;
        //            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //            TextBox_Info.ScrollToCaret();
        //            //TextBox_NumberAddress.Text = PassCount.ToString();
        //            //TextBox_StartNumber.Text = TotalCount.ToString();
        //        }
        //        ProcessbarControl( 70;
        //        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //        if (CheckBox_Verify.Checked == true)
        //        {
        //            byte stats = GetHexFile();
        //            if (stats != (byte)eErrNumber.Succesful)
        //            {
        //                Button_Execute.Enabled = true;
        //                BusyFlag = false;
        //                Control.CheckForIllegalCrossThreadCalls = true;
        //                return;
        //            }
        //            //PictureBox_hexFile.Enabled= false;
        //            //TextBox_HexFile.Enabled = false;
        //            if (TextBox_Info.Text == "")
        //            {
        //                TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartVerify;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //            }
        //            else
        //            {
        //                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartVerify;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //            }
        //            ProcessbarControl( 75;
        //            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //            if (checkAutoNumber == true)
        //            {
        //                byte[] CurrentNumData = BitConverter.GetBytes((UInt32)HistoryNumber);
        //                //if (AutoNumberEnable == false)
        //                if (false)
        //                {
        //                    MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
        //                    //TextBox_HexFile.Enabled = true;
        //                    //PictureBox_hexFile.Enabled= true;
        //                    Button_Execute.Enabled = true;
        //                    Control.CheckForIllegalCrossThreadCalls = true;
        //                    BusyFlag = false;
        //                    return;
        //                }
        //                else
        //                {
        //                    if ((NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) < HexData.Length)
        //                    {
        //                        /*DialogResult dr = MessageBox.Show("", "", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
        //                        if (dr == DialogResult.No)
        //                        {
        //                            //TextBox_HexFile.Enabled = true;
        //                            //PictureBox_hexFile.Enabled= true;
        //                            Button_Execute.Enabled = true;
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                        else */
        //                        if (true)
        //                        {

        //                            for (int i = 0; i < 4; i++)
        //                            {
        //                                if ((NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex] + i) < HexData.Length)
        //                                {
        //                                    HexData[NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]+i] = CurrentNumData[i];
        //                                }
        //                            }
        //                            if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) == 3)
        //                            {
        //                                byte[] senddata = new byte[1];
        //                                byte[] recdata = new byte[2];
        //                                senddata[0] = CurrentNumData[3];
        //                                stats = ProgaramerOrderProcess_Obj.Verify(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), recdata.Length, ref recdata);
        //                                if (stats == (byte)eErrNumber.Succesful)
        //                                {
        //                                    string s = "";
        //                                    /*
        //                                    if (((recdata[0] << 8) + recdata[1]) == (HistoryNumber & 0xff))
        //                                    {
        //                                        s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyMatch;
        //                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
        //                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                        TextBox_Info.ScrollToCaret();
        //                                    }
        //                                    else
        //                                    {
        //                                        s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyNotMatch;
        //                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s;
        //                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                        TextBox_Info.ScrollToCaret();
        //                                    }
        //                                    */
        //                                }
        //                                else
        //                                {
        //                                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                                    //TextBox_Length.Text = FailCount.ToString();
        //                                    //TextBox_HexFile.Enabled = true;
        //                                    //PictureBox_hexFile.Enabled= true;
        //                                    Button_Execute.Enabled = true;
        //                                    Control.CheckForIllegalCrossThreadCalls = true;
        //                                    BusyFlag = false;
        //                                    return;
        //                                }
        //                            }
        //                            else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) == 2)
        //                            {
        //                                byte[] senddata = new byte[2];
        //                                byte[] recdata = new byte[2];
        //                                senddata[0] = CurrentNumData[2];
        //                                senddata[1] = CurrentNumData[3];
        //                                stats = ProgaramerOrderProcess_Obj.Verify(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), recdata.Length, ref recdata);
        //                                if (stats == (byte)eErrNumber.Succesful)
        //                                {
        //                                    string s = "";
        //                                    /*
        //                                    if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
        //                                    {
        //                                        s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyMatch;
        //                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
        //                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                        TextBox_Info.ScrollToCaret();
        //                                    }
        //                                    else
        //                                    {
        //                                        s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyNotMatch;
        //                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s;
        //                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                        TextBox_Info.ScrollToCaret();
        //                                    }
        //                                    */
        //                                }
        //                                else
        //                                {
        //                                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                                    //TextBox_Length.Text = FailCount.ToString();
        //                                    //TextBox_HexFile.Enabled = true;
        //                                    //PictureBox_hexFile.Enabled= true;
        //                                    Button_Execute.Enabled = true;
        //                                    Control.CheckForIllegalCrossThreadCalls = true;
        //                                    BusyFlag = false;
        //                                    return;
        //                                }
        //                            }
        //                            else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex]) == 1)
        //                            {
        //                                byte[] senddata = new byte[3];
        //                                byte[] recdata = new byte[2];
        //                                senddata[0] = CurrentNumData[1];
        //                                senddata[1] = CurrentNumData[2];
        //                                senddata[2] = CurrentNumData[3];
        //                                stats = ProgaramerOrderProcess_Obj.Verify(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), recdata.Length, ref recdata);
        //                                if (stats == (byte)eErrNumber.Succesful)
        //                                {
        //                                    string s = "";
        //                                    /*
        //                                    if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
        //                                    {
        //                                        s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyMatch;
        //                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
        //                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                        TextBox_Info.ScrollToCaret();
        //                                    }
        //                                    else
        //                                    {
        //                                        s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyNotMatch;
        //                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s;
        //                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                        TextBox_Info.ScrollToCaret();
        //                                    }
        //                                    */
        //                                }
        //                                else
        //                                {
        //                                    ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                                    //TextBox_Length.Text = FailCount.ToString();
        //                                    //TextBox_HexFile.Enabled = true;
        //                                    //PictureBox_hexFile.Enabled= true;
        //                                    Button_Execute.Enabled = true;
        //                                    Control.CheckForIllegalCrossThreadCalls = true;
        //                                    BusyFlag = false;
        //                                    return;
        //                                }
        //                            }
        //                        }
        //                    }
        //                    else
        //                    {
        //                        byte[] recdata = new byte[2];
        //                        stats = ProgaramerOrderProcess_Obj.Verify(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(NumberAdderss)), recdata.Length, ref recdata);
        //                        if (stats == (byte)eErrNumber.Succesful)
        //                        {
        //                            string s = "";
        //                            /*
        //                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff000000) >> 24) + ((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
        //                            {
        //                                s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyMatch;
        //                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
        //                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                TextBox_Info.ScrollToCaret();
        //                            }
        //                            else
        //                            {
        //                                s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyNotMatch;
        //                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s;
        //                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                                TextBox_Info.ScrollToCaret();
        //                            }
        //                            */
        //                        }
        //                        else
        //                        {
        //                            ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                            //TextBox_Length.Text = FailCount.ToString();
        //                            //TextBox_HexFile.Enabled = true;
        //                            //PictureBox_hexFile.Enabled= true;
        //                            Button_Execute.Enabled = true;
        //                            Control.CheckForIllegalCrossThreadCalls = true;
        //                            BusyFlag = false;
        //                            return;
        //                        }
        //                    }
        //                }
        //            }

        //            ProcessbarControl( 80;
        //            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //            byte[] checksumdata = new byte[2];
        //            stats = ProgaramerOrderProcess_Obj.Verify(SerialPort_Communiction, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess_Obj.SystemConfig_obj.FlashAddress[ComboBox_TargetMCU.SelectedIndex])), HexData.Length, ref checksumdata);
        //            if (stats == (byte)eErrNumber.Succesful)
        //            {
        //                string s = "";
        //                if (((checksumdata[0] << 8) + checksumdata[1]) == ProgaramerOrderProcess_Obj.CheckSumUInt16(HexData, 0, HexData.Length))
        //                {
        //                    s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyMatch;
        //                    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                }
        //                else
        //                {
        //                    s = ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyNotMatch;
        //                    TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s;
        //                    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                    TextBox_Info.ScrollToCaret();
        //                    //break;
        //                }
        //                //BusyFlag = false;
        //                ChipEraseFlag = true;
        //                //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.VerifySuccessful + s, ProgaramerOrderProcess_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
        //                //MessageBoxIcon.Warning);

        //                //Button_Execute.Enabled = true;
        //            }
        //            else
        //            {
        //                string s = "";
        //                if (stats == (byte)eErrNumber.Encrypted)
        //                {
        //                    s = ": " + ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted;
        //                }
        //                //BusyFlag = false;
        //                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.VerifyFail + s;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //                ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                Button_Execute.Enabled = true;
        //                //PictureBox_hexFile.Enabled= true;
        //                //TextBox_HexFile.Enabled = true;
        //                Button_Execute.Focus();
        //                Control.CheckForIllegalCrossThreadCalls = true;
        //                BusyFlag = false;
        //                return;
        //            }
        //            //PictureBox_hexFile.Enabled= true;
        //            //TextBox_HexFile.Enabled = true;
        //        }
        //        ProcessbarControl( 85;
        //        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //        if (CheckBox_Encrypt.Checked == true)
        //        {
        //            if (TextBox_Info.Text == "")
        //            {
        //                TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartEncrypt;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //            }
        //            else
        //            {
        //                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.StartEncrypt;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //            }
        //            ProcessbarControl( 90;
        //            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //            byte Result = 0x00;
        //            byte stats = ProgaramerOrderProcess_Obj.SetEncrypt(SerialPort_Communiction, ref Result);
        //            if (stats == (byte)eErrNumber.Succesful)
        //            {
        //                //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //                //if (Result == 0x00)
        //                //{
        //                //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                //MessageBox.Show(ProgaramerOrderProcess_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                //MessageBoxIcon.Error);
        //                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.EncryptedSuccessful;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //                Button_Execute.Enabled = true;
        //                ProcessbarControl( 100;
        //                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //                Button_Execute.Focus();
        //                Control.CheckForIllegalCrossThreadCalls = true;
        //                BusyFlag = false;
        //                return;
        //                //}

        //            }
        //            else
        //            {
        //                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess_Obj.DisplayText_obj.EncryptFail;
        //                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //                TextBox_Info.ScrollToCaret();
        //                //ProgaramerOrderProcess_Obj.serialportclose(SerialPort_Communiction);
        //                ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //                Button_Execute.Enabled = true;
        //                Button_Execute.Focus();
        //                Control.CheckForIllegalCrossThreadCalls = true;
        //                BusyFlag = false;
        //                return;
        //            }
        //        }
        //        //}
        //        ProcessbarControl( 100;
        //        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
        //        Button_Execute.Enabled = true;
        //        Button_Execute.Focus();
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //    }
        //    catch (Exception e)
        //    {
        //        MessageBox.Show(e.Message, ProgaramerOrderProcess_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
        //                                        MessageBoxIcon.Error);
        //        Button_Execute.Enabled = true;
        //        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "执行错误";
        //        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
        //        TextBox_Info.ScrollToCaret();
        //        //ProgaramerOrderProcess_Obj.ErrProcess(stats);
        //        Control.CheckForIllegalCrossThreadCalls = true;
        //        BusyFlag = false;
        //        return;
        //    }

        //}
        void Button_Execute_fun1()
        {
            try
            {
                if (SerialPort_Communiction1.BytesToRead > 0)
                {
                    byte[] ReceiveData = new byte[SerialPort_Communiction1.BytesToRead];
                    byte[] t = new byte[SerialPort_Communiction1.BytesToRead];
                    SerialPort_Communiction1.Read(ReceiveData, 0, SerialPort_Communiction1.BytesToRead);
                }
                //for (int ii = 0; ii < Convert.ToInt32(textBox1.Text,10); ii++)
                //{
                //label4.Text = ii.ToString();
               // Control.CheckForIllegalCrossThreadCalls = false;
                ProcessbarControl( 5,1);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Erase.Checked == true)
                {
                    if (RadioButton_ChipErase.Checked == true)
                    {
                        //byte[] CRdata = new byte[ProgaramerOrderProcess1_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                        // byte[] UIDdata = new byte[ProgaramerOrderProcess1_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                        //if (TextBox_Info.Text == "")
                        //{
                        //    TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.StartChipErase;
                        //    TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess1_Obj.DisplayText_obj.StartChipErase, 1);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.StartChipErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.StartChipErase,1);
                        }

                        ProcessbarControl( 6, 1);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        //byte[] CRadd = 
                        /*byte stats = ProgaramerOrderProcess1_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess1_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata.Length, ref CRdata);

                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 16; i++)
                            {
                                cr += Convert.ToString(CRdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUserArea(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlag = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlag = false;
                            return;
                        }*/
                        if (bStop1 == true)
                        {
                            return;
                        }
                        ProcessbarControl( 7, 1);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*stats = ProgaramerOrderProcess1_Obj.Read(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess1_Obj.SystemConfig_obj.UIDAdd[TargetMCUSlecet]), UIDdata.Length, ref UIDdata);
                        ProcessbarControl( 8,1);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 12; i++)
                            {
                                cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUID(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlag = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlag = false;
                            return;
                        }
                        */
                        byte Result = 0;
                        byte stats = ProgaramerOrderProcess1_Obj.CheckEncrypt(SerialPort_Communiction1, ref Result);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            //ProgaramerOrderProcess1_Obj.serialportclose(SerialPort_Communiction);
                            /*if (Result == 0x01)
                            {
                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.UploadFail + ": " + ProgaramerOrderProcess1_Obj.DisplayText_obj.Encrypted;
                                //ProgaramerOrderProcess1_Obj.serialportclose(SerialPort_Communiction);
                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                TextBox_Info.ScrollToCaret();
                                //ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                                //MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                //MessageBoxIcon.Error);
                                Button_Upload.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlag = false;
                                return;
                            }*/
                        }
                        else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.MassEraseFail;
                            ////ProgaramerOrderProcess1_Obj.serialportclose(SerialPort_Communiction);
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.MassEraseFail, 1);
                            ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                            ExcuteControlDisplay(true);
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.UploadSuccessful ;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.UploadSuccessful, 1);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[1] = false;
                            LabelControl("FAIL", 1);
                            return;
                        }

                        ProcessbarControl( 8, 1);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        stats = ProgaramerOrderProcess1_Obj.EraseFlash(SerialPort_Communiction1);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            /*
                            Button_Erase.Enabled = true;
                            //BusyFlag = false;
                            ChipEraseFlag = true;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.ChipEraseSuccessful;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ocessbarControl( 100,1);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                            */

                        }
                        else
                        {
                            ExcuteControlDisplay(true);
                            //BusyFlag = false;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.MassEraseFail;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.MassEraseFail,1);
                            ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[1] = false;
                            LabelControl("FAIL", 1);
                            return;
                        }
                        ProcessbarControl( 8, 1);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*
                        stats = ProgaramerOrderProcess1_Obj.Write(SerialPort_Communiction, BitConverter.GetBytes(ProgaramerOrderProcess1_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlag = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlag = false;
                            return;
                        }
                        */
                        if (Result == 0x01)
                        {
                            stats = ProgaramerOrderProcess1_Obj.MCUReset(SerialPort_Communiction1);
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                //BusyFlag = false;
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.MassEraseFail;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();

                                ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[1] = false;
                                LabelControl("FAIL", 1);
                                return;
                            }

                            //ProgaramerOrderProcess1_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess1_Obj.SystemConfig_obj);
                            //CRdata = new byte[ProgaramerOrderProcess1_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                            //UIDdata = new byte[ProgaramerOrderProcess1_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                            if (true)
                            {
                                stats = ProgaramerOrderProcess1_Obj.ConnectProcess(SerialPort_Communiction1, ProgaramerOrderProcess1_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                           ComText1, frequnecy, Crystal);
                            }
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                ProgaramerOrderProcess1_Obj.DisConnectProcess(SerialPort_Communiction1);
                                ConnectControlDisplay(ConnectFlagSub[1]);
                                //Button_Connect.Enabled = true;
                                ExcuteControlDisplay(true);

                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[1] = false;
                                LabelControl("FAIL", 1);
                                ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                                return;
                            }
                        }
                        Button_Erase.Enabled = true;
                        //BusyFlag = false;
                        ChipEraseFlag = true;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.ChipEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.ChipEraseSuccessful,1);
                        //ProcessbarControl( 100,1);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        checkAutoNumber = false;
                        if (bStop1 == true)
                        {
                            return;
                        }
                        ProcessbarControl( 10, 1);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    else if (RadioButton_PageErase.Checked == true)
                    {
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.StartPageErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess1_Obj.DisplayText_obj.StartPageErase,1);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.StartPageErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.StartPageErase,1);
                        }
                        double tep = 10 / ((HexData.Length + 511) / ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                        for (int i = 0; i < (HexData.Length + 511) / ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]; i++)
                        {
                            byte[] pageaddress = BitConverter.GetBytes((UInt32)(i * ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]
                                                                       + ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]));
                            byte stats = ProgaramerOrderProcess1_Obj.ErasePage(SerialPort_Communiction1, pageaddress);
                            if (stats == (byte)eErrNumber.Succesful)
                            {
                                ChipEraseFlag = false;

                            }
                            else
                            {
                                string s = "";
                                if (stats == (byte)eErrNumber.Encrypted)
                                {
                                    s = ": " + ProgaramerOrderProcess1_Obj.DisplayText_obj.Encrypted;
                                }
                                ExcuteControlDisplay(true);
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.PageEraseFail + s;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.PageEraseFail,1);
                                ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                                ExcuteControlFocus(true);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[1] = false;
                                LabelControl("FAIL", 1);
                                return;
                            }
                            ProcessbarControl( (int)(i * tep), 1);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        }
                        checkAutoNumber = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.PageEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.PageEraseSuccessful,1);
                        //MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.PageEraseSuccessful, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);
                    }
                }
                ProcessbarControl( 10, 1);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";

                if (CheckBox_BlankCheck.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.StartBlankCheck;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess1_Obj.DisplayText_obj.StartBlankCheck,1);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.StartBlankCheck;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.StartBlankCheck,1);
                    }
                    ProcessbarControl( 12, 1);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte result = 0x00;
                    UInt32 Lenght = 0x00;
                    if (ChipEraseFlag == true)
                    {
                        Lenght = (UInt32)(ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageCount[this.TargetMCUSlecet] *
                                     ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    else
                    {
                        Lenght = (UInt32)(((HexData.Length + 511) / ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]) *
                                     ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    ProcessbarControl( 15, 1);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    UInt32 ErrAdd = 0x00;
                    byte stats = ProgaramerOrderProcess1_Obj.CheckBlank(SerialPort_Communiction1, BitConverter.GetBytes(ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]), Lenght, ref result, ref ErrAdd);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        string ss = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            ss = ": " + ProgaramerOrderProcess1_Obj.DisplayText_obj.Encrypted;
                        }
                        ExcuteControlDisplay(true);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.BlankCheckFail + ss;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.BlankCheckFail, 1);
                        ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[1] = false;
                        LabelControl("FAIL", 1);
                        return;
                    }
                    Thread.Sleep(100);
                    if (bStop1 == true)
                    {
                        return;
                    }
                    ProcessbarControl( 17, 1);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    string s = "";
                    if (result == 0x01)
                    {
                        s = ProgaramerOrderProcess1_Obj.DisplayText_obj.ResultBlank;
                    }
                    else if (result == 0x00)
                    {
                        s = ProgaramerOrderProcess1_Obj.DisplayText_obj.ResultNotBlank + "0x" + Convert.ToString(ErrAdd, 16).ToUpper().PadLeft(8, '0');
                    }
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.BlankCheckSuccessful + s;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    string strText = "";
                    strText = ProgaramerOrderProcess1_Obj.DisplayText_obj.BlankCheckSuccessful + s;
                    ShowMsgWithLine(strText, 1);
                    //MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.BlankCheckSuccessful + s, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                    //MessageBoxIcon.Warning);
                }
                ProcessbarControl( 20, 1);
                ////////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Program.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[1] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;

                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.StartProgram;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess1_Obj.DisplayText_obj.StartProgram,1);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.StartProgram;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.StartProgram,1);
                    }
                    if (bStop1 == true)
                    {
                        return;
                    }
                    ProcessbarControl( 20, 1);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (CheckBox_AutoNumber.Checked == true)
                    {
                        if (AutoNumberEnable == false)
                        {
                            MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            ////TextBox_HexFile.Enabled = true;
                            ////PictureBox_hexFile.Enabled= true;
                            ExcuteControlDisplay(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[1] = false;
                            return;
                        }
                        else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                DialogResult dr = MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.OverHexData, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    ExcuteControlDisplay(true);
                                    ExcuteControlFocus(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[1] = false;
                                    return;
                                }
                                else if (dr == DialogResult.Yes)
                                {
                                    byte[] CurrentNumData = BitConverter.GetBytes(CurrentNumber);
                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess1_Obj.Write(SerialPort_Communiction1, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                           // //TextBox_HexFile.Enabled = true;
                                           // //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[1] = false;
                                            LabelControl("FAIL", 1);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess1_Obj.Write(SerialPort_Communiction1, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[1] = false;
                                            LabelControl("FAIL", 1);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess1_Obj.Write(SerialPort_Communiction1, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                           // //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[1] = false;
                                            LabelControl("FAIL", 1);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                stats = ProgaramerOrderProcess1_Obj.Write(SerialPort_Communiction1, BitConverter.GetBytes((UInt32)(NumberAdderss)), BitConverter.GetBytes((UInt32)(CurrentNumber)));
                                if (stats == (byte)eErrNumber.Succesful)
                                {

                                }
                                else
                                {
                                    ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                    ////TextBox_HexFile.Enabled = true;
                                    ////PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[1] = false;
                                    LabelControl("FAIL", 1);
                                    return;
                                }
                            }
                            checkAutoNumber = true;
                            NumberAdd = NumberAdderss;
                        }
                    }
                    System.Diagnostics.Debug.WriteLine("1:25");
                    ProcessbarControl( 25, 1);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    TotalCount++;
                    stats = 0x00;
                    byte[] sentdata = new byte[512];
                    int count = (int)((HexData.Length + 511) / ProgaramerOrderProcess1_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    int tep = 45000 / count;
                    for (int i = 0; i < count; i++)
                    {
                        if (i == (count - 1))
                        {
                            sentdata = new byte[HexData.Length - (i * 512)];
                            Array.Copy(HexData, i * 512, sentdata, 0, HexData.Length - (i * 512));
                        }
                        else
                        {
                            Array.Copy(HexData, i * 512, sentdata, 0, 512);
                        }
                        stats = ProgaramerOrderProcess1_Obj.Write(SerialPort_Communiction1, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i * 512)), sentdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            string s = "";
                            string strtxt = "";
                            if (stats == (byte)eErrNumber.Encrypted)
                            {
                                s = ": " + ProgaramerOrderProcess1_Obj.DisplayText_obj.Encrypted;
                            }
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.ProgramFail + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();

                            strtxt = ProgaramerOrderProcess1_Obj.DisplayText_obj.ProgramFail + s;
                            ShowMsgWithLine(strtxt, 1);

                            FailCount++;
                            ExcuteControlDisplay(true);
                            ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                            //TextBox_Length.Text = FailCount.ToString();
                           // //PictureBox_hexFile.Enabled= true;
                            ////TextBox_HexFile.Enabled = true;
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[1] = false;
                            LabelControl("FAIL", 1);
                            return;
                        }
                        System.Diagnostics.Debug.WriteLine(string.Format("1:{0}", (int)(25 + ((i * tep) / 1000))));
                        ProcessbarControl( (int)(25 + ((i * tep) / 1000)), 1);
                        if (bStop1 == true)
                        {
                            return;
                        }
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    if (AutoNumberEnable == true && CheckBox_AutoNumber.Checked == true)
                    {
                        HistoryNumber = CurrentNumber;
                        if (CheckBox_AutoNumber.Checked == true)
                        {
                            CurrentNumber += NumberInterval;
                        }

                        if (!(CurrentNumber < (StartNumber + (NumberLength) * NumberInterval)))
                        {
                            MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.AutoNumberFinsh, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            CheckBox_AutoNumber.Checked = false;
                            AutoNumberEnable = false;
                            Button_OpenClose.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.AutoNumberOpen;
                            Button_OpenClose.Enabled = false;
                        }
                        else
                        {
                            Label_CurrentNumbers.Text = CurrentNumber.ToString();
                        }
                        Label_HistoryNumbers.Text = HistoryNumber.ToString();
                    }
                   // //PictureBox_hexFile.Enabled= true;
                   // //TextBox_HexFile.Enabled = true;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.ProgramSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    string strtext = "";
                    strtext = ProgaramerOrderProcess1_Obj.DisplayText_obj.ProgramSuccessful;
                    ShowMsgWithLine(strtext, 1);
                    //TextBox_NumberAddress.Text = PassCount.ToString();
                    //TextBox_StartNumber.Text = TotalCount.ToString();
                }
                if (bStop1 == true)
                {
                    return;
                }
                System.Diagnostics.Debug.WriteLine("1:70");
                ProcessbarControl( 70, 1);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Verify.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[1] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.StartVerify;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess1_Obj.DisplayText_obj.StartVerify,1);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.StartVerify;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.StartVerify,1);
                    }
                    ProcessbarControl( 75, 1);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (checkAutoNumber == true)
                    {
                        byte[] CurrentNumData = BitConverter.GetBytes((UInt32)HistoryNumber);
                        //if (AutoNumberEnable == false)
                        //if (false)
                        //{
                        //    MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        //    //TextBox_HexFile.Enabled = true;
                        //    //PictureBox_hexFile.Enabled= true;
                        //    ExcuteControlDisplay(true);
                        //    Control.CheckForIllegalCrossThreadCalls = true;
                        //    BusyFlagSub[1] = false;
                        //    return;
                        //}
                        //else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                /*DialogResult dr = MessageBox.Show("", "", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    //TextBox_HexFile.Enabled = true;
                                    //PictureBox_hexFile.Enabled= true;
                                    Button_Execute.Enabled = true;
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlag = false;
                                    return;
                                }
                                else */
                                if (true)
                                {

                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess1_Obj.Verify(SerialPort_Communiction1, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                           // string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[1] = false;
                                            LabelControl("FAIL", 1);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess1_Obj.Verify(SerialPort_Communiction1, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                          //  string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                           // //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[1] = false;
                                            LabelControl("FAIL", 1);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess1_Obj.Verify(SerialPort_Communiction1, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[1] = false;
                                            LabelControl("FAIL", 1);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                byte[] recdata = new byte[2];
                                stats = ProgaramerOrderProcess1_Obj.Verify(SerialPort_Communiction1, BitConverter.GetBytes((UInt32)(NumberAdderss)), recdata.Length, ref recdata);
                                if (stats == (byte)eErrNumber.Succesful)
                                {
                                   // string s = "";
                                    /*
                                    if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff000000) >> 24) + ((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                    {
                                        s = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    else
                                    {
                                        s = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyNotMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifySuccessful + s;
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    */
                                }
                                else
                                {
                                    ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                    ////TextBox_HexFile.Enabled = true;
                                   // //PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[1] = false;
                                    LabelControl("FAIL", 1);
                                    return;
                                }
                            }
                        }
                    }
                    if (bStop1 == true)
                    {
                        return;
                    }
                    ProcessbarControl( 80, 1);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte[] checksumdata = new byte[2];
                    stats = ProgaramerOrderProcess1_Obj.Verify(SerialPort_Communiction1, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess1_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet])), HexData.Length, ref checksumdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        string s = "";
                        if (((checksumdata[0] << 8) + checksumdata[1]) == ProgaramerOrderProcess1_Obj.CheckSumUInt16(HexData, 0, HexData.Length))
                        {
                            s = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = "";
                            strText = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsg(strText,1);
                        }
                        else
                        {
                            s = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyNotMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifySuccessful + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = "";
                            strText = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsgWithLine(strText,1);
                            LabelControl("FAIL", 1);
                            //break;
                        }
                        //BusyFlag = false;
                        ChipEraseFlag = true;
                        //MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifySuccessful + s, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);

                        //Button_Execute.Enabled = true;
                    }
                    else
                    {
                        string s = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            s = ": " + ProgaramerOrderProcess1_Obj.DisplayText_obj.Encrypted;
                        }
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyFail + s;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        string strText = "";
                        strText = ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyFail + s;
                        ShowMsgWithLine(strText,1);

                        ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);
                        ////PictureBox_hexFile.Enabled= true;
                        ////TextBox_HexFile.Enabled = true;
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[1] = false;
                        return;
                    }
                    //PictureBox_hexFile.Enabled= true;
                    //TextBox_HexFile.Enabled = true;
                }
                ProcessbarControl( 85, 1);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Encrypt.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.StartEncrypt;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess1_Obj.DisplayText_obj.StartEncrypt,1);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.StartEncrypt;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.StartEncrypt,1);
                    }
                    ProcessbarControl( 90, 1);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte Result = 0x00;
                    byte stats = ProgaramerOrderProcess1_Obj.SetEncrypt(SerialPort_Communiction1, ref Result);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        //ProgaramerOrderProcess1_Obj.serialportclose(SerialPort_Communiction);
                        //if (Result == 0x00)
                        //{
                        //ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                        //MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Error);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.EncryptedSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.EncryptedSuccessful,1);

                        ExcuteControlDisplay(true);
                        ProcessbarControl( 100, 1);
                        LabelControl("OK",1);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[1] = false;
                        return;
                        //}

                    }
                    else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.EncryptFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.EncryptFail,1);

                        //ProgaramerOrderProcess1_Obj.serialportclose(SerialPort_Communiction);
                        ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);//need to verify
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[1] = false;
                        LabelControl("FAIL", 1);
                        return;
                    }
                }
                //}
                if (bStop1 == true)
                {
                    return;
                }
                ProcessbarControl( 100, 1);
                LabelControl("OK", 1);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                ExcuteControlDisplay(true);
                ExcuteControlFocus(true);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[1] = false;
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message, ProgaramerOrderProcess1_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                ExcuteControlDisplay(true);//1111111111
                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "执行错误";
                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                //TextBox_Info.ScrollToCaret();
                LabelControl("FAIL", 1);
                ShowMsgWithLine("执行错误",1);
                //ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[1] = false;
                return;
            }

        }
        void Button_Execute_fun2()
        {
            try
            {
                if (SerialPort_Communiction2.BytesToRead > 0)
                {
                    byte[] ReceiveData = new byte[SerialPort_Communiction2.BytesToRead];
                    byte[] t = new byte[SerialPort_Communiction2.BytesToRead];
                    SerialPort_Communiction2.Read(ReceiveData, 0, SerialPort_Communiction2.BytesToRead);
                }
                //for (int ii = 0; ii < Convert.ToInt32(textBox1.Text,10); ii++)
                //{
                //label4.Text = ii.ToString();
//                Control.CheckForIllegalCrossThreadCalls = false;
                ProcessbarControl( 5,2);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Erase.Checked == true)
                {
                    if (RadioButton_ChipErase.Checked == true)
                    {
                       // byte[] CRdata = new byte[ProgaramerOrderProcess2_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                       // byte[] UIDdata = new byte[ProgaramerOrderProcess2_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.StartChipErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess2_Obj.DisplayText_obj.StartChipErase,2);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.StartChipErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.StartChipErase,2);
                        }

                        ProcessbarControl( 6,2);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        //byte[] CRadd = 
                        /*byte stats = ProgaramerOrderProcess2_Obj.Read(SerialPort_Communiction2, BitConverter.GetBytes(ProgaramerOrderProcess2_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata.Length, ref CRdata);

                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 16; i++)
                            {
                                cr += Convert.ToString(CRdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUserArea(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlag = false;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.MassEraseFail;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                           // TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.MassEraseFail);
                            ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlag = false;
                            return;
                        }*/
                        ProcessbarControl( 7, 2);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*stats = ProgaramerOrderProcess2_Obj.Read(SerialPort_Communiction2, BitConverter.GetBytes(ProgaramerOrderProcess2_Obj.SystemConfig_obj.UIDAdd[TargetMCUSlecet]), UIDdata.Length, ref UIDdata);
                        ProcessbarControl( 8,1);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 12; i++)
                            {
                                cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUID(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlag = false;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlag = false;
                            return;
                        }
                        */
                        byte Result = 0;
                        byte stats = ProgaramerOrderProcess2_Obj.CheckEncrypt(SerialPort_Communiction2, ref Result);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            //ProgaramerOrderProcess2_Obj.serialportclose(SerialPort_Communiction2);
                            /*if (Result == 0x01)
                            {
                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.UploadFail + ": " + ProgaramerOrderProcess2_Obj.DisplayText_obj.Encrypted;
                                //ProgaramerOrderProcess2_Obj.serialportclose(SerialPort_Communiction2);
                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                TextBox_Info.ScrollToCaret();
                                //ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                                //MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess2_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                //MessageBoxIcon.Error);
                                Button_Upload.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlag = false;
                                return;
                            }*/
                        }
                        else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.MassEraseFail;
                            ////ProgaramerOrderProcess2_Obj.serialportclose(SerialPort_Communiction2);
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.MassEraseFail,2);
                            ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                            ExcuteControlDisplay(true);
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.UploadSuccessful ;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[2] = false;
                            LabelControl("FAIL", 2);
                            return;
                        }

                        ProcessbarControl( 8, 2);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        stats = ProgaramerOrderProcess2_Obj.EraseFlash(SerialPort_Communiction2);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            /*
                            Button_Erase.Enabled = true;
                            //BusyFlag = false;
                            ChipEraseFlag = true;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.ChipEraseSuccessful;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProcessbarControl( 100,1);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                            */

                        }
                        else
                        {
                            ExcuteControlDisplay(true);
                            //BusyFlag = false;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.MassEraseFail;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();

                            ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.MassEraseFail,2);
                            ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[2] = false;
                            LabelControl("FAIL", 2);
                            return;
                        }
                        ProcessbarControl( 8, 2);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*
                        stats = ProgaramerOrderProcess2_Obj.Write(SerialPort_Communiction2, BitConverter.GetBytes(ProgaramerOrderProcess2_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlag = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlag = false;
                            return;
                        }
                        */
                        if (Result == 0x01)
                        {
                            stats = ProgaramerOrderProcess2_Obj.MCUReset(SerialPort_Communiction2);
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                //BusyFlag = false;
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.MassEraseFail;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess1_Obj.DisplayText_obj.MassEraseFail, 2);
                                ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[2] = false;
                                LabelControl("FAIL", 2);
                                return;
                            }

                            //ProgaramerOrderProcess2_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess2_Obj.SystemConfig_obj);
                            //CRdata = new byte[ProgaramerOrderProcess2_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                            //UIDdata = new byte[ProgaramerOrderProcess2_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                            if (true)
                            {
                                stats = ProgaramerOrderProcess2_Obj.ConnectProcess(SerialPort_Communiction2, ProgaramerOrderProcess2_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                           ComText2, frequnecy, Crystal);
                            }
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                ProgaramerOrderProcess2_Obj.DisConnectProcess(SerialPort_Communiction2);
                                ConnectControlDisplay(ConnectFlagSub[2]);
                                //Button_Connect.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[2] = false;
                                LabelControl("FAIL", 2);
                                ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                                return;
                            }
                        }
                        Button_Erase.Enabled = true;
                        //BusyFlag = false;
                        ChipEraseFlag = true;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.ChipEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.ChipEraseSuccessful,2);
                        //ProcessbarControl( 100,1);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        checkAutoNumber = false;
                        ProcessbarControl( 10, 2);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    else if (RadioButton_PageErase.Checked == true)
                    {
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.StartPageErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess2_Obj.DisplayText_obj.StartPageErase,2);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.StartPageErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.StartPageErase,2);
                        }
                        double tep = 10 / ((HexData.Length + 511) / ProgaramerOrderProcess2_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                        for (int i = 0; i < (HexData.Length + 511) / ProgaramerOrderProcess2_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]; i++)
                        {
                            byte[] pageaddress = BitConverter.GetBytes((UInt32)(i * ProgaramerOrderProcess2_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]
                                                                       + ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]));
                            byte stats = ProgaramerOrderProcess2_Obj.ErasePage(SerialPort_Communiction2, pageaddress);
                            if (stats == (byte)eErrNumber.Succesful)
                            {
                                ChipEraseFlag = false;

                            }
                            else
                            {
                                string s = "";
                                if (stats == (byte)eErrNumber.Encrypted)
                                {
                                    s = ": " + ProgaramerOrderProcess2_Obj.DisplayText_obj.Encrypted;
                                }
                                ExcuteControlDisplay(true);
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.PageEraseFail + s;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.PageEraseFail,2);
                                ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                                ExcuteControlFocus(true);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[2] = false;
                                LabelControl("FAIL", 2);
                                return;
                            }
                            ProcessbarControl( (int)(i * tep), 2);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        }
                        checkAutoNumber = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.PageEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.PageEraseSuccessful, 2);
                        //MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.PageEraseSuccessful, ProgaramerOrderProcess2_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);
                    }
                }
                ProcessbarControl( 10, 2);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";

                if (CheckBox_BlankCheck.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.StartBlankCheck;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess2_Obj.DisplayText_obj.StartBlankCheck,2);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.StartBlankCheck;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.StartBlankCheck,2);
                    }
                    ProcessbarControl( 12, 2);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte result = 0x00;
                    UInt32 Lenght = 0x00;
                    if (ChipEraseFlag == true)
                    {
                        Lenght = (UInt32)(ProgaramerOrderProcess2_Obj.SystemConfig_obj.PageCount[this.TargetMCUSlecet] *
                                     ProgaramerOrderProcess2_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    else
                    {
                        Lenght = (UInt32)(((HexData.Length + 511) / ProgaramerOrderProcess2_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]) *
                                     ProgaramerOrderProcess2_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    ProcessbarControl( 15, 2);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    UInt32 ErrAdd = 0x00;
                    byte stats = ProgaramerOrderProcess2_Obj.CheckBlank(SerialPort_Communiction2, BitConverter.GetBytes(ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]), Lenght, ref result, ref ErrAdd);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        string ss = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            ss = ": " + ProgaramerOrderProcess2_Obj.DisplayText_obj.Encrypted;
                        }
                        ExcuteControlDisplay(true);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.BlankCheckFail + ss;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.BlankCheckFail, 2);
                        ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[2] = false;
                        LabelControl("FAIL", 2);
                        return;
                    }
                    Thread.Sleep(100);
                    ProcessbarControl( 17, 2);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    string s = "";
                    if (result == 0x01)
                    {
                        s = ProgaramerOrderProcess2_Obj.DisplayText_obj.ResultBlank;
                    }
                    else if (result == 0x00)
                    {
                        s = ProgaramerOrderProcess2_Obj.DisplayText_obj.ResultNotBlank + "0x" + Convert.ToString(ErrAdd, 16).ToUpper().PadLeft(8, '0');
                    }
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.BlankCheckSuccessful + s;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.BlankCheckSuccessful + s, 2);
                    //MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.BlankCheckSuccessful + s, ProgaramerOrderProcess2_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                    //MessageBoxIcon.Warning);
                }
                ProcessbarControl( 20, 2);
                ////////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Program.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[2] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;

                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.StartProgram;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess2_Obj.DisplayText_obj.StartProgram,2);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.StartProgram;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.StartProgram,2);
                    }
                    ProcessbarControl( 20, 2);
                    ////////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (CheckBox_AutoNumber.Checked == true)
                    {
                        if (AutoNumberEnable == false)
                        {
                            MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess2_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            ////TextBox_HexFile.Enabled = true;
                            ////PictureBox_hexFile.Enabled= true;
                            ExcuteControlDisplay(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[2] = false;
                            return;
                        }
                        else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                DialogResult dr = MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.OverHexData, ProgaramerOrderProcess2_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    ExcuteControlDisplay(true);
                                    ExcuteControlFocus(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[2] = false;
                                    return;
                                }
                                else if (dr == DialogResult.Yes)
                                {
                                    byte[] CurrentNumData = BitConverter.GetBytes(CurrentNumber);
                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess2_Obj.Write(SerialPort_Communiction2, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[2] = false;
                                            LabelControl("FAIL", 2);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess2_Obj.Write(SerialPort_Communiction2, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[2] = false;
                                            LabelControl("FAIL", 2);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess2_Obj.Write(SerialPort_Communiction2, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                           // //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[2] = false;
                                            LabelControl("FAIL", 2);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                stats = ProgaramerOrderProcess2_Obj.Write(SerialPort_Communiction2, BitConverter.GetBytes((UInt32)(NumberAdderss)), BitConverter.GetBytes((UInt32)(CurrentNumber)));
                                if (stats == (byte)eErrNumber.Succesful)
                                {

                                }
                                else
                                {
                                    ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                    ////TextBox_HexFile.Enabled = true;
                                    ////PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[2] = false;
                                    LabelControl("FAIL", 2);
                                    return;
                                }
                            }
                            checkAutoNumber = true;
                            NumberAdd = NumberAdderss;
                        }
                    }
                    System.Diagnostics.Debug.WriteLine("2:25");
                    ProcessbarControl( 25, 2);
                    ////////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    TotalCount++;
                    stats = 0x00;
                    byte[] sentdata = new byte[512];
                    int count = (int)((HexData.Length + 511) / ProgaramerOrderProcess2_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    int tep = 45000 / count;
                    for (int i = 0; i < count; i++)
                    {
                        if (i == (count - 1))
                        {
                            sentdata = new byte[HexData.Length - (i * 512)];
                            Array.Copy(HexData, i * 512, sentdata, 0, HexData.Length - (i * 512));
                        }
                        else
                        {
                            Array.Copy(HexData, i * 512, sentdata, 0, 512);
                        }
                        stats = ProgaramerOrderProcess2_Obj.Write(SerialPort_Communiction2, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i * 512)), sentdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            string s = "";
                            if (stats == (byte)eErrNumber.Encrypted)
                            {
                                s = ": " + ProgaramerOrderProcess2_Obj.DisplayText_obj.Encrypted;
                            }
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.ProgramFail + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.ProgramFail + s,2);
                            FailCount++;
                            ExcuteControlDisplay(true);
                            ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                            //TextBox_Length.Text = FailCount.ToString();
                            ////PictureBox_hexFile.Enabled= true;
                            ////TextBox_HexFile.Enabled = true;
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[2] = false;
                            LabelControl("FAIL", 2);
                            return;
                        }
                        System.Diagnostics.Debug.WriteLine(string.Format("2:{0}", (int)(25 + ((i * tep) / 1000))));
                        ProcessbarControl( (int)(25 + ((i * tep) / 1000)), 2);
                        if (bStop2 == true)
                        {
                            return;
                        }
                        ////////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    if (AutoNumberEnable == true && CheckBox_AutoNumber.Checked == true)
                    {
                        HistoryNumber = CurrentNumber;
                        if (CheckBox_AutoNumber.Checked == true)
                        {
                            CurrentNumber += NumberInterval;
                        }

                        if (!(CurrentNumber < (StartNumber + (NumberLength) * NumberInterval)))
                        {
                            MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.AutoNumberFinsh, ProgaramerOrderProcess2_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            CheckBox_AutoNumber.Checked = false;
                            AutoNumberEnable = false;
                            Button_OpenClose.Text = ProgaramerOrderProcess2_Obj.DisplayText_obj.AutoNumberOpen;
                            Button_OpenClose.Enabled = false;
                        }
                        else
                        {
                            Label_CurrentNumbers.Text = CurrentNumber.ToString();
                        }
                        Label_HistoryNumbers.Text = HistoryNumber.ToString();
                    }
                    ////PictureBox_hexFile.Enabled= true;
                    ////TextBox_HexFile.Enabled = true;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.ProgramSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.ProgramSuccessful, 2);
                    //TextBox_NumberAddress.Text = PassCount.ToString();
                    //TextBox_StartNumber.Text = TotalCount.ToString();
                }
                System.Diagnostics.Debug.WriteLine("2:70");
                ProcessbarControl( 70, 2);
                ////////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Verify.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[2] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.StartVerify;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess2_Obj.DisplayText_obj.StartVerify,2);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.StartVerify;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.StartVerify,2);
                    }
                    ProcessbarControl( 75, 2);
                    ////////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (checkAutoNumber == true)
                    {
                        byte[] CurrentNumData = BitConverter.GetBytes((UInt32)HistoryNumber);
                        //if (AutoNumberEnable == false)
                        //if (false)
                        //{
                        //    MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess2_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        //    //TextBox_HexFile.Enabled = true;
                        //    //PictureBox_hexFile.Enabled= true;
                        //    ExcuteControlDisplay(true);
                        //    Control.CheckForIllegalCrossThreadCalls = true;
                        //    BusyFlagSub[2] = false;
                        //    return;
                        //}
                        //else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                /*DialogResult dr = MessageBox.Show("", "", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    //TextBox_HexFile.Enabled = true;
                                    //PictureBox_hexFile.Enabled= true;
                                    Button_Execute.Enabled = true;
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlag = false;
                                    return;
                                }
                                else */
                                if (true)
                                {

                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess2_Obj.Verify(SerialPort_Communiction2, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[2] = false;
                                            LabelControl("FAIL", 2);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess2_Obj.Verify(SerialPort_Communiction2, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                           // string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[2] = false;
                                            LabelControl("FAIL", 2);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess2_Obj.Verify(SerialPort_Communiction2, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                           // string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                           // //TextBox_HexFile.Enabled = true;
                                           // //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[2] = false;
                                            LabelControl("FAIL", 2);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                byte[] recdata = new byte[2];
                                stats = ProgaramerOrderProcess2_Obj.Verify(SerialPort_Communiction2, BitConverter.GetBytes((UInt32)(NumberAdderss)), recdata.Length, ref recdata);
                                if (stats == (byte)eErrNumber.Succesful)
                                {
                                    //string s = "";
                                    /*
                                    if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff000000) >> 24) + ((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                    {
                                        s = ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifyMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    else
                                    {
                                        s = ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifyNotMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifySuccessful + s;
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    */
                                }
                                else
                                {
                                    ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                   // //TextBox_HexFile.Enabled = true;
                                   // //PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[2] = false;
                                    LabelControl("FAIL", 2);
                                    return;
                                }
                            }
                        }
                    }

                    ProcessbarControl( 80, 2);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte[] checksumdata = new byte[2];
                    stats = ProgaramerOrderProcess2_Obj.Verify(SerialPort_Communiction2, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess2_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet])), HexData.Length, ref checksumdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        string s = "";
                        if (((checksumdata[0] << 8) + checksumdata[1]) == ProgaramerOrderProcess2_Obj.CheckSumUInt16(HexData, 0, HexData.Length))
                        {
                            s = ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifyMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = "";
                               strText = ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsg(strText,2);
                        }
                        else
                        {
                            s = ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifyNotMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifySuccessful + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = "";
                            strText = ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsgWithLine(strText,2);

                            //break;
                        }
                        //BusyFlag = false;
                        ChipEraseFlag = true;
                        //MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifySuccessful + s, ProgaramerOrderProcess2_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);

                        //Button_Execute.Enabled = true;
                    }
                    else
                    {
                        string s = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            s = ": " + ProgaramerOrderProcess2_Obj.DisplayText_obj.Encrypted;
                        }
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifyFail + s;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        string strText = "";
                        strText =  ProgaramerOrderProcess2_Obj.DisplayText_obj.VerifyFail + s;
                        ShowMsgWithLine(strText,2);
                        ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);
                        ////PictureBox_hexFile.Enabled= true;
                        ////TextBox_HexFile.Enabled = true;
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[2] = false;
                        LabelControl("FAIL", 2);
                        return;
                    }
                    ////PictureBox_hexFile.Enabled= true;
                   // //TextBox_HexFile.Enabled = true;
                }
                ProcessbarControl( 85, 2);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Encrypt.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.StartEncrypt;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess2_Obj.DisplayText_obj.StartEncrypt,2);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.StartEncrypt;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.StartEncrypt,2);
                    }
                    ProcessbarControl( 90, 2);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte Result = 0x00;
                    byte stats = ProgaramerOrderProcess2_Obj.SetEncrypt(SerialPort_Communiction2, ref Result);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        //ProgaramerOrderProcess2_Obj.serialportclose(SerialPort_Communiction2);
                        //if (Result == 0x00)
                        //{
                        //ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                        //MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess2_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Error);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.EncryptedSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.EncryptedSuccessful,2);
                        ExcuteControlDisplay(true);
                        ProcessbarControl( 100, 2);
                        LabelControl("OK", 2);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[2] = false;
                        return;
                        //}

                    }
                    else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess2_Obj.DisplayText_obj.EncryptFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess2_Obj.DisplayText_obj.EncryptFail,2);

                        //ProgaramerOrderProcess2_Obj.serialportclose(SerialPort_Communiction2);
                        ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[2] = false;
                        LabelControl("FAIL", 2);
                        return;
                    }
                }
                //}
                ProcessbarControl( 100, 2);
                LabelControl("OK", 2);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                ExcuteControlDisplay(true);
                ExcuteControlFocus(true);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[2] = false;
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message, ProgaramerOrderProcess2_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                ExcuteControlDisplay(true);
                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "执行错误";
                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                //TextBox_Info.ScrollToCaret();
                //ProgaramerOrderProcess2_Obj.ErrProcess(stats);
                LabelControl("FAIL", 2);
                ShowMsgWithLine("执行错误",2);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[2] = false;
                return;
            }

        }
        void Button_Execute_fun3()
        {
            try
            {
                if (SerialPort_Communiction3.BytesToRead > 0)
                {
                    byte[] ReceiveData = new byte[SerialPort_Communiction3.BytesToRead];
                    byte[] t = new byte[SerialPort_Communiction3.BytesToRead];
                    SerialPort_Communiction3.Read(ReceiveData, 0, SerialPort_Communiction3.BytesToRead);
                }
                //for (int ii = 0; ii < Convert.ToInt32(textBox1.Text,10); ii++)
                //{
                //label4.Text = ii.ToString();
 //               Control.CheckForIllegalCrossThreadCalls = false;
                ProcessbarControl(5, 3);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Erase.Checked == true)
                {
                    if (RadioButton_ChipErase.Checked == true)
                    {
                        //byte[] CRdata = new byte[ProgaramerOrderProcess3_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
                        //byte[] UIDdata = new byte[ProgaramerOrderProcess3_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.StartChipErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess3_Obj.DisplayText_obj.StartChipErase);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.StartChipErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.StartChipErase,3);
                        }

                        ProcessbarControl(6, 3);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        //byte[] CRadd = 
                        /*byte stats = ProgaramerOrderProcess3_Obj.Read(SerialPort_Communiction3, BitConverter.GetBytes(ProgaramerOrderProcess3_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata.Length, ref CRdata);

                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 16; i++)
                            {
                                cr += Convert.ToString(CRdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUserArea(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlag = false;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.MassEraseFail;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.MassEraseFail);
                            ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlag = false;
                            return;
                        }*/
                        ProcessbarControl(6, 3);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*stats = ProgaramerOrderProcess3_Obj.Read(SerialPort_Communiction3, BitConverter.GetBytes(ProgaramerOrderProcess3_Obj.SystemConfig_obj.UIDAdd[ComboBox_TargetMCU.SelectedIndex]), UIDdata.Length, ref UIDdata);
                        ProcessbarControl( 8,1);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 12; i++)
                            {
                                cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUID(cr, ComboBox_TargetMCU.SelectedIndex);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlag = false;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.MassEraseFail;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlag = false;
                            return;
                        }
                        */
                        byte Result = 0;
                        byte stats = ProgaramerOrderProcess3_Obj.CheckEncrypt(SerialPort_Communiction3, ref Result);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            //ProgaramerOrderProcess3_Obj.serialportclose(SerialPort_Communiction3);
                            /*if (Result == 0x01)
                            {
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.UploadFail + ": " + ProgaramerOrderProcess3_Obj.DisplayText_obj.Encrypted;
                                ////ProgaramerOrderProcess3_Obj.serialportclose(SerialPort_Communiction3);
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                //ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                                //MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess3_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                //MessageBoxIcon.Error);
                                Button_Upload.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlag = false;
                                return;
                            }*/
                        }
                        else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.MassEraseFail;
                            ////ProgaramerOrderProcess1_Obj.serialportclose(SerialPort_Communiction);
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.MassEraseFail, 3);
                            ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                            ExcuteControlDisplay(true);
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.UploadSuccessful ;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.UploadSuccessful, 3);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[3] = false;
                            LabelControl("FAIL", 3);
                            return;
                        }

                        ProcessbarControl(7, 3);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        stats = ProgaramerOrderProcess3_Obj.EraseFlash(SerialPort_Communiction3);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            /*
                            Button_Erase.Enabled = true;
                            //BusyFlag = false;
                            ChipEraseFlag = true;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.ChipEraseSuccessful;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ProcessbarControl( 100,1);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                            */

                        }
                        else
                        {
                            ExcuteControlDisplay(true);
                            //BusyFlag = false;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.MassEraseFail;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.MassEraseFail, 3);
                            ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[3] = false;
                            LabelControl("FAIL", 3);
                            return;
                        }
                        ProcessbarControl(8, 3);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*
                        stats = ProgaramerOrderProcess3_Obj.Write(SerialPort_Communiction3, BitConverter.GetBytes(ProgaramerOrderProcess3_Obj.SystemConfig_obj.CRTrimmingAdd[ComboBox_TargetMCU.SelectedIndex]), CRdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlag = false;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.MassEraseFail;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlag = false;
                            return;
                        }
                        */
                        if (Result == 0x01)
                        {
                            stats = ProgaramerOrderProcess3_Obj.MCUReset(SerialPort_Communiction3);
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                //BusyFlag = false;
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.MassEraseFail;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.MassEraseFail, 3);
                                ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[3] = false;
                                LabelControl("FAIL", 3);
                                return;
                            }

                            //ProgaramerOrderProcess3_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess3_Obj.SystemConfig_obj);
                            //CRdata = new byte[ProgaramerOrderProcess3_Obj.SystemConfig_obj.CRTrimmingLength[ComboBox_TargetMCU.SelectedIndex]];
                            //UIDdata = new byte[ProgaramerOrderProcess3_Obj.SystemConfig_obj.UIDLength[ComboBox_TargetMCU.SelectedIndex]];
                            if (true)
                            {
                                stats = ProgaramerOrderProcess3_Obj.ConnectProcess(SerialPort_Communiction3, ProgaramerOrderProcess3_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                           ComText3, frequnecy, Crystal);
                            }
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                ProgaramerOrderProcess3_Obj.DisConnectProcess(SerialPort_Communiction3);
                                ConnectControlDisplay(ConnectFlagSub[3]);
                                //Button_Connect.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[3] = false;
                                LabelControl("FAIL", 3);
                                ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                                return;
                            }
                        }
                        Button_Erase.Enabled = true;
                        //BusyFlag = false;
                        ChipEraseFlag = true;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.ChipEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.ChipEraseSuccessful, 3);
                        //ProcessbarControl( 100,1);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        checkAutoNumber = false;
                        ProcessbarControl(10, 3);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    else if (RadioButton_PageErase.Checked == true)
                    {
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.StartPageErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess3_Obj.DisplayText_obj.StartPageErase);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.StartPageErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.StartPageErase, 3);
                        }
                        double tep = 10 / ((HexData.Length + 511) / ProgaramerOrderProcess3_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                        for (int i = 0; i < (HexData.Length + 511) / ProgaramerOrderProcess3_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]; i++)
                        {
                            byte[] pageaddress = BitConverter.GetBytes((UInt32)(i * ProgaramerOrderProcess3_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]
                                                                       + ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]));
                            byte stats = ProgaramerOrderProcess3_Obj.ErasePage(SerialPort_Communiction3, pageaddress);
                            if (stats == (byte)eErrNumber.Succesful)
                            {
                                ChipEraseFlag = false;

                            }
                            else
                            {
                                string s = "";
                                if (stats == (byte)eErrNumber.Encrypted)
                                {
                                    s = ": " + ProgaramerOrderProcess3_Obj.DisplayText_obj.Encrypted;
                                }
                                ExcuteControlDisplay(true);
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.PageEraseFail + s;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.PageEraseFail, 3);
                                ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                                ExcuteControlFocus(true);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[3] = false;
                                LabelControl("FAIL", 3);
                                return;
                            }
                            ProcessbarControl((int)(i * tep), 3);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        }
                        checkAutoNumber = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.PageEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.PageEraseSuccessful, 3);
                        //MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.PageEraseSuccessful, ProgaramerOrderProcess3_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);
                    }
                }
                ProcessbarControl(10, 3);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";

                if (CheckBox_BlankCheck.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.StartBlankCheck;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess3_Obj.DisplayText_obj.StartBlankCheck, 3);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.StartBlankCheck;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.StartBlankCheck, 3);
                    }
                    ProcessbarControl(12, 3);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte result = 0x00;
                    UInt32 Lenght = 0x00;
                    if (ChipEraseFlag == true)
                    {
                        Lenght = (UInt32)(ProgaramerOrderProcess3_Obj.SystemConfig_obj.PageCount[this.TargetMCUSlecet] *
                                     ProgaramerOrderProcess3_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    else
                    {
                        Lenght = (UInt32)(((HexData.Length + 511) / ProgaramerOrderProcess3_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]) *
                                     ProgaramerOrderProcess3_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    ProcessbarControl(15, 3);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    UInt32 ErrAdd = 0x00;
                    byte stats = ProgaramerOrderProcess3_Obj.CheckBlank(SerialPort_Communiction3, BitConverter.GetBytes(ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]), Lenght, ref result, ref ErrAdd);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        string ss = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            ss = ": " + ProgaramerOrderProcess3_Obj.DisplayText_obj.Encrypted;
                        }
                        ExcuteControlDisplay(true);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.BlankCheckFail + ss;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.BlankCheckFail, 1);
                        ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[3] = false;
                        LabelControl("FAIL", 3);
                        return;
                    }
                    Thread.Sleep(100);
                    ProcessbarControl(17, 3);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    string s = "";
                    if (result == 0x01)
                    {
                        s = ProgaramerOrderProcess3_Obj.DisplayText_obj.ResultBlank;
                    }
                    else if (result == 0x00)
                    {
                        s = ProgaramerOrderProcess3_Obj.DisplayText_obj.ResultNotBlank + "0x" + Convert.ToString(ErrAdd, 16).ToUpper().PadLeft(8, '0');
                    }
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.BlankCheckSuccessful + s;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    string strText = "";
                    strText = ProgaramerOrderProcess3_Obj.DisplayText_obj.BlankCheckSuccessful + s;
                    ShowMsgWithLine(strText, 3);
                    //MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.BlankCheckSuccessful + s, ProgaramerOrderProcess3_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                    //MessageBoxIcon.Warning);
                }
                ProcessbarControl(20, 3);
                ////////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Program.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[3] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;

                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.StartProgram;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess3_Obj.DisplayText_obj.StartProgram, 3);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.StartProgram;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.StartProgram, 3);
                    }
                    ProcessbarControl(20, 3);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (CheckBox_AutoNumber.Checked == true)
                    {
                        if (AutoNumberEnable == false)
                        {
                            MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess3_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            ////TextBox_HexFile.Enabled = true;
                            ////PictureBox_hexFile.Enabled= true;
                            ExcuteControlDisplay(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[3] = false;
                            return;
                        }
                        else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                DialogResult dr = MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.OverHexData, ProgaramerOrderProcess3_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    ExcuteControlDisplay(true);
                                    ExcuteControlFocus(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[3] = false;
                                    return;
                                }
                                else if (dr == DialogResult.Yes)
                                {
                                    byte[] CurrentNumData = BitConverter.GetBytes(CurrentNumber);
                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess3_Obj.Write(SerialPort_Communiction3, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                           // //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[3] = false;
                                            LabelControl("FAIL", 3);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess3_Obj.Write(SerialPort_Communiction3, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                           // //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[3] = false;
                                            LabelControl("FAIL", 3);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess3_Obj.Write(SerialPort_Communiction3, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                           // //TextBox_HexFile.Enabled = true;
                                           // //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[3] = false;
                                            LabelControl("FAIL", 3);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                stats = ProgaramerOrderProcess3_Obj.Write(SerialPort_Communiction3, BitConverter.GetBytes((UInt32)(NumberAdderss)), BitConverter.GetBytes((UInt32)(CurrentNumber)));
                                if (stats == (byte)eErrNumber.Succesful)
                                {

                                }
                                else
                                {
                                    ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                    ////TextBox_HexFile.Enabled = true;
                                   // //PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[3] = false;
                                    LabelControl("FAIL", 3);
                                    return;
                                }
                            }
                            checkAutoNumber = true;
                            NumberAdd = NumberAdderss;
                        }
                    }
                    ProcessbarControl(25, 3);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    TotalCount++;
                    stats = 0x00;
                    byte[] sentdata = new byte[512];
                    int count = (int)((HexData.Length + 511) / ProgaramerOrderProcess3_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    int tep = 45000 / count;
                    for (int i = 0; i < count; i++)
                    {
                        if (i == (count - 1))
                        {
                            sentdata = new byte[HexData.Length - (i * 512)];
                            Array.Copy(HexData, i * 512, sentdata, 0, HexData.Length - (i * 512));
                        }
                        else
                        {
                            Array.Copy(HexData, i * 512, sentdata, 0, 512);
                        }
                        stats = ProgaramerOrderProcess3_Obj.Write(SerialPort_Communiction3, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i * 512)), sentdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            string s = "";
                            string strtxt = "";
                            if (stats == (byte)eErrNumber.Encrypted)
                            {
                                s = ": " + ProgaramerOrderProcess3_Obj.DisplayText_obj.Encrypted;
                            }
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.ProgramFail + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();

                            strtxt = ProgaramerOrderProcess3_Obj.DisplayText_obj.ProgramFail + s;
                            ShowMsgWithLine(strtxt, 1);

                            FailCount++;
                            ExcuteControlDisplay(true);
                            ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                            //TextBox_Length.Text = FailCount.ToString();
                            ////PictureBox_hexFile.Enabled= true;
                            ////TextBox_HexFile.Enabled = true;
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[3] = false;
                            LabelControl("FAIL", 3);
                            return;
                        }
                        ProcessbarControl((int)(25 + ((i * tep) / 1000)), 3);
                        if (bStop3 == true)
                        {
                            return;
                        }
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    if (AutoNumberEnable == true && CheckBox_AutoNumber.Checked == true)
                    {
                        HistoryNumber = CurrentNumber;
                        if (CheckBox_AutoNumber.Checked == true)
                        {
                            CurrentNumber += NumberInterval;
                        }

                        if (!(CurrentNumber < (StartNumber + (NumberLength) * NumberInterval)))
                        {
                            MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.AutoNumberFinsh, ProgaramerOrderProcess3_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            CheckBox_AutoNumber.Checked = false;
                            AutoNumberEnable = false;
                            Button_OpenClose.Text = ProgaramerOrderProcess3_Obj.DisplayText_obj.AutoNumberOpen;
                            Button_OpenClose.Enabled = false;
                        }
                        else
                        {
                            Label_CurrentNumbers.Text = CurrentNumber.ToString();
                        }
                        Label_HistoryNumbers.Text = HistoryNumber.ToString();
                    }
                    ////PictureBox_hexFile.Enabled= true;
                    ////TextBox_HexFile.Enabled = true;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess1_Obj.DisplayText_obj.ProgramSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    string strtext = "";
                    strtext = ProgaramerOrderProcess3_Obj.DisplayText_obj.ProgramSuccessful;
                    ShowMsgWithLine(strtext, 3);
                    //TextBox_NumberAddress.Text = PassCount.ToString();
                    //TextBox_StartNumber.Text = TotalCount.ToString();
                }
                ProcessbarControl(70, 3);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Verify.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[3] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.StartVerify;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess3_Obj.DisplayText_obj.StartVerify);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.StartVerify;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.StartVerify, 3);
                    }
                    ProcessbarControl(75, 3);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (checkAutoNumber == true)
                    {
                        byte[] CurrentNumData = BitConverter.GetBytes((UInt32)HistoryNumber);
                        //if (AutoNumberEnable == false)
                        //if (false)
                        //{
                        //    MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess3_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        //    //TextBox_HexFile.Enabled = true;
                        //    //PictureBox_hexFile.Enabled= true;
                        //    ExcuteControlDisplay(true);
                        //    Control.CheckForIllegalCrossThreadCalls = true;
                        //    BusyFlagSub[3] = false;
                        //    return;
                        //}
                        //else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                /*DialogResult dr = MessageBox.Show("", "", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    //TextBox_HexFile.Enabled = true;
                                    //PictureBox_hexFile.Enabled= true;
                                    Button_Execute.Enabled = true;
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlag = false;
                                    return;
                                }
                                else */
                                if (true)
                                {

                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess3_Obj.Verify(SerialPort_Communiction3, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifyMatch;
                                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                //TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifyNotMatch;
                                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifySuccessful + s;
                                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                //TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[3] = false;
                                            LabelControl("FAIL", 3);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess3_Obj.Verify(SerialPort_Communiction3, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifyMatch;
                                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                //TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifyNotMatch;
                                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifySuccessful + s;
                                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                //TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[3] = false;
                                            LabelControl("FAIL", 3);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess3_Obj.Verify(SerialPort_Communiction3, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                           // string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifyMatch;
                                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                //TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifyNotMatch;
                                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifySuccessful + s;
                                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                //TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                           // //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[3] = false;
                                            LabelControl("FAIL", 3);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                byte[] recdata = new byte[2];
                                stats = ProgaramerOrderProcess3_Obj.Verify(SerialPort_Communiction3, BitConverter.GetBytes((UInt32)(NumberAdderss)), recdata.Length, ref recdata);
                                if (stats == (byte)eErrNumber.Succesful)
                                {
                                   // string s = "";
                                    /*
                                    if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff000000) >> 24) + ((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                    {
                                        s = ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifyMatch;
                                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        //TextBox_Info.ScrollToCaret();
                                    }
                                    else
                                    {
                                        s = ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifyNotMatch;
                                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifySuccessful + s;
                                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        //TextBox_Info.ScrollToCaret();
                                    }
                                    */
                                }
                                else
                                {
                                    ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                    ////TextBox_HexFile.Enabled = true;
                                    ////PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[3] = false;
                                    LabelControl("FAIL", 3);
                                    return;
                                }
                            }
                        }
                    }

                    ProcessbarControl(80, 3);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte[] checksumdata = new byte[2];
                    stats = ProgaramerOrderProcess3_Obj.Verify(SerialPort_Communiction3, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess3_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet])), HexData.Length, ref checksumdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        string s = "";
                        if (((checksumdata[0] << 8) + checksumdata[1]) == ProgaramerOrderProcess3_Obj.CheckSumUInt16(HexData, 0, HexData.Length))
                        {
                            s = ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifyMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = "";
                            strText = ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsg(strText, 3);
                        }
                        else
                        {
                            s = ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifyNotMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifySuccessful + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = "";
                            strText = ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsgWithLine(strText, 3);
                            //break;
                        }
                        //BusyFlag = false;
                        ChipEraseFlag = true;
                        //MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifySuccessful + s, ProgaramerOrderProcess3_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);

                        //Button_Execute.Enabled = true;
                    }
                    else
                    {
                        string s = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            s = ": " + ProgaramerOrderProcess3_Obj.DisplayText_obj.Encrypted;
                        }
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifyFail + s;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        string strText = "";
                        strText = ProgaramerOrderProcess3_Obj.DisplayText_obj.VerifyFail + s;
                        ShowMsgWithLine(strText, 3);

                        ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);
                       // //PictureBox_hexFile.Enabled= true;
                       // //TextBox_HexFile.Enabled = true;
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[3] = false;
                        LabelControl("FAIL", 3);
                        return;
                    }
                    ////PictureBox_hexFile.Enabled= true;
                    ////TextBox_HexFile.Enabled = true;
                }
                ProcessbarControl(85, 3);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Encrypt.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.StartEncrypt;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess3_Obj.DisplayText_obj.StartEncrypt);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.StartEncrypt;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.StartEncrypt, 3);
                    }
                    ProcessbarControl(90, 3);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte Result = 0x00;
                    byte stats = ProgaramerOrderProcess3_Obj.SetEncrypt(SerialPort_Communiction3, ref Result);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        //ProgaramerOrderProcess3_Obj.serialportclose(SerialPort_Communiction3);
                        //if (Result == 0x00)
                        //{
                        //ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                        //MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess3_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Error);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.EncryptedSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.EncryptedSuccessful, 3);

                        ExcuteControlDisplay(true);
                        ProcessbarControl( 100, 3);
                        LabelControl("OK", 3);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[3] = false;
                        return;
                        //}

                    }
                    else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess3_Obj.DisplayText_obj.EncryptFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess3_Obj.DisplayText_obj.EncryptFail, 3);

                        //ProgaramerOrderProcess3_Obj.serialportclose(SerialPort_Communiction);
                        ProgaramerOrderProcess3_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);//need to verify
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[3] = false;
                        LabelControl("FAIL", 3);
                        return;
                    }
                }
                //}
                ProcessbarControl( 100, 3);
                LabelControl("OK", 3);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                ExcuteControlDisplay(true);
                ExcuteControlFocus(true);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[3] = false;
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message, ProgaramerOrderProcess3_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                ExcuteControlDisplay(true);//1111111111
                                           //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "执行错误";
                                           //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                           //TextBox_Info.ScrollToCaret();
                ShowMsgWithLine("执行错误", 3);
                LabelControl("FAIL", 1);
                //ProgaramerOrderProcess1_Obj.ErrProcess(stats);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[3] = false;
                return;
            }

        }
        void Button_Execute_fun4()
        {
            try
            {
                if (SerialPort_Communiction4.BytesToRead > 0)
                {
                    byte[] ReceiveData = new byte[SerialPort_Communiction4.BytesToRead];
                    byte[] t = new byte[SerialPort_Communiction4.BytesToRead];
                    SerialPort_Communiction4.Read(ReceiveData, 0, SerialPort_Communiction4.BytesToRead);
                }
                //for (int ii = 0; ii < Convert.ToInt32(textBox1.Text,10); ii++)
                //{
                //label4.Text = ii.ToString();
//                Control.CheckForIllegalCrossThreadCalls = false;
                ProcessbarControl(5, 4);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Erase.Checked == true)
                {
                    if (RadioButton_ChipErase.Checked == true)
                    {
                        //byte[] CRdata = new byte[ProgaramerOrderProcess4_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                        //byte[] UIDdata = new byte[ProgaramerOrderProcess4_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.StartChipErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.StartChipErase, 4);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.StartChipErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.StartChipErase, 4);
                        }

                        ProcessbarControl(6, 4);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        //byte[] CRadd = 
                        /*byte stats = ProgaramerOrderProcess4_Obj.Read(SerialPort_Communiction4, BitConverter.GetBytes(ProgaramerOrderProcess4_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata.Length, ref CRdata);

                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 16; i++)
                            {
                                cr += Convert.ToString(CRdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUserArea(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[4] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.MassEraseFail, 4);
                            ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[4] = false;
                            return;
                        }*/
                        ProcessbarControl(7, 4);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*stats = ProgaramerOrderProcess4_Obj.Read(SerialPort_Communiction4, BitConverter.GetBytes(ProgaramerOrderProcess4_Obj.SystemConfig_obj.UIDAdd[TargetMCUSlecet]), UIDdata.Length, ref UIDdata);
                        ProcessbarControl( 8,4);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 12; i++)
                            {
                                cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUID(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[4] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[4] = false;
                            return;
                        }
                        */
                        byte Result = 0;
                        byte stats = ProgaramerOrderProcess4_Obj.CheckEncrypt(SerialPort_Communiction4, ref Result);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            //ProgaramerOrderProcess4_Obj.serialportclose(SerialPort_Communiction4);
                            /*if (Result == 0x01)
                            {
                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.UploadFail + ": " + ProgaramerOrderProcess4_Obj.DisplayText_obj.Encrypted;
                                //ProgaramerOrderProcess4_Obj.serialportclose(SerialPort_Communiction4);
                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                TextBox_Info.ScrollToCaret();
                                //ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                                //MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess4_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                //MessageBoxIcon.Error);
                                Button_Upload.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[4] = false;
                                return;
                            }*/
                        }
                        else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.MassEraseFail;
                            ////ProgaramerOrderProcess4_Obj.serialportclose(SerialPort_Communiction4);
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.MassEraseFail, 4);
                            ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                            ExcuteControlDisplay(true);
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.UploadSuccessful ;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[4] = false;
                            LabelControl("FAIL", 4);
                            return;
                        }

                        ProcessbarControl(8, 4);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        stats = ProgaramerOrderProcess4_Obj.EraseFlash(SerialPort_Communiction4);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            /*
                            Button_Erase.Enabled = true;
                            //BusyFlagSub[4] = false;
                            ChipEraseFlag = true;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.ChipEraseSuccessful;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProcessbarControl( 100,4);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                            */

                        }
                        else
                        {
                            ExcuteControlDisplay(true);
                            //BusyFlag = false;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.MassEraseFail;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.MassEraseFail, 4);
                            ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[4] = false;
                            LabelControl("FAIL", 4);
                            return;
                        }
                        ProcessbarControl(8, 4);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*
                        stats = ProgaramerOrderProcess4_Obj.Write(SerialPort_Communiction4, BitConverter.GetBytes(ProgaramerOrderProcess4_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[4] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[4] = false;
                            return;
                        }
                        */
                        if (Result == 0x01)
                        {
                            stats = ProgaramerOrderProcess4_Obj.MCUReset(SerialPort_Communiction4);
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                //BusyFlagSub[4] = false;
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.MassEraseFail;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.MassEraseFail,4);
                                ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[4] = false;
                                LabelControl("FAIL", 4);
                                return;
                            }

                            //ProgaramerOrderProcess4_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess4_Obj.SystemConfig_obj);
                            //CRdata = new byte[ProgaramerOrderProcess4_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                            //UIDdata = new byte[ProgaramerOrderProcess4_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                            if (true)
                            {
                                stats = ProgaramerOrderProcess4_Obj.ConnectProcess(SerialPort_Communiction4, ProgaramerOrderProcess4_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                           ComText4, frequnecy, Crystal);
                            }
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                ProgaramerOrderProcess4_Obj.DisConnectProcess(SerialPort_Communiction4);
                                ConnectControlDisplay(ConnectFlagSub[4]);
                                //Button_Connect.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[4] = false;
                                LabelControl("FAIL", 4);
                                ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                                return;
                            }
                        }
                        Button_Erase.Enabled = true;
                        //BusyFlagSub[4] = false;
                        ChipEraseFlag = true;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.ChipEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.ChipEraseSuccessful, 4);
                        //ProcessbarControl( 100,4);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        checkAutoNumber = false;
                        ProcessbarControl(10, 4);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    else if (RadioButton_PageErase.Checked == true)
                    {
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.StartPageErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.StartPageErase, 4);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.StartPageErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.StartPageErase,4);
                        }
                        double tep = 10 / ((HexData.Length + 511) / ProgaramerOrderProcess4_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                        for (int i = 0; i < (HexData.Length + 511) / ProgaramerOrderProcess4_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]; i++)
                        {
                            byte[] pageaddress = BitConverter.GetBytes((UInt32)(i * ProgaramerOrderProcess4_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]
                                                                       + ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]));
                            byte stats = ProgaramerOrderProcess4_Obj.ErasePage(SerialPort_Communiction4, pageaddress);
                            if (stats == (byte)eErrNumber.Succesful)
                            {
                                ChipEraseFlag = false;

                            }
                            else
                            {
                                string s = "";
                                if (stats == (byte)eErrNumber.Encrypted)
                                {
                                    s = ": " + ProgaramerOrderProcess4_Obj.DisplayText_obj.Encrypted;
                                }
                                ExcuteControlDisplay(true);
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.PageEraseFail + s;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.MassEraseFail+s,4);
                                ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                                ExcuteControlFocus(true);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[4] = false;
                                LabelControl("FAIL", 4);
                                return;
                            }
                            ProcessbarControl((int)(i * tep), 4);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        }
                        checkAutoNumber = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.PageEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.PageEraseSuccessful,4);
                        //MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.PageEraseSuccessful, ProgaramerOrderProcess4_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);
                    }
                }
                ProcessbarControl(10, 4);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";

                if (CheckBox_BlankCheck.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.StartBlankCheck;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.StartBlankCheck,4);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.StartBlankCheck;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.StartBlankCheck,4);
                    }
                    ProcessbarControl(12, 4);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte result = 0x00;
                    UInt32 Lenght = 0x00;
                    if (ChipEraseFlag == true)
                    {
                        Lenght = (UInt32)(ProgaramerOrderProcess4_Obj.SystemConfig_obj.PageCount[this.TargetMCUSlecet] *
                                     ProgaramerOrderProcess4_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    else
                    {
                        Lenght = (UInt32)(((HexData.Length + 511) / ProgaramerOrderProcess4_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]) *
                                     ProgaramerOrderProcess4_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    ProcessbarControl(15, 4);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    UInt32 ErrAdd = 0x00;
                    byte stats = ProgaramerOrderProcess4_Obj.CheckBlank(SerialPort_Communiction4, BitConverter.GetBytes(ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]), Lenght, ref result, ref ErrAdd);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        string ss = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            ss = ": " + ProgaramerOrderProcess4_Obj.DisplayText_obj.Encrypted;
                        }
                        ExcuteControlDisplay(true);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.BlankCheckFail + ss;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.BlankCheckFail + ss,4);
                        ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[4] = false;
                        LabelControl("FAIL", 4);
                        return;
                    }
                    Thread.Sleep(100);
                    ProcessbarControl(17, 4);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    string s = "";
                    if (result == 0x01)
                    {
                        s = ProgaramerOrderProcess4_Obj.DisplayText_obj.ResultBlank;
                    }
                    else if (result == 0x00)
                    {
                        s = ProgaramerOrderProcess4_Obj.DisplayText_obj.ResultNotBlank + "0x" + Convert.ToString(ErrAdd, 16).ToUpper().PadLeft(8, '0');
                    }
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.BlankCheckSuccessful + s;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.BlankCheckSuccessful + s,4);
                    //MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.BlankCheckSuccessful + s, ProgaramerOrderProcess4_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                    //MessageBoxIcon.Warning);
                }
                ProcessbarControl(20, 4);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Program.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[4] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;

                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.StartProgram;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.StartProgram,4);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.StartProgram;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.StartProgram,4);
                    }
                    ProcessbarControl(20, 4);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (CheckBox_AutoNumber.Checked == true)
                    {
                        if (AutoNumberEnable == false)
                        {
                            MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess4_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            ////TextBox_HexFile.Enabled = true;
                            ////PictureBox_hexFile.Enabled= true;
                            ExcuteControlDisplay(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[4] = false;
                            return;
                        }
                        else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                DialogResult dr = MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.OverHexData, ProgaramerOrderProcess4_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    ExcuteControlDisplay(true);
                                    ExcuteControlFocus(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[4] = false;
                                    return;
                                }
                                else if (dr == DialogResult.Yes)
                                {
                                    byte[] CurrentNumData = BitConverter.GetBytes(CurrentNumber);
                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess4_Obj.Write(SerialPort_Communiction4, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                           // //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[4] = false;
                                            LabelControl("FAIL", 4);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess4_Obj.Write(SerialPort_Communiction4, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[4] = false;
                                            LabelControl("FAIL", 4);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess4_Obj.Write(SerialPort_Communiction4, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[4] = false;
                                            LabelControl("FAIL", 4);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                stats = ProgaramerOrderProcess4_Obj.Write(SerialPort_Communiction4, BitConverter.GetBytes((UInt32)(NumberAdderss)), BitConverter.GetBytes((UInt32)(CurrentNumber)));
                                if (stats == (byte)eErrNumber.Succesful)
                                {

                                }
                                else
                                {
                                    ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                    ////TextBox_HexFile.Enabled = true;
                                    ////PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[4] = false;
                                    LabelControl("FAIL", 4);
                                    return;
                                }
                            }
                            checkAutoNumber = true;
                            NumberAdd = NumberAdderss;
                        }
                    }
                    ProcessbarControl(25, 4);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    TotalCount++;
                    stats = 0x00;
                    byte[] sentdata = new byte[512];
                    int count = (int)((HexData.Length + 511) / ProgaramerOrderProcess4_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    int tep = 45000 / count;
                    for (int i = 0; i < count; i++)
                    {
                        if (i == (count - 1))
                        {
                            sentdata = new byte[HexData.Length - (i * 512)];
                            Array.Copy(HexData, i * 512, sentdata, 0, HexData.Length - (i * 512));
                        }
                        else
                        {
                            Array.Copy(HexData, i * 512, sentdata, 0, 512);
                        }
                        stats = ProgaramerOrderProcess4_Obj.Write(SerialPort_Communiction4, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i * 512)), sentdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            string s = "";
                            string strText = "";
                            if (stats == (byte)eErrNumber.Encrypted)
                            {
                                s = ": " + ProgaramerOrderProcess4_Obj.DisplayText_obj.Encrypted;
                            }
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.ProgramFail + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            strText = ProgaramerOrderProcess4_Obj.DisplayText_obj.ProgramFail + s;
                            ShowMsgWithLine(strText, 4);
                            FailCount++;
                            ExcuteControlDisplay(true);
                            ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                            //TextBox_Length.Text = FailCount.ToString();
                            ////PictureBox_hexFile.Enabled= true;
                            ////TextBox_HexFile.Enabled = true;
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[4] = false;
                            LabelControl("FAIL", 4);
                            return;
                        }
                        ProcessbarControl((int)(25 + ((i * tep) / 1000)), 4);
                        if (bStop4 == true)
                        {
                            return;
                        }
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    if (AutoNumberEnable == true && CheckBox_AutoNumber.Checked == true)
                    {
                        HistoryNumber = CurrentNumber;
                        if (CheckBox_AutoNumber.Checked == true)
                        {
                            CurrentNumber += NumberInterval;
                        }

                        if (!(CurrentNumber < (StartNumber + (NumberLength) * NumberInterval)))
                        {
                            MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.AutoNumberFinsh, ProgaramerOrderProcess4_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            CheckBox_AutoNumber.Checked = false;
                            AutoNumberEnable = false;
                            Button_OpenClose.Text = ProgaramerOrderProcess4_Obj.DisplayText_obj.AutoNumberOpen;
                            Button_OpenClose.Enabled = false;
                        }
                        else
                        {
                            Label_CurrentNumbers.Text = CurrentNumber.ToString();
                        }
                        Label_HistoryNumbers.Text = HistoryNumber.ToString();
                    }
                    ////PictureBox_hexFile.Enabled= true;
                    ////TextBox_HexFile.Enabled = true;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.ProgramSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.ProgramSuccessful, 4);
                    //TextBox_NumberAddress.Text = PassCount.ToString();
                    //TextBox_StartNumber.Text = TotalCount.ToString();
                }
                ProcessbarControl(70, 4);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Verify.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[4] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.StartVerify;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.StartVerify, 4);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.StartVerify;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.StartVerify, 4);
                    }
                    ProcessbarControl(75, 4);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (checkAutoNumber == true)
                    {
                        byte[] CurrentNumData = BitConverter.GetBytes((UInt32)HistoryNumber);
                        //if (AutoNumberEnable == false)
                        //if (false)
                        //{
                        //    MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess4_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        //    //TextBox_HexFile.Enabled = true;
                        //    //PictureBox_hexFile.Enabled= true;
                        //    ExcuteControlDisplay(true);
                        //    Control.CheckForIllegalCrossThreadCalls = true;
                        //    BusyFlagSub[4] = false;
                        //    return;
                        //}
                        //else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                /*DialogResult dr = MessageBox.Show("", "", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    //TextBox_HexFile.Enabled = true;
                                    //PictureBox_hexFile.Enabled= true;
                                    Button_Execute.Enabled = true;
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[4] = false;
                                    return;
                                }
                                else */
                                if (true)
                                {

                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess4_Obj.Verify(SerialPort_Communiction4, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[4] = false;
                                            LabelControl("FAIL", 4);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess4_Obj.Verify(SerialPort_Communiction4, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[4] = false;
                                            LabelControl("FAIL", 4);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess4_Obj.Verify(SerialPort_Communiction4, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[4] = false;
                                            LabelControl("FAIL", 4);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                byte[] recdata = new byte[2];
                                stats = ProgaramerOrderProcess4_Obj.Verify(SerialPort_Communiction4, BitConverter.GetBytes((UInt32)(NumberAdderss)), recdata.Length, ref recdata);
                                if (stats == (byte)eErrNumber.Succesful)
                                {
                                    //string s = "";
                                    /*
                                    if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff000000) >> 24) + ((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                    {
                                        s = ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifyMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    else
                                    {
                                        s = ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifyNotMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifySuccessful + s;
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    */
                                }
                                else
                                {
                                    ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                   // //TextBox_HexFile.Enabled = true;
                                   // //PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[4] = false;
                                    LabelControl("FAIL", 4);
                                    return;
                                }
                            }
                        }
                    }

                    ProcessbarControl(80, 4);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte[] checksumdata = new byte[2];
                    stats = ProgaramerOrderProcess4_Obj.Verify(SerialPort_Communiction4, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess4_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet])), HexData.Length, ref checksumdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        string s = "";
                        if (((checksumdata[0] << 8) + checksumdata[1]) == ProgaramerOrderProcess4_Obj.CheckSumUInt16(HexData, 0, HexData.Length))
                        {
                            s = ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifyMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsg(strText, 4);
                        }
                        else
                        {
                            s = ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifyNotMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifySuccessful + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsgWithLine(strText,4);
                            //break;
                        }
                        //BusyFlagSub[4] = false;
                        ChipEraseFlag = true;
                        //MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifySuccessful + s, ProgaramerOrderProcess4_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);

                        //Button_Execute.Enabled = true;
                    }
                    else
                    {
                        string s = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            s = ": " + ProgaramerOrderProcess4_Obj.DisplayText_obj.Encrypted;
                        }
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifyFail + s;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        string strText = "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.VerifyFail + s;
                        ShowMsgWithLine(strText, 4);

                        ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);
                        ////PictureBox_hexFile.Enabled= true;
                        ////TextBox_HexFile.Enabled = true;
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[4] = false;
                        LabelControl("FAIL", 4);
                        return;
                    }
                    //PictureBox_hexFile.Enabled= true;
                    //TextBox_HexFile.Enabled = true;
                }
                ProcessbarControl(85, 4);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Encrypt.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.StartEncrypt;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess4_Obj.DisplayText_obj.StartEncrypt, 4);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.StartEncrypt;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.StartEncrypt, 4);
                    }
                    ProcessbarControl(90, 4);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte Result = 0x00;
                    byte stats = ProgaramerOrderProcess4_Obj.SetEncrypt(SerialPort_Communiction4, ref Result);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        //ProgaramerOrderProcess4_Obj.serialportclose(SerialPort_Communiction4);
                        //if (Result == 0x00)
                        //{
                        //ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                        //MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess4_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Error);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.EncryptedSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.EncryptedSuccessful, 4);

                        ExcuteControlDisplay(true);
                        ProcessbarControl(100, 4);
                        LabelControl("OK", 4);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[4] = false;
                        return;
                        //}

                    }
                    else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess4_Obj.DisplayText_obj.EncryptFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess4_Obj.DisplayText_obj.EncryptFail, 4);

                        //ProgaramerOrderProcess4_Obj.serialportclose(SerialPort_Communiction);
                        ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);//need to verify
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[4] = false;
                        LabelControl("FAIL", 4);
                        return;
                    }
                }
                //}
                ProcessbarControl(100, 4);
                LabelControl("OK", 4);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                ExcuteControlDisplay(true);
                ExcuteControlFocus(true);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[4] = false;
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message, ProgaramerOrderProcess4_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                ExcuteControlDisplay(true);//1111111111
                                           //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "执行错误";
                                           //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                           //TextBox_Info.ScrollToCaret();
                LabelControl("FAIl", 4);
                ShowMsgWithLine("执行错误", 4);
                //ProgaramerOrderProcess4_Obj.ErrProcess(stats);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[4] = false;
                return;
            }

        }
        void Button_Execute_fun5()
        {
            try
            {
                if (SerialPort_Communiction5.BytesToRead > 0)
                {
                    byte[] ReceiveData = new byte[SerialPort_Communiction5.BytesToRead];
                    byte[] t = new byte[SerialPort_Communiction5.BytesToRead];
                    SerialPort_Communiction5.Read(ReceiveData, 0, SerialPort_Communiction5.BytesToRead);
                }
                //for (int ii = 0; ii < Convert.ToInt32(textBox1.Text,10); ii++)
                //{
                //label4.Text = ii.ToString();
 //               Control.CheckForIllegalCrossThreadCalls = false;
                ProcessbarControl( 5,5);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Erase.Checked == true)
                {
                    if (RadioButton_ChipErase.Checked == true)
                    {
                        //byte[] CRdata = new byte[ProgaramerOrderProcess5_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                        //byte[] UIDdata = new byte[ProgaramerOrderProcess5_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.StartChipErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess5_Obj.DisplayText_obj.StartChipErase,5);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.StartChipErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.StartChipErase, 5);
                        }

                        ProcessbarControl( 6, 5);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        //byte[] CRadd = 
                        /*byte stats = ProgaramerOrderProcess5_Obj.Read(SerialPort_Communiction5, BitConverter.GetBytes(ProgaramerOrderProcess5_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata.Length, ref CRdata);

                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 16; i++)
                            {
                                cr += Convert.ToString(CRdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUserArea(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[5] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.MassEraseFail,5);
                            ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[5] = false;
                            return;
                        }*/
                        ProcessbarControl( 7, 5);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*stats = ProgaramerOrderProcess5_Obj.Read(SerialPort_Communiction5, BitConverter.GetBytes(ProgaramerOrderProcess5_Obj.SystemConfig_obj.UIDAdd[TargetMCUSlecet]), UIDdata.Length, ref UIDdata);
                        ProcessbarControl( 8,5);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 12; i++)
                            {
                                cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUID(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[5] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[5] = false;
                            return;
                        }
                        */
                        byte Result = 0;
                        byte stats = ProgaramerOrderProcess5_Obj.CheckEncrypt(SerialPort_Communiction5, ref Result);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            //ProgaramerOrderProcess5_Obj.serialportclose(SerialPort_Communiction5);
                            /*if (Result == 0x01)
                            {
                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.UploadFail + ": " + ProgaramerOrderProcess5_Obj.DisplayText_obj.Encrypted;
                                //ProgaramerOrderProcess5_Obj.serialportclose(SerialPort_Communiction5);
                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                TextBox_Info.ScrollToCaret();
                                //ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                                //MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess5_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                //MessageBoxIcon.Error);
                                Button_Upload.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[5] = false;
                                return;
                            }*/
                        }
                        else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.MassEraseFail;
                            ////ProgaramerOrderProcess5_Obj.serialportclose(SerialPort_Communiction5);
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.MassEraseFail,5);
                            ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                            ExcuteControlDisplay(true);
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.UploadSuccessful ;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[5] = false;
                            LabelControl("FAIL", 5);
                            return;
                        }

                        ProcessbarControl( 8, 5);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        stats = ProgaramerOrderProcess5_Obj.EraseFlash(SerialPort_Communiction5);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            /*
                            Button_Erase.Enabled = true;
                            //BusyFlagSub[5] = false;
                            ChipEraseFlag = true;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.ChipEraseSuccessful;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProcessbarControl( 100,5);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                            */

                        }
                        else
                        {
                            ExcuteControlDisplay(true);
                            //BusyFlag = false;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.MassEraseFail;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.MassEraseFail, 5);
                            ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[5] = false;
                            LabelControl("FAIL", 5);
                            return;
                        }
                        ProcessbarControl( 8, 5);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*
                        stats = ProgaramerOrderProcess5_Obj.Write(SerialPort_Communiction5, BitConverter.GetBytes(ProgaramerOrderProcess5_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[5] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[5] = false;
                            return;
                        }
                        */
                        if (Result == 0x01)
                        {
                            stats = ProgaramerOrderProcess5_Obj.MCUReset(SerialPort_Communiction5);
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                //BusyFlagSub[5] = false;
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.MassEraseFail;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.MassEraseFail,5);
                                ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[5] = false;
                                LabelControl("FAIL", 5);
                                return;
                            }

                            //ProgaramerOrderProcess5_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess5_Obj.SystemConfig_obj);
                            //CRdata = new byte[ProgaramerOrderProcess5_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                            //UIDdata = new byte[ProgaramerOrderProcess5_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                            if (true)
                            {
                                stats = ProgaramerOrderProcess5_Obj.ConnectProcess(SerialPort_Communiction5, ProgaramerOrderProcess5_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                           ComText5, frequnecy, Crystal);
                            }
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                ProgaramerOrderProcess5_Obj.DisConnectProcess(SerialPort_Communiction5);
                                ConnectControlDisplay(ConnectFlagSub[5]);
                                //Button_Connect.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[5] = false;
                                LabelControl("FAIL", 5);
                                ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                                return;
                            }
                        }
                        Button_Erase.Enabled = true;
                        //BusyFlagSub[5] = false;
                        ChipEraseFlag = true;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.ChipEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.ChipEraseSuccessful, 5);
                        //ProcessbarControl( 100,5);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        checkAutoNumber = false;
                        ProcessbarControl( 10, 5);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    else if (RadioButton_PageErase.Checked == true)
                    {
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.StartPageErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess5_Obj.DisplayText_obj.StartPageErase, 5);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.StartPageErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.StartPageErase, 5);
                        }
                        double tep = 10 / ((HexData.Length + 511) / ProgaramerOrderProcess5_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                        for (int i = 0; i < (HexData.Length + 511) / ProgaramerOrderProcess5_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]; i++)
                        {
                            byte[] pageaddress = BitConverter.GetBytes((UInt32)(i * ProgaramerOrderProcess5_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]
                                                                       + ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]));
                            byte stats = ProgaramerOrderProcess5_Obj.ErasePage(SerialPort_Communiction5, pageaddress);
                            if (stats == (byte)eErrNumber.Succesful)
                            {
                                ChipEraseFlag = false;

                            }
                            else
                            {
                                string s = "";
                                if (stats == (byte)eErrNumber.Encrypted)
                                {
                                    s = ": " + ProgaramerOrderProcess5_Obj.DisplayText_obj.Encrypted;
                                }
                                ExcuteControlDisplay(true);
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.PageEraseFail + s;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.PageEraseFail + s,5);
                                ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                                ExcuteControlFocus(true);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[5] = false;
                                LabelControl("FAIL", 5);
                                return;
                            }
                            ProcessbarControl( (int)(i * tep), 5);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        }
                        checkAutoNumber = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.PageEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.PageEraseSuccessful,5);

                        //MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.PageEraseSuccessful, ProgaramerOrderProcess5_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);
                    }
                }
                ProcessbarControl( 10, 5);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";

                if (CheckBox_BlankCheck.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.StartBlankCheck;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess5_Obj.DisplayText_obj.StartBlankCheck, 5);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.StartBlankCheck;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.StartBlankCheck, 5);
                    }
                    ProcessbarControl( 12, 5);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte result = 0x00;
                    UInt32 Lenght = 0x00;
                    if (ChipEraseFlag == true)
                    {
                        Lenght = (UInt32)(ProgaramerOrderProcess5_Obj.SystemConfig_obj.PageCount[this.TargetMCUSlecet] *
                                     ProgaramerOrderProcess5_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    else
                    {
                        Lenght = (UInt32)(((HexData.Length + 511) / ProgaramerOrderProcess5_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]) *
                                     ProgaramerOrderProcess5_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    ProcessbarControl( 15, 5);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    UInt32 ErrAdd = 0x00;
                    byte stats = ProgaramerOrderProcess5_Obj.CheckBlank(SerialPort_Communiction5, BitConverter.GetBytes(ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]), Lenght, ref result, ref ErrAdd);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        string ss = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            ss = ": " + ProgaramerOrderProcess5_Obj.DisplayText_obj.Encrypted;
                        }
                        ExcuteControlDisplay(true);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.BlankCheckFail + ss;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.BlankCheckFail + ss,5);
                        ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[5] = false;
                        LabelControl("FAIL", 5);
                        return;
                    }
                    Thread.Sleep(100);
                    ProcessbarControl( 17, 5);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    string s = "";
                    if (result == 0x01)
                    {
                        s = ProgaramerOrderProcess5_Obj.DisplayText_obj.ResultBlank;
                    }
                    else if (result == 0x00)
                    {
                        s = ProgaramerOrderProcess5_Obj.DisplayText_obj.ResultNotBlank + "0x" + Convert.ToString(ErrAdd, 16).ToUpper().PadLeft(8, '0');
                    }
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.BlankCheckSuccessful + s;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.BlankCheckSuccessful + s,5);
                    //MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.BlankCheckSuccessful + s, ProgaramerOrderProcess5_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                    //MessageBoxIcon.Warning);
                }
                ProcessbarControl( 20, 5);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Program.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[5] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;

                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.StartProgram;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess5_Obj.DisplayText_obj.StartProgram, 5);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.StartProgram;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.StartProgram, 5);
                    }
                    ProcessbarControl( 20, 5);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (CheckBox_AutoNumber.Checked == true)
                    {
                        if (AutoNumberEnable == false)
                        {
                            MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess5_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            //TextBox_HexFile.Enabled = true;
                            ////PictureBox_hexFile.Enabled= true;
                            //ExcuteControlDisplay(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[5] = false;
                            return;
                        }
                        else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                DialogResult dr = MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.OverHexData, ProgaramerOrderProcess5_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    ExcuteControlDisplay(true);
                                    ExcuteControlFocus(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[5] = false;
                                    return;
                                }
                                else if (dr == DialogResult.Yes)
                                {
                                    byte[] CurrentNumData = BitConverter.GetBytes(CurrentNumber);
                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess5_Obj.Write(SerialPort_Communiction5, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[5] = false;
                                            LabelControl("FAIL", 5);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess5_Obj.Write(SerialPort_Communiction5, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                           // //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[5] = false;
                                            LabelControl("FAIL", 5);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess5_Obj.Write(SerialPort_Communiction5, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[5] = false;
                                            LabelControl("FAIL", 5);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                stats = ProgaramerOrderProcess5_Obj.Write(SerialPort_Communiction5, BitConverter.GetBytes((UInt32)(NumberAdderss)), BitConverter.GetBytes((UInt32)(CurrentNumber)));
                                if (stats == (byte)eErrNumber.Succesful)
                                {

                                }
                                else
                                {
                                    ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                   // //TextBox_HexFile.Enabled = true;
                                    ////PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[5] = false;
                                    LabelControl("FAIL", 5);
                                    return;
                                }
                            }
                            checkAutoNumber = true;
                            NumberAdd = NumberAdderss;
                        }
                    }
                    ProcessbarControl( 25, 5);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    TotalCount++;
                    stats = 0x00;
                    byte[] sentdata = new byte[512];
                    int count = (int)((HexData.Length + 511) / ProgaramerOrderProcess5_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    int tep = 45000 / count;
                    for (int i = 0; i < count; i++)
                    {
                        if (i == (count - 1))
                        {
                            sentdata = new byte[HexData.Length - (i * 512)];
                            Array.Copy(HexData, i * 512, sentdata, 0, HexData.Length - (i * 512));
                        }
                        else
                        {
                            Array.Copy(HexData, i * 512, sentdata, 0, 512);
                        }
                        stats = ProgaramerOrderProcess5_Obj.Write(SerialPort_Communiction5, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i * 512)), sentdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            string s = "";
                            if (stats == (byte)eErrNumber.Encrypted)
                            {
                                s = ": " + ProgaramerOrderProcess5_Obj.DisplayText_obj.Encrypted;
                            }
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.ProgramFail + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = "";
                            strText = ProgaramerOrderProcess5_Obj.DisplayText_obj.ProgramFail + s;
                            ShowMsgWithLine(strText,5);
                            FailCount++;
                            ExcuteControlDisplay(true);
                            ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                            //TextBox_Length.Text = FailCount.ToString();
                            ////PictureBox_hexFile.Enabled= true;
                            ////TextBox_HexFile.Enabled = true;
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[5] = false;
                            LabelControl("FAIL", 5);
                            return;
                        }
                        ProcessbarControl( (int)(25 + ((i * tep) / 1000)), 5);
                        if (bStop5 == true)
                        {
                            return;
                        }
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    if (AutoNumberEnable == true && CheckBox_AutoNumber.Checked == true)
                    {
                        HistoryNumber = CurrentNumber;
                        if (CheckBox_AutoNumber.Checked == true)
                        {
                            CurrentNumber += NumberInterval;
                        }

                        if (!(CurrentNumber < (StartNumber + (NumberLength) * NumberInterval)))
                        {
                            MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.AutoNumberFinsh, ProgaramerOrderProcess5_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            CheckBox_AutoNumber.Checked = false;
                            AutoNumberEnable = false;
                            Button_OpenClose.Text = ProgaramerOrderProcess5_Obj.DisplayText_obj.AutoNumberOpen;
                            Button_OpenClose.Enabled = false;
                        }
                        else
                        {
                            Label_CurrentNumbers.Text = CurrentNumber.ToString();
                        }
                        Label_HistoryNumbers.Text = HistoryNumber.ToString();
                    }
                    ////PictureBox_hexFile.Enabled= true;
                    ////TextBox_HexFile.Enabled = true;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.ProgramSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.ProgramSuccessful,5);
                    //TextBox_NumberAddress.Text = PassCount.ToString();
                    //TextBox_StartNumber.Text = TotalCount.ToString();
                }
                ProcessbarControl( 70, 5);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Verify.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[5] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;
                    if (TextBox_Info.Text == "")
                    {
                        //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.StartVerify;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsg(ProgaramerOrderProcess5_Obj.DisplayText_obj.StartVerify, 5);
                    }
                    else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.StartVerify;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.StartVerify, 5);
                    }
                    ProcessbarControl( 75, 5);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (checkAutoNumber == true)
                    {
                        byte[] CurrentNumData = BitConverter.GetBytes((UInt32)HistoryNumber);
                        //if (AutoNumberEnable == false)
                        //if (false)
                        //{
                        //    MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess5_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        //    //TextBox_HexFile.Enabled = true;
                        //    //PictureBox_hexFile.Enabled= true;
                        //    ExcuteControlDisplay(true);
                        //    Control.CheckForIllegalCrossThreadCalls = true;
                        //    BusyFlagSub[5] = false;
                        //    return;
                        //}
                        //else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                /*DialogResult dr = MessageBox.Show("", "", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    //TextBox_HexFile.Enabled = true;
                                    //PictureBox_hexFile.Enabled= true;
                                    Button_Execute.Enabled = true;
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[5] = false;
                                    return;
                                }
                                else */
                                if (true)
                                {

                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess5_Obj.Verify(SerialPort_Communiction5, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[5] = false;
                                            LabelControl("FAIL", 5);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess5_Obj.Verify(SerialPort_Communiction5, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                           // //TextBox_HexFile.Enabled = true;
                                           // //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[5] = false;
                                            LabelControl("FAIL", 5);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess5_Obj.Verify(SerialPort_Communiction5, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[5] = false;
                                            LabelControl("FAIL", 5);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                byte[] recdata = new byte[2];
                                stats = ProgaramerOrderProcess5_Obj.Verify(SerialPort_Communiction5, BitConverter.GetBytes((UInt32)(NumberAdderss)), recdata.Length, ref recdata);
                                if (stats == (byte)eErrNumber.Succesful)
                                {
                                    //string s = "";
                                    /*
                                    if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff000000) >> 24) + ((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                    {
                                        s = ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifyMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    else
                                    {
                                        s = ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifyNotMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifySuccessful + s;
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    */
                                }
                                else
                                {
                                    ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                   // //TextBox_HexFile.Enabled = true;
                                   // //PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[5] = false;
                                    LabelControl("FAIL", 5);
                                    return;
                                }
                            }
                        }
                    }

                    ProcessbarControl( 80, 5);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte[] checksumdata = new byte[2];
                    stats = ProgaramerOrderProcess5_Obj.Verify(SerialPort_Communiction5, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess5_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet])), HexData.Length, ref checksumdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        string s = "";
                        if (((checksumdata[0] << 8) + checksumdata[1]) == ProgaramerOrderProcess5_Obj.CheckSumUInt16(HexData, 0, HexData.Length))
                        {
                            s = ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifyMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsg(strText, 5);
                        }
                        else
                        {
                            s = ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifyNotMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifySuccessful + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsgWithLine(strText, 5);
                            //break;
                        }
                        //BusyFlagSub[5] = false;
                        ChipEraseFlag = true;
                        //MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifySuccessful + s, ProgaramerOrderProcess5_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);

                        //Button_Execute.Enabled = true;
                    }
                    else
                    {
                        string s = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            s = ": " + ProgaramerOrderProcess5_Obj.DisplayText_obj.Encrypted;
                        }
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifyFail + s;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        string strText = "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.VerifyFail + s;
                        ShowMsgWithLine(strText, 5);

                        ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);
                        ////PictureBox_hexFile.Enabled= true;
                        ////TextBox_HexFile.Enabled = true;
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[5] = false;
                        LabelControl("FAIL", 5);
                        return;
                    }
                    ////PictureBox_hexFile.Enabled= true;
                    ////TextBox_HexFile.Enabled = true;
                }
                ProcessbarControl( 85, 5);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Encrypt.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.StartEncrypt;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess5_Obj.DisplayText_obj.StartEncrypt, 5);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.StartEncrypt;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.StartEncrypt, 5);
                    }
                    ProcessbarControl( 90, 5);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte Result = 0x00;
                    byte stats = ProgaramerOrderProcess5_Obj.SetEncrypt(SerialPort_Communiction5, ref Result);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        //ProgaramerOrderProcess5_Obj.serialportclose(SerialPort_Communiction5);
                        //if (Result == 0x00)
                        //{
                        //ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                        //MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess5_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Error);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.EncryptedSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.EncryptedSuccessful, 5);

                        ExcuteControlDisplay(true);
                        ProcessbarControl( 100, 5);
                        LabelControl("OK", 5);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[5] = false;
                        return;
                        //}

                    }
                    else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess5_Obj.DisplayText_obj.EncryptFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess5_Obj.DisplayText_obj.EncryptFail, 5);

                        //ProgaramerOrderProcess5_Obj.serialportclose(SerialPort_Communiction);
                        ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);//need to verify
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[5] = false;
                        LabelControl("FAIL", 5);
                        return;
                    }
                }
                //}
                ProcessbarControl( 100, 5);
                LabelControl("OK", 5);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                ExcuteControlDisplay(true);
                ExcuteControlFocus(true);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[5] = false;
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message, ProgaramerOrderProcess5_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                ExcuteControlDisplay(true);//1111111111
                                           //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "执行错误";
                                           //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                           //TextBox_Info.ScrollToCaret();
                LabelControl("FAIL", 5);
                ShowMsgWithLine("执行错误", 5);
                //ProgaramerOrderProcess5_Obj.ErrProcess(stats);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[5] = false;
                return;
            }

        }
        void Button_Execute_fun6()
        {
            try
            {
                if (SerialPort_Communiction6.BytesToRead > 0)
                {
                    byte[] ReceiveData = new byte[SerialPort_Communiction6.BytesToRead];
                    byte[] t = new byte[SerialPort_Communiction6.BytesToRead];
                    SerialPort_Communiction6.Read(ReceiveData, 0, SerialPort_Communiction6.BytesToRead);
                }
                //for (int ii = 0; ii < Convert.ToInt32(textBox1.Text,10); ii++)
                //{
                //label4.Text = ii.ToString();
//                Control.CheckForIllegalCrossThreadCalls = false;
                ProcessbarControl( 5,6);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Erase.Checked == true)
                {
                    if (RadioButton_ChipErase.Checked == true)
                    {
                        //byte[] CRdata = new byte[ProgaramerOrderProcess6_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                        //byte[] UIDdata = new byte[ProgaramerOrderProcess6_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.StartChipErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess6_Obj.DisplayText_obj.StartChipErase);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.StartChipErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.StartChipErase,6);
                        }

                        ProcessbarControl( 6,6);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        //byte[] CRadd = 
                        /*byte stats = ProgaramerOrderProcess6_Obj.Read(SerialPort_Communiction6, BitConverter.GetBytes(ProgaramerOrderProcess6_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata.Length, ref CRdata);

                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 16; i++)
                            {
                                cr += Convert.ToString(CRdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUserArea(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[6] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.MassEraseFail);
                            ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[6] = false;
                            return;
                        }*/
                        ProcessbarControl( 7, 6);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*stats = ProgaramerOrderProcess6_Obj.Read(SerialPort_Communiction6, BitConverter.GetBytes(ProgaramerOrderProcess6_Obj.SystemConfig_obj.UIDAdd[TargetMCUSlecet]), UIDdata.Length, ref UIDdata);
                        ProcessbarControl( 8,6);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 12; i++)
                            {
                                cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUID(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[6] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[6] = false;
                            return;
                        }
                        */
                        byte Result = 0;
                        byte stats = ProgaramerOrderProcess6_Obj.CheckEncrypt(SerialPort_Communiction6, ref Result);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            //ProgaramerOrderProcess6_Obj.serialportclose(SerialPort_Communiction6);
                            /*if (Result == 0x01)
                            {
                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.UploadFail + ": " + ProgaramerOrderProcess6_Obj.DisplayText_obj.Encrypted;
                                //ProgaramerOrderProcess6_Obj.serialportclose(SerialPort_Communiction6);
                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                TextBox_Info.ScrollToCaret();
                                //ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                                //MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess6_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                //MessageBoxIcon.Error);
                                Button_Upload.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[6] = false;
                                return;
                            }*/
                        }
                        else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.MassEraseFail;
                            ////ProgaramerOrderProcess6_Obj.serialportclose(SerialPort_Communiction6);
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.MassEraseFail,6);
                            ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                            ExcuteControlDisplay(true);
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.UploadSuccessful ;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[6] = false;
                            LabelControl("FAIL", 6);
                            return;
                        }

                        ProcessbarControl( 8, 6);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        stats = ProgaramerOrderProcess6_Obj.EraseFlash(SerialPort_Communiction6);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            /*
                            Button_Erase.Enabled = true;
                            //BusyFlagSub[6] = false;
                            ChipEraseFlag = true;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.ChipEraseSuccessful;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProcessbarControl( 100,6);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                            */

                        }
                        else
                        {
                            ExcuteControlDisplay(true);
                            //BusyFlag = false;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.MassEraseFail;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.MassEraseFail,6);
                            ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[6] = false;
                            LabelControl("FAIL", 6);
                            return;
                        }
                        ProcessbarControl( 8, 6);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*
                        stats = ProgaramerOrderProcess6_Obj.Write(SerialPort_Communiction6, BitConverter.GetBytes(ProgaramerOrderProcess6_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[6] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[6] = false;
                            return;
                        }
                        */
                        if (Result == 0x01)
                        {
                            stats = ProgaramerOrderProcess6_Obj.MCUReset(SerialPort_Communiction6);
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                //BusyFlagSub[6] = false;
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.MassEraseFail;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.MassEraseFail, 6);
                                ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[6] = false;
                                LabelControl("FAIL", 6);
                                return;
                            }

                            //ProgaramerOrderProcess6_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess6_Obj.SystemConfig_obj);
                            //CRdata = new byte[ProgaramerOrderProcess6_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                            //UIDdata = new byte[ProgaramerOrderProcess6_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                            if (true)
                            {
                                stats = ProgaramerOrderProcess6_Obj.ConnectProcess(SerialPort_Communiction6, ProgaramerOrderProcess6_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                          ComText6, frequnecy, Crystal);
                            }
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                ProgaramerOrderProcess6_Obj.DisConnectProcess(SerialPort_Communiction6);
                                ConnectControlDisplay(ConnectFlagSub[6]);
                                //Button_Connect.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[6] = false;
                                LabelControl("FAIL", 6);
                                ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                                return;
                            }
                        }
                        Button_Erase.Enabled = true;
                        //BusyFlagSub[6] = false;
                        ChipEraseFlag = true;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.ChipEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.ChipEraseSuccessful,6);
                        //ProcessbarControl( 100,6);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        checkAutoNumber = false;
                        ProcessbarControl( 10, 6);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    else if (RadioButton_PageErase.Checked == true)
                    {
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.StartPageErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess6_Obj.DisplayText_obj.StartPageErase);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.StartPageErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.StartPageErase,6);
                        }
                        double tep = 10 / ((HexData.Length + 511) / ProgaramerOrderProcess6_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                        for (int i = 0; i < (HexData.Length + 511) / ProgaramerOrderProcess6_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]; i++)
                        {
                            byte[] pageaddress = BitConverter.GetBytes((UInt32)(i * ProgaramerOrderProcess6_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]
                                                                       + ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]));
                            byte stats = ProgaramerOrderProcess6_Obj.ErasePage(SerialPort_Communiction6, pageaddress);
                            if (stats == (byte)eErrNumber.Succesful)
                            {
                                ChipEraseFlag = false;

                            }
                            else
                            {
                                string s = "";
                                if (stats == (byte)eErrNumber.Encrypted)
                                {
                                    s = ": " + ProgaramerOrderProcess6_Obj.DisplayText_obj.Encrypted;
                                }
                                ExcuteControlDisplay(true);
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.PageEraseFail + s;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.PageEraseFail + s,6);
                                ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                                ExcuteControlFocus(true);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[6] = false;
                                LabelControl("FAIL", 6);
                                return;
                            }
                            ProcessbarControl( (int)(i * tep), 6);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        }
                        checkAutoNumber = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.PageEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.PageEraseSuccessful,6);
                        //MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.PageEraseSuccessful, ProgaramerOrderProcess6_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);
                    }
                }
                ProcessbarControl( 10, 6);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";

                if (CheckBox_BlankCheck.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.StartBlankCheck;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess6_Obj.DisplayText_obj.StartBlankCheck);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.StartBlankCheck;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.StartBlankCheck,6);
                    }
                    ProcessbarControl( 12, 6);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte result = 0x00;
                    UInt32 Lenght = 0x00;
                    if (ChipEraseFlag == true)
                    {
                        Lenght = (UInt32)(ProgaramerOrderProcess6_Obj.SystemConfig_obj.PageCount[this.TargetMCUSlecet] *
                                     ProgaramerOrderProcess6_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    else
                    {
                        Lenght = (UInt32)(((HexData.Length + 511) / ProgaramerOrderProcess6_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]) *
                                     ProgaramerOrderProcess6_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    ProcessbarControl( 15, 6);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    UInt32 ErrAdd = 0x00;
                    byte stats = ProgaramerOrderProcess6_Obj.CheckBlank(SerialPort_Communiction6, BitConverter.GetBytes(ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]), Lenght, ref result, ref ErrAdd);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        string ss = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            ss = ": " + ProgaramerOrderProcess6_Obj.DisplayText_obj.Encrypted;
                        }
                        ExcuteControlDisplay(true);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.BlankCheckFail + ss;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.BlankCheckFail + ss,6);
                        ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[6] = false;
                        LabelControl("FAIL", 6);
                        return;
                    }
                    Thread.Sleep(100);
                    ProcessbarControl( 17, 6);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    string s = "";
                    if (result == 0x01)
                    {
                        s = ProgaramerOrderProcess6_Obj.DisplayText_obj.ResultBlank;
                    }
                    else if (result == 0x00)
                    {
                        s = ProgaramerOrderProcess6_Obj.DisplayText_obj.ResultNotBlank + "0x" + Convert.ToString(ErrAdd, 16).ToUpper().PadLeft(8, '0');
                    }
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.BlankCheckSuccessful + s;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.BlankCheckSuccessful + s,6);
                    //MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.BlankCheckSuccessful + s, ProgaramerOrderProcess6_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                    //MessageBoxIcon.Warning);
                }
                ProcessbarControl( 20, 6);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Program.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[6] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;

                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.StartProgram;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess6_Obj.DisplayText_obj.StartProgram);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.StartProgram;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.StartProgram,6);
                    }
                    ProcessbarControl( 20, 6);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (CheckBox_AutoNumber.Checked == true)
                    {
                        if (AutoNumberEnable == false)
                        {
                            MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess6_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            ////TextBox_HexFile.Enabled = true;
                            ////PictureBox_hexFile.Enabled= true;
                            ExcuteControlDisplay(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[6] = false;
                            return;
                        }
                        else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                DialogResult dr = MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.OverHexData, ProgaramerOrderProcess6_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    ExcuteControlDisplay(true);
                                    ExcuteControlFocus(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[6] = false;
                                    return;
                                }
                                else if (dr == DialogResult.Yes)
                                {
                                    byte[] CurrentNumData = BitConverter.GetBytes(CurrentNumber);
                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess6_Obj.Write(SerialPort_Communiction6, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[6] = false;
                                            LabelControl("FAIL", 6);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess6_Obj.Write(SerialPort_Communiction6, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[6] = false;
                                            LabelControl("FAIL", 6);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess6_Obj.Write(SerialPort_Communiction6, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[6] = false;
                                            LabelControl("FAIL", 6);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                stats = ProgaramerOrderProcess6_Obj.Write(SerialPort_Communiction6, BitConverter.GetBytes((UInt32)(NumberAdderss)), BitConverter.GetBytes((UInt32)(CurrentNumber)));
                                if (stats == (byte)eErrNumber.Succesful)
                                {

                                }
                                else
                                {
                                    ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                    ////TextBox_HexFile.Enabled = true;
                                    ////PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[6] = false;
                                    LabelControl("FAIL", 6);
                                    return;
                                }
                            }
                            checkAutoNumber = true;
                            NumberAdd = NumberAdderss;
                        }
                    }
                    ProcessbarControl( 25, 6);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    TotalCount++;
                    stats = 0x00;
                    byte[] sentdata = new byte[512];
                    int count = (int)((HexData.Length + 511) / ProgaramerOrderProcess6_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    int tep = 45000 / count;
                    for (int i = 0; i < count; i++)
                    {
                        if (i == (count - 1))
                        {
                            sentdata = new byte[HexData.Length - (i * 512)];
                            Array.Copy(HexData, i * 512, sentdata, 0, HexData.Length - (i * 512));
                        }
                        else
                        {
                            Array.Copy(HexData, i * 512, sentdata, 0, 512);
                        }
                        stats = ProgaramerOrderProcess6_Obj.Write(SerialPort_Communiction6, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i * 512)), sentdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            string s = "";
                            if (stats == (byte)eErrNumber.Encrypted)
                            {
                                s = ": " + ProgaramerOrderProcess6_Obj.DisplayText_obj.Encrypted;
                            }
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.ProgramFail + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.ProgramFail + s,6);
                            FailCount++;
                            ExcuteControlDisplay(true);
                            ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                            //TextBox_Length.Text = FailCount.ToString();
                            ////PictureBox_hexFile.Enabled= true;
                            ////TextBox_HexFile.Enabled = true;
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[6] = false;
                            LabelControl("FAIL", 6);
                            return;
                        }
                        ProcessbarControl( (int)(25 + ((i * tep) / 1000)), 6);
                        if (bStop6 == true)
                        {
                            return;
                        }
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    if (AutoNumberEnable == true && CheckBox_AutoNumber.Checked == true)
                    {
                        HistoryNumber = CurrentNumber;
                        if (CheckBox_AutoNumber.Checked == true)
                        {
                            CurrentNumber += NumberInterval;
                        }

                        if (!(CurrentNumber < (StartNumber + (NumberLength) * NumberInterval)))
                        {
                            MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.AutoNumberFinsh, ProgaramerOrderProcess6_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            CheckBox_AutoNumber.Checked = false;
                            AutoNumberEnable = false;
                            Button_OpenClose.Text = ProgaramerOrderProcess6_Obj.DisplayText_obj.AutoNumberOpen;
                            Button_OpenClose.Enabled = false;
                        }
                        else
                        {
                            Label_CurrentNumbers.Text = CurrentNumber.ToString();
                        }
                        Label_HistoryNumbers.Text = HistoryNumber.ToString();
                    }
                    ////PictureBox_hexFile.Enabled= true;
                    ////TextBox_HexFile.Enabled = true;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.ProgramSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.ProgramSuccessful,6);
                    //TextBox_NumberAddress.Text = PassCount.ToString();
                    //TextBox_StartNumber.Text = TotalCount.ToString();
                }
                ProcessbarControl( 70, 6);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Verify.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[6] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.StartVerify;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess6_Obj.DisplayText_obj.StartVerify);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.StartVerify;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.StartVerify,6);
                    }
                    ProcessbarControl( 75, 6);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (checkAutoNumber == true)
                    {
                        byte[] CurrentNumData = BitConverter.GetBytes((UInt32)HistoryNumber);
                        //if (AutoNumberEnable == false)
                        //if (false)
                        //{
                        //    MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess6_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        //    //TextBox_HexFile.Enabled = true;
                        //    //PictureBox_hexFile.Enabled= true;
                        //    ExcuteControlDisplay(true);
                        //    Control.CheckForIllegalCrossThreadCalls = true;
                        //    BusyFlagSub[6] = false;
                        //    return;
                        //}
                        //else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                /*DialogResult dr = MessageBox.Show("", "", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    //TextBox_HexFile.Enabled = true;
                                    //PictureBox_hexFile.Enabled= true;
                                    Button_Execute.Enabled = true;
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[6] = false;
                                    return;
                                }
                                else */
                                if (true)
                                {

                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess6_Obj.Verify(SerialPort_Communiction6, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[6] = false;
                                            LabelControl("FAIL", 6);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess6_Obj.Verify(SerialPort_Communiction6, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            ////TextBox_HexFile.Enabled = true;
                                            ////PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[6] = false;
                                            LabelControl("FAIL", 6);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess6_Obj.Verify(SerialPort_Communiction6, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[6] = false;
                                            LabelControl("FAIL", 6);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                byte[] recdata = new byte[2];
                                stats = ProgaramerOrderProcess6_Obj.Verify(SerialPort_Communiction6, BitConverter.GetBytes((UInt32)(NumberAdderss)), recdata.Length, ref recdata);
                                if (stats == (byte)eErrNumber.Succesful)
                                {
                                    //string s = "";
                                    /*
                                    if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff000000) >> 24) + ((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                    {
                                        s = ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifyMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    else
                                    {
                                        s = ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifyNotMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifySuccessful + s;
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    */
                                }
                                else
                                {
                                    ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                    //TextBox_HexFile.Enabled = true;
                                    //PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[6] = false;
                                    LabelControl("FAIL", 6);
                                    return;
                                }
                            }
                        }
                    }

                    ProcessbarControl( 80, 6);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte[] checksumdata = new byte[2];
                    stats = ProgaramerOrderProcess6_Obj.Verify(SerialPort_Communiction6, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess6_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet])), HexData.Length, ref checksumdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        string s = "";
                        if (((checksumdata[0] << 8) + checksumdata[1]) == ProgaramerOrderProcess6_Obj.CheckSumUInt16(HexData, 0, HexData.Length))
                        {
                            s = ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifyMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsg(strText,6);
                        }
                        else
                        {
                            s = ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifyNotMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifySuccessful + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsgWithLine(strText,6);
                            //break;
                        }
                        //BusyFlagSub[6] = false;
                        ChipEraseFlag = true;
                        //MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifySuccessful + s, ProgaramerOrderProcess6_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);

                        //Button_Execute.Enabled = true;
                    }
                    else
                    {
                        string s = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            s = ": " + ProgaramerOrderProcess6_Obj.DisplayText_obj.Encrypted;
                        }
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifyFail + s;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        string strText = "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.VerifyFail + s;
                        ShowMsgWithLine(strText,6);

                        ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);
                        //PictureBox_hexFile.Enabled= true;
                        //TextBox_HexFile.Enabled = true;
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[6] = false;
                        LabelControl("FAIL", 6);
                        return;
                    }
                    //PictureBox_hexFile.Enabled= true;
                    //TextBox_HexFile.Enabled = true;
                }
                ProcessbarControl( 85, 6);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Encrypt.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.StartEncrypt;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess6_Obj.DisplayText_obj.StartEncrypt);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.StartEncrypt;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.StartEncrypt,6);
                    }
                    ProcessbarControl( 90, 6);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte Result = 0x00;
                    byte stats = ProgaramerOrderProcess6_Obj.SetEncrypt(SerialPort_Communiction6, ref Result);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        //ProgaramerOrderProcess6_Obj.serialportclose(SerialPort_Communiction6);
                        //if (Result == 0x00)
                        //{
                        //ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                        //MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess6_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Error);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.EncryptedSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.EncryptedSuccessful,6);

                        ExcuteControlDisplay(true);
                        ProcessbarControl( 100, 6);
                        LabelControl("OK", 6);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[6] = false;
                        return;
                        //}

                    }
                    else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess6_Obj.DisplayText_obj.EncryptFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess6_Obj.DisplayText_obj.EncryptFail,6);

                        //ProgaramerOrderProcess6_Obj.serialportclose(SerialPort_Communiction);
                        ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);//need to verify
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[6] = false;
                        LabelControl("FAIL", 6);
                        return;
                    }
                }
                //}
                ProcessbarControl( 100, 6);
                LabelControl("OK", 6);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                ExcuteControlDisplay(true);
                ExcuteControlFocus(true);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[6] = false;
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message, ProgaramerOrderProcess6_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                ExcuteControlDisplay(true);//1111111111
                                           //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "执行错误";
                                           //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                           //TextBox_Info.ScrollToCaret();
                LabelControl("FAIL", 6);
                ShowMsgWithLine("执行错误",6);
                //ProgaramerOrderProcess6_Obj.ErrProcess(stats);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[6] = false;
                return;
            }

        }
        void Button_Execute_fun7()
        {
            try
            {
                if (SerialPort_Communiction7.BytesToRead > 0)
                {
                    byte[] ReceiveData = new byte[SerialPort_Communiction7.BytesToRead];
                    byte[] t = new byte[SerialPort_Communiction7.BytesToRead];
                    SerialPort_Communiction7.Read(ReceiveData, 0, SerialPort_Communiction7.BytesToRead);
                }
                //for (int ii = 0; ii < Convert.ToInt32(textBox1.Text,10); ii++)
                //{
                //label4.Text = ii.ToString();
//                Control.CheckForIllegalCrossThreadCalls = false;
                ProcessbarControl( 5, 7);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Erase.Checked == true)
                {
                    if (RadioButton_ChipErase.Checked == true)
                    {
                        //byte[] CRdata = new byte[ProgaramerOrderProcess7_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                        //byte[] UIDdata = new byte[ProgaramerOrderProcess7_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.StartChipErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess7_Obj.DisplayText_obj.StartChipErase);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.StartChipErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.StartChipErase,7);
                        }

                        ProcessbarControl( 6, 7);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        //byte[] CRadd = 
                        /*byte stats = ProgaramerOrderProcess7_Obj.Read(SerialPort_Communiction7, BitConverter.GetBytes(ProgaramerOrderProcess7_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata.Length, ref CRdata);

                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 16; i++)
                            {
                                cr += Convert.ToString(CRdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUserArea(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[7] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.MassEraseFail);
                            ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[7] = false;
                            return;
                        }*/
                        ProcessbarControl( 7, 7);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*stats = ProgaramerOrderProcess7_Obj.Read(SerialPort_Communiction7, BitConverter.GetBytes(ProgaramerOrderProcess7_Obj.SystemConfig_obj.UIDAdd[TargetMCUSlecet]), UIDdata.Length, ref UIDdata);
                        ProcessbarControl( 8, 7);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 12; i++)
                            {
                                cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUID(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[7] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[7] = false;
                            return;
                        }
                        */
                        byte Result = 0;
                        byte stats = ProgaramerOrderProcess7_Obj.CheckEncrypt(SerialPort_Communiction7, ref Result);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            //ProgaramerOrderProcess7_Obj.serialportclose(SerialPort_Communiction7);
                            /*if (Result == 0x01)
                            {
                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.UploadFail + ": " + ProgaramerOrderProcess7_Obj.DisplayText_obj.Encrypted;
                                //ProgaramerOrderProcess7_Obj.serialportclose(SerialPort_Communiction7);
                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                TextBox_Info.ScrollToCaret();
                                //ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                                //MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess7_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                //MessageBoxIcon.Error);
                                Button_Upload.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[7] = false;
                                return;
                            }*/
                        }
                        else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.MassEraseFail;
                            ////ProgaramerOrderProcess7_Obj.serialportclose(SerialPort_Communiction7);
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.MassEraseFail,7);
                            ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                            ExcuteControlDisplay(true);
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.UploadSuccessful ;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[7] = false;
                            LabelControl("FAIL", 7);
                            return;
                        }

                        ProcessbarControl( 8, 7);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        stats = ProgaramerOrderProcess7_Obj.EraseFlash(SerialPort_Communiction7);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            /*
                            Button_Erase.Enabled = true;
                            //BusyFlagSub[7] = false;
                            ChipEraseFlag = true;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.ChipEraseSuccessful;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProcessbarControl( 100, 7);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                            */

                        }
                        else
                        {
                            ExcuteControlDisplay(true);
                            //BusyFlag = false;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.MassEraseFail;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.MassEraseFail,7);
                            ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[7] = false;
                            LabelControl("FAIL", 7);
                            return;
                        }
                        ProcessbarControl( 8, 7);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*
                        stats = ProgaramerOrderProcess7_Obj.Write(SerialPort_Communiction7, BitConverter.GetBytes(ProgaramerOrderProcess7_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[7] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[7] = false;
                            return;
                        }
                        */
                        if (Result == 0x01)
                        {
                            stats = ProgaramerOrderProcess7_Obj.MCUReset(SerialPort_Communiction7);
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                //BusyFlagSub[7] = false;
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.MassEraseFail;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.MassEraseFail, 7);
                                ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[7] = false;
                                LabelControl("FAIL", 7);
                                return;
                            }

                            //ProgaramerOrderProcess7_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess7_Obj.SystemConfig_obj);
                            //CRdata = new byte[ProgaramerOrderProcess7_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                            //UIDdata = new byte[ProgaramerOrderProcess7_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                            if (true)
                            {
                                stats = ProgaramerOrderProcess7_Obj.ConnectProcess(SerialPort_Communiction7, ProgaramerOrderProcess7_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                           ComText7, frequnecy, Crystal);
                            }
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                ProgaramerOrderProcess7_Obj.DisConnectProcess(SerialPort_Communiction7);
                                ConnectControlDisplay(ConnectFlagSub[7]);
                                //Button_Connect.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[7] = false;
                                LabelControl("FAIL", 7);
                                ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                                return;
                            }
                        }
                        Button_Erase.Enabled = true;
                        //BusyFlagSub[7] = false;
                        ChipEraseFlag = true;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.ChipEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.ChipEraseSuccessful,7);
                        //ProcessbarControl( 100, 7);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        checkAutoNumber = false;
                        ProcessbarControl( 10, 7);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    else if (RadioButton_PageErase.Checked == true)
                    {
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.StartPageErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess7_Obj.DisplayText_obj.StartPageErase);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.StartPageErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.StartPageErase,7);
                        }
                        double tep = 10 / ((HexData.Length + 511) / ProgaramerOrderProcess7_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                        for (int i = 0; i < (HexData.Length + 511) / ProgaramerOrderProcess7_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]; i++)
                        {
                            byte[] pageaddress = BitConverter.GetBytes((UInt32)(i * ProgaramerOrderProcess7_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]
                                                                       + ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]));
                            byte stats = ProgaramerOrderProcess7_Obj.ErasePage(SerialPort_Communiction7, pageaddress);
                            if (stats == (byte)eErrNumber.Succesful)
                            {
                                ChipEraseFlag = false;

                            }
                            else
                            {
                                string s = "";
                                if (stats == (byte)eErrNumber.Encrypted)
                                {
                                    s = ": " + ProgaramerOrderProcess7_Obj.DisplayText_obj.Encrypted;
                                }
                                ExcuteControlDisplay(true);
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.PageEraseFail + s;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.PageEraseFail + s,7);
                                ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                                ExcuteControlFocus(true);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[7] = false;
                                LabelControl("FAIL", 7);
                                return;
                            }
                            ProcessbarControl( (int)(i * tep), 7);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        }
                        checkAutoNumber = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.PageEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.PageEraseSuccessful,7);
                        //MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.PageEraseSuccessful, ProgaramerOrderProcess7_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);
                    }
                }
                ProcessbarControl( 10, 7);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";

                if (CheckBox_BlankCheck.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.StartBlankCheck;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess7_Obj.DisplayText_obj.StartBlankCheck);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.StartBlankCheck;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.StartBlankCheck,7);
                    }
                    ProcessbarControl( 12, 7);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte result = 0x00;
                    UInt32 Lenght = 0x00;
                    if (ChipEraseFlag == true)
                    {
                        Lenght = (UInt32)(ProgaramerOrderProcess7_Obj.SystemConfig_obj.PageCount[this.TargetMCUSlecet] *
                                     ProgaramerOrderProcess7_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    else
                    {
                        Lenght = (UInt32)(((HexData.Length + 511) / ProgaramerOrderProcess7_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]) *
                                     ProgaramerOrderProcess7_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    ProcessbarControl( 15, 7);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    UInt32 ErrAdd = 0x00;
                    byte stats = ProgaramerOrderProcess7_Obj.CheckBlank(SerialPort_Communiction7, BitConverter.GetBytes(ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]), Lenght, ref result, ref ErrAdd);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        string ss = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            ss = ": " + ProgaramerOrderProcess7_Obj.DisplayText_obj.Encrypted;
                        }
                        ExcuteControlDisplay(true);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.BlankCheckFail + ss;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.BlankCheckFail + ss,7);
                        ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[7] = false;
                        LabelControl("FAIL", 7);
                        return;
                    }
                    Thread.Sleep(100);
                    ProcessbarControl( 17, 7);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    string s = "";
                    if (result == 0x01)
                    {
                        s = ProgaramerOrderProcess7_Obj.DisplayText_obj.ResultBlank;
                    }
                    else if (result == 0x00)
                    {
                        s = ProgaramerOrderProcess7_Obj.DisplayText_obj.ResultNotBlank + "0x" + Convert.ToString(ErrAdd, 16).ToUpper().PadLeft(8, '0');
                    }
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.BlankCheckSuccessful + s;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.BlankCheckSuccessful + s,7);
                    //MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.BlankCheckSuccessful + s, ProgaramerOrderProcess7_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                    //MessageBoxIcon.Warning);
                }
                ProcessbarControl( 20, 7);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Program.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[7] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;

                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.StartProgram;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess7_Obj.DisplayText_obj.StartProgram);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.StartProgram;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.StartProgram,7);
                    }
                    ProcessbarControl( 20, 7);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (CheckBox_AutoNumber.Checked == true)
                    {
                        if (AutoNumberEnable == false)
                        {
                            MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess7_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            //TextBox_HexFile.Enabled = true;
                            //PictureBox_hexFile.Enabled= true;
                            ExcuteControlDisplay(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[7] = false;
                            return;
                        }
                        else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                DialogResult dr = MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.OverHexData, ProgaramerOrderProcess7_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    ExcuteControlDisplay(true);
                                    ExcuteControlFocus(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[7] = false;
                                    return;
                                }
                                else if (dr == DialogResult.Yes)
                                {
                                    byte[] CurrentNumData = BitConverter.GetBytes(CurrentNumber);
                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess7_Obj.Write(SerialPort_Communiction7, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[7] = false;
                                            LabelControl("FAIL", 7);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess7_Obj.Write(SerialPort_Communiction7, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[7] = false;
                                            LabelControl("FAIL", 7);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess7_Obj.Write(SerialPort_Communiction7, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[7] = false;
                                            LabelControl("FAIL", 7);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                stats = ProgaramerOrderProcess7_Obj.Write(SerialPort_Communiction7, BitConverter.GetBytes((UInt32)(NumberAdderss)), BitConverter.GetBytes((UInt32)(CurrentNumber)));
                                if (stats == (byte)eErrNumber.Succesful)
                                {

                                }
                                else
                                {
                                    ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                    //TextBox_HexFile.Enabled = true;
                                    //PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[7] = false;
                                    LabelControl("FAIL", 7);
                                    return;
                                }
                            }
                            checkAutoNumber = true;
                            NumberAdd = NumberAdderss;
                        }
                    }
                    ProcessbarControl( 25, 7);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    TotalCount++;
                    stats = 0x00;
                    byte[] sentdata = new byte[512];
                    int count = (int)((HexData.Length + 511) / ProgaramerOrderProcess7_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    int tep = 45000 / count;
                    for (int i = 0; i < count; i++)
                    {
                        if (i == (count - 1))
                        {
                            sentdata = new byte[HexData.Length - (i * 512)];
                            Array.Copy(HexData, i * 512, sentdata, 0, HexData.Length - (i * 512));
                        }
                        else
                        {
                            Array.Copy(HexData, i * 512, sentdata, 0, 512);
                        }
                        stats = ProgaramerOrderProcess7_Obj.Write(SerialPort_Communiction7, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i * 512)), sentdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            string s = "";
                            if (stats == (byte)eErrNumber.Encrypted)
                            {
                                s = ": " + ProgaramerOrderProcess7_Obj.DisplayText_obj.Encrypted;
                            }
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.ProgramFail + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.ProgramFail + s,7);
                            FailCount++;
                            ExcuteControlDisplay(true);
                            ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                            //TextBox_Length.Text = FailCount.ToString();
                            //PictureBox_hexFile.Enabled= true;
                            //TextBox_HexFile.Enabled = true;
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[7] = false;
                            LabelControl("FAIL", 7);
                            return;
                        }
                        ProcessbarControl( (int)(25 + ((i * tep) / 1000)), 7);
                        if (bStop7 == true)
                        {
                            return;
                        }
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    if (AutoNumberEnable == true && CheckBox_AutoNumber.Checked == true)
                    {
                        HistoryNumber = CurrentNumber;
                        if (CheckBox_AutoNumber.Checked == true)
                        {
                            CurrentNumber += NumberInterval;
                        }

                        if (!(CurrentNumber < (StartNumber + (NumberLength) * NumberInterval)))
                        {
                            MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.AutoNumberFinsh, ProgaramerOrderProcess7_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            CheckBox_AutoNumber.Checked = false;
                            AutoNumberEnable = false;
                            Button_OpenClose.Text = ProgaramerOrderProcess7_Obj.DisplayText_obj.AutoNumberOpen;
                            Button_OpenClose.Enabled = false;
                        }
                        else
                        {
                            Label_CurrentNumbers.Text = CurrentNumber.ToString();
                        }
                        Label_HistoryNumbers.Text = HistoryNumber.ToString();
                    }
                    //PictureBox_hexFile.Enabled= true;
                    //TextBox_HexFile.Enabled = true;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.ProgramSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.ProgramSuccessful,7);
                    //TextBox_NumberAddress.Text = PassCount.ToString();
                    //TextBox_StartNumber.Text = TotalCount.ToString();
                }
                ProcessbarControl( 70, 7);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Verify.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[7] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.StartVerify;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess7_Obj.DisplayText_obj.StartVerify);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.StartVerify;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.StartVerify,7);
                    }
                    ProcessbarControl( 75, 7);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (checkAutoNumber == true)
                    {
                        byte[] CurrentNumData = BitConverter.GetBytes((UInt32)HistoryNumber);
                        //if (AutoNumberEnable == false)
                        //if (false)
                        //{
                        //    MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess7_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        //    //TextBox_HexFile.Enabled = true;
                        //    //PictureBox_hexFile.Enabled= true;
                        //    ExcuteControlDisplay(true);
                        //    Control.CheckForIllegalCrossThreadCalls = true;
                        //    BusyFlagSub[7] = false;
                        //    return;
                        //}
                        //else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                /*DialogResult dr = MessageBox.Show("", "", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    //TextBox_HexFile.Enabled = true;
                                    //PictureBox_hexFile.Enabled= true;
                                    Button_Execute.Enabled = true;
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[7] = false;
                                    return;
                                }
                                else */
                                if (true)
                                {

                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess7_Obj.Verify(SerialPort_Communiction7, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[7] = false;
                                            LabelControl("FAIL", 7);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess7_Obj.Verify(SerialPort_Communiction7, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[7] = false;
                                            LabelControl("FAIL", 7);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess7_Obj.Verify(SerialPort_Communiction7, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[7] = false;
                                            LabelControl("FAIL", 7);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                byte[] recdata = new byte[2];
                                stats = ProgaramerOrderProcess7_Obj.Verify(SerialPort_Communiction7, BitConverter.GetBytes((UInt32)(NumberAdderss)), recdata.Length, ref recdata);
                                if (stats == (byte)eErrNumber.Succesful)
                                {
                                    //string s = "";
                                    /*
                                    if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff000000) >> 24) + ((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                    {
                                        s = ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifyMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    else
                                    {
                                        s = ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifyNotMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifySuccessful + s;
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    */
                                }
                                else
                                {
                                    ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                    //TextBox_HexFile.Enabled = true;
                                    //PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[7] = false;
                                    LabelControl("FAIL", 7);
                                    return;
                                }
                            }
                        }
                    }

                    ProcessbarControl( 80, 7);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte[] checksumdata = new byte[2];
                    stats = ProgaramerOrderProcess7_Obj.Verify(SerialPort_Communiction7, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess7_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet])), HexData.Length, ref checksumdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        string s = "";
                        if (((checksumdata[0] << 8) + checksumdata[1]) == ProgaramerOrderProcess7_Obj.CheckSumUInt16(HexData, 0, HexData.Length))
                        {
                            s = ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifyMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsg(strText,7);
                        }
                        else
                        {
                            s = ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifyNotMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifySuccessful + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsgWithLine(strText,7);
                            //break;
                        }
                        //BusyFlagSub[7] = false;
                        ChipEraseFlag = true;
                        //MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifySuccessful + s, ProgaramerOrderProcess7_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);

                        //Button_Execute.Enabled = true;
                    }
                    else
                    {
                        string s = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            s = ": " + ProgaramerOrderProcess7_Obj.DisplayText_obj.Encrypted;
                        }
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifyFail + s;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        string strText = "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.VerifyFail + s;
                        ShowMsgWithLine(strText,7);

                        ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);
                        //PictureBox_hexFile.Enabled= true;
                        //TextBox_HexFile.Enabled = true;
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[7] = false;
                        LabelControl("FAIL", 7);
                        return;
                    }
                    //PictureBox_hexFile.Enabled= true;
                    //TextBox_HexFile.Enabled = true;
                }
                ProcessbarControl( 85, 7);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Encrypt.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.StartEncrypt;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess7_Obj.DisplayText_obj.StartEncrypt);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.StartEncrypt;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.StartEncrypt,7);
                    }
                    ProcessbarControl( 90, 7);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte Result = 0x00;
                    byte stats = ProgaramerOrderProcess7_Obj.SetEncrypt(SerialPort_Communiction7, ref Result);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        //ProgaramerOrderProcess7_Obj.serialportclose(SerialPort_Communiction7);
                        //if (Result == 0x00)
                        //{
                        //ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                        //MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess7_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Error);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.EncryptedSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.EncryptedSuccessful,7);

                        ExcuteControlDisplay(true);

                        ProcessbarControl( 100, 7);
                        LabelControl("OK", 7);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[7] = false;
                        return;
                        //}

                    }
                    else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess7_Obj.DisplayText_obj.EncryptFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess7_Obj.DisplayText_obj.EncryptFail,7);

                        //ProgaramerOrderProcess7_Obj.serialportclose(SerialPort_Communiction);
                        ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);//need to verify
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[7] = false;
                        LabelControl("FAIL", 7);
                        return;
                    }
                }
                //}
                ProcessbarControl( 100, 7);
                LabelControl("OK", 7);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                ExcuteControlDisplay(true);
                ExcuteControlFocus(true);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[7] = false;
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message, ProgaramerOrderProcess7_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                ExcuteControlDisplay(true);//1111111111
                                           //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "执行错误";
                                           //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                           //TextBox_Info.ScrollToCaret();
                LabelControl("FAIL", 7);
                ShowMsgWithLine("执行错误",7);
                //ProgaramerOrderProcess7_Obj.ErrProcess(stats);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[7] = false;
                return;
            }

        }
        void Button_Execute_fun8()
        {
            try
            {
                if (SerialPort_Communiction8.BytesToRead > 0)
                {
                    byte[] ReceiveData = new byte[SerialPort_Communiction8.BytesToRead];
                    byte[] t = new byte[SerialPort_Communiction8.BytesToRead];
                    SerialPort_Communiction8.Read(ReceiveData, 0, SerialPort_Communiction8.BytesToRead);
                }
                //for (int ii = 0; ii < Convert.ToInt32(textBox1.Text,10); ii++)
                //{
                //label4.Text = ii.ToString();
                //Control.CheckForIllegalCrossThreadCalls = false;
                ProcessbarControl( 5, 8);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Erase.Checked == true)
                {
                    if (RadioButton_ChipErase.Checked == true)
                    {
                        //byte[] CRdata = new byte[ProgaramerOrderProcess8_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                        //byte[] UIDdata = new byte[ProgaramerOrderProcess8_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.StartChipErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess8_Obj.DisplayText_obj.StartChipErase);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.StartChipErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.StartChipErase,8);
                        }
                        if (bStop8 == true)
                        {
                            return;
                        }
                        ProcessbarControl( 6, 8);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        //byte[] CRadd = 
                        /*byte stats = ProgaramerOrderProcess8_Obj.Read(SerialPort_Communiction8, BitConverter.GetBytes(ProgaramerOrderProcess8_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata.Length, ref CRdata);

                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 16; i++)
                            {
                                cr += Convert.ToString(CRdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUserArea(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[8] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.MassEraseFail);
                            ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[8] = false;
                            return;
                        }*/
                        ProcessbarControl( 7, 8);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*stats = ProgaramerOrderProcess8_Obj.Read(SerialPort_Communiction8, BitConverter.GetBytes(ProgaramerOrderProcess8_Obj.SystemConfig_obj.UIDAdd[TargetMCUSlecet]), UIDdata.Length, ref UIDdata);
                        ProcessbarControl( 8, 8);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            XMLProcess x = new XMLProcess();
                            string cr = "";
                            for (int i = 0; i < 12; i++)
                            {
                                cr += Convert.ToString(UIDdata[i], 16).PadLeft(2, '0');
                            }
                            x.SaveUID(cr, TargetMCUSlecet);
                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[8] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[8] = false;
                            return;
                        }
                        */
                        byte Result = 0;
                        byte stats = ProgaramerOrderProcess8_Obj.CheckEncrypt(SerialPort_Communiction8, ref Result);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            //ProgaramerOrderProcess8_Obj.serialportclose(SerialPort_Communiction8);
                            /*if (Result == 0x01)
                            {
                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.UploadFail + ": " + ProgaramerOrderProcess8_Obj.DisplayText_obj.Encrypted;
                                //ProgaramerOrderProcess8_Obj.serialportclose(SerialPort_Communiction8);
                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                TextBox_Info.ScrollToCaret();
                                //ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                                //MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess8_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                //MessageBoxIcon.Error);
                                Button_Upload.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[8] = false;
                                return;
                            }*/
                        }
                        else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.MassEraseFail;
                            ////ProgaramerOrderProcess8_Obj.serialportclose(SerialPort_Communiction8);
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.MassEraseFail,8);
                            ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                            ExcuteControlDisplay(true);
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.UploadSuccessful ;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[8] = false;
                            LabelControl("FAIL", 8);
                            return;
                        }

                        ProcessbarControl( 8, 8);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        stats = ProgaramerOrderProcess8_Obj.EraseFlash(SerialPort_Communiction8);
                        if (stats == (byte)eErrNumber.Succesful)
                        {
                            /*
                            Button_Erase.Enabled = true;
                            //BusyFlagSub[8] = false;
                            ChipEraseFlag = true;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.ChipEraseSuccessful;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProcessbarControl( 100, 8);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                            */

                        }
                        else
                        {
                            ExcuteControlDisplay(true);
                            //BusyFlag = false;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.MassEraseFail;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.MassEraseFail,8);
                            ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[8] = false;
                            LabelControl("FAIL", 8);
                            return;
                        }
                        ProcessbarControl( 8, 8);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        /*
                        stats = ProgaramerOrderProcess8_Obj.Write(SerialPort_Communiction8, BitConverter.GetBytes(ProgaramerOrderProcess8_Obj.SystemConfig_obj.CRTrimmingAdd[TargetMCUSlecet]), CRdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            Button_Execute.Enabled = true;
                            //BusyFlagSub[8] = false;
                            TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.MassEraseFail;
                            TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            TextBox_Info.ScrollToCaret();
                            ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                            Button_Execute.Focus();
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[8] = false;
                            return;
                        }
                        */
                        if (Result == 0x01)
                        {
                            stats = ProgaramerOrderProcess8_Obj.MCUReset(SerialPort_Communiction8);
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                //BusyFlagSub[8] = false;
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.MassEraseFail;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.MassEraseFail, 8);
                                ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[8] = false;
                                LabelControl("FAIL", 8);
                                return;
                            }

                            //ProgaramerOrderProcess8_Obj.XMLProcess_obj.GetSystemConfig(ref ProgaramerOrderProcess8_Obj.SystemConfig_obj);
                            //CRdata = new byte[ProgaramerOrderProcess8_Obj.SystemConfig_obj.CRTrimmingLength[TargetMCUSlecet]];
                            //UIDdata = new byte[ProgaramerOrderProcess8_Obj.SystemConfig_obj.UIDLength[TargetMCUSlecet]];
                            if (true)
                            {
                                stats = ProgaramerOrderProcess8_Obj.ConnectProcess(SerialPort_Communiction8, ProgaramerOrderProcess8_Obj.SystemConfig_obj.RAMCodeAdd[TargetMCUSlecet],
                                                                           ComText8, frequnecy, Crystal);
                            }
                            if (stats == (byte)eErrNumber.Succesful)
                            {

                            }
                            else
                            {
                                ExcuteControlDisplay(true);
                                ProgaramerOrderProcess8_Obj.DisConnectProcess(SerialPort_Communiction8);
                                ConnectControlDisplay(ConnectFlagSub[8]);
                                //Button_Connect.Enabled = true;
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[8] = false;
                                LabelControl("FAIL", 8);
                                ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                                return;
                            }
                        }
                        Button_Erase.Enabled = true;
                        //BusyFlagSub[8] = false;
                        ChipEraseFlag = true;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.ChipEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.ChipEraseSuccessful,8);
                        //ProcessbarControl( 100, 8);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        checkAutoNumber = false;
                        ProcessbarControl( 10, 8);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    else if (RadioButton_PageErase.Checked == true)
                    {
                        //if (TextBox_Info.Text == "")
                        //{
                        //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.StartPageErase;
                        //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //    //TextBox_Info.ScrollToCaret();
                        //    ShowMsg(ProgaramerOrderProcess8_Obj.DisplayText_obj.StartPageErase);
                        //}
                        //else
                        {
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.StartPageErase;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.StartPageErase,8);
                        }
                        double tep = 10 / ((HexData.Length + 511) / ProgaramerOrderProcess8_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                        for (int i = 0; i < (HexData.Length + 511) / ProgaramerOrderProcess8_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]; i++)
                        {
                            byte[] pageaddress = BitConverter.GetBytes((UInt32)(i * ProgaramerOrderProcess8_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]
                                                                       + ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]));
                            byte stats = ProgaramerOrderProcess8_Obj.ErasePage(SerialPort_Communiction8, pageaddress);
                            if (stats == (byte)eErrNumber.Succesful)
                            {
                                ChipEraseFlag = false;

                            }
                            else
                            {
                                string s = "";
                                if (stats == (byte)eErrNumber.Encrypted)
                                {
                                    s = ": " + ProgaramerOrderProcess8_Obj.DisplayText_obj.Encrypted;
                                }
                                ExcuteControlDisplay(true);
                                //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.PageEraseFail + s;
                                //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                //TextBox_Info.ScrollToCaret();
                                ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                                ExcuteControlFocus(true);
                                Control.CheckForIllegalCrossThreadCalls = true;
                                BusyFlagSub[8] = false;
                                LabelControl("FAIL", 8);
                                return;
                            }
                            ProcessbarControl( (int)(i * tep),8);
                            ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        }
                        checkAutoNumber = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.PageEraseSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.PageEraseSuccessful,8);
                        //MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.PageEraseSuccessful, ProgaramerOrderProcess8_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);
                    }
                }
                ProcessbarControl( 10, 8);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";

                if (CheckBox_BlankCheck.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.StartBlankCheck;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess8_Obj.DisplayText_obj.StartBlankCheck);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.StartBlankCheck;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.StartBlankCheck,8);
                    }
                    ProcessbarControl( 12, 8);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte result = 0x00;
                    UInt32 Lenght = 0x00;
                    if (ChipEraseFlag == true)
                    {
                        Lenght = (UInt32)(ProgaramerOrderProcess8_Obj.SystemConfig_obj.PageCount[this.TargetMCUSlecet] *
                                     ProgaramerOrderProcess8_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    else
                    {
                        Lenght = (UInt32)(((HexData.Length + 511) / ProgaramerOrderProcess8_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]) *
                                     ProgaramerOrderProcess8_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    }
                    ProcessbarControl( 15, 8);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    UInt32 ErrAdd = 0x00;
                    byte stats = ProgaramerOrderProcess8_Obj.CheckBlank(SerialPort_Communiction8, BitConverter.GetBytes(ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]), Lenght, ref result, ref ErrAdd);
                    if (stats == (byte)eErrNumber.Succesful)
                    {

                    }
                    else
                    {
                        string ss = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            ss = ": " + ProgaramerOrderProcess8_Obj.DisplayText_obj.Encrypted;
                        }
                        ExcuteControlDisplay(true);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.BlankCheckFail + ss;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.BlankCheckFail + ss,8);
                        ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[8] = false;
                        LabelControl("FAIL", 8);
                        return;
                    }
                    Thread.Sleep(100);
                    if (bStop8 == true)
                    {
                        return;
                    }
                    ProcessbarControl( 17, 8);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    string s = "";
                    if (result == 0x01)
                    {
                        s = ProgaramerOrderProcess8_Obj.DisplayText_obj.ResultBlank;
                    }
                    else if (result == 0x00)
                    {
                        s = ProgaramerOrderProcess8_Obj.DisplayText_obj.ResultNotBlank + "0x" + Convert.ToString(ErrAdd, 16).ToUpper().PadLeft(8, '0');
                    }
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.BlankCheckSuccessful + s;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.BlankCheckSuccessful + s,8);
                    //MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.BlankCheckSuccessful + s, ProgaramerOrderProcess8_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                    //MessageBoxIcon.Warning);
                }
                ProcessbarControl( 20, 8);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Program.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[8] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;

                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.StartProgram;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess8_Obj.DisplayText_obj.StartProgram);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.StartProgram;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.StartProgram,8);
                    }
                    ProcessbarControl( 20, 8);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (CheckBox_AutoNumber.Checked == true)
                    {
                        if (AutoNumberEnable == false)
                        {
                            MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess8_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            //TextBox_HexFile.Enabled = true;
                            //PictureBox_hexFile.Enabled= true;
                            ExcuteControlDisplay(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[8] = false;
                            return;
                        }
                        else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                DialogResult dr = MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.OverHexData, ProgaramerOrderProcess8_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    ExcuteControlDisplay(true);
                                    ExcuteControlFocus(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[8] = false;
                                    return;
                                }
                                else if (dr == DialogResult.Yes)
                                {
                                    byte[] CurrentNumData = BitConverter.GetBytes(CurrentNumber);
                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess8_Obj.Write(SerialPort_Communiction8, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[8] = false;
                                            LabelControl("FAIL", 8);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess8_Obj.Write(SerialPort_Communiction8, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[8] = false;
                                            LabelControl("FAIL", 8);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess8_Obj.Write(SerialPort_Communiction8, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), senddata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {

                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[8] = false;
                                            LabelControl("FAIL", 8);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                stats = ProgaramerOrderProcess8_Obj.Write(SerialPort_Communiction8, BitConverter.GetBytes((UInt32)(NumberAdderss)), BitConverter.GetBytes((UInt32)(CurrentNumber)));
                                if (stats == (byte)eErrNumber.Succesful)
                                {

                                }
                                else
                                {
                                    ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                    //TextBox_HexFile.Enabled = true;
                                    //PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[8] = false;
                                    LabelControl("FAIL", 8);
                                    return;
                                }
                            }
                            checkAutoNumber = true;
                            NumberAdd = NumberAdderss;
                        }
                    }
                    ProcessbarControl( 25, 8);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    TotalCount++;
                    stats = 0x00;
                    byte[] sentdata = new byte[512];
                    int count = (int)((HexData.Length + 511) / ProgaramerOrderProcess8_Obj.SystemConfig_obj.PageSize[this.TargetMCUSlecet]);
                    int tep = 45000 / count;
                    for (int i = 0; i < count; i++)
                    {
                        if (i == (count - 1))
                        {
                            sentdata = new byte[HexData.Length - (i * 512)];
                            Array.Copy(HexData, i * 512, sentdata, 0, HexData.Length - (i * 512));
                        }
                        else
                        {
                            Array.Copy(HexData, i * 512, sentdata, 0, 512);
                        }
                        stats = ProgaramerOrderProcess8_Obj.Write(SerialPort_Communiction8, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i * 512)), sentdata);
                        if (stats == (byte)eErrNumber.Succesful)
                        {

                        }
                        else
                        {
                            string s = "";
                            if (stats == (byte)eErrNumber.Encrypted)
                            {
                                s = ": " + ProgaramerOrderProcess8_Obj.DisplayText_obj.Encrypted;
                            }
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.ProgramFail + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.ProgramFail + s,8);
                            FailCount++;
                            ExcuteControlDisplay(true);
                            ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                            //TextBox_Length.Text = FailCount.ToString();
                            //PictureBox_hexFile.Enabled= true;
                            //TextBox_HexFile.Enabled = true;
                            ExcuteControlFocus(true);
                            Control.CheckForIllegalCrossThreadCalls = true;
                            BusyFlagSub[8] = false;
                            LabelControl("FAIL", 8);
                            return;
                        }
                        ProcessbarControl( (int)(25 + ((i * tep) / 1000)), 8);
                        if (bStop8 == true)
                        {
                            return;
                        }
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    }
                    if (AutoNumberEnable == true && CheckBox_AutoNumber.Checked == true)
                    {
                        HistoryNumber = CurrentNumber;
                        if (CheckBox_AutoNumber.Checked == true)
                        {
                            CurrentNumber += NumberInterval;
                        }

                        if (!(CurrentNumber < (StartNumber + (NumberLength) * NumberInterval)))
                        {
                            MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.AutoNumberFinsh, ProgaramerOrderProcess8_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            CheckBox_AutoNumber.Checked = false;
                            AutoNumberEnable = false;
                            Button_OpenClose.Text = ProgaramerOrderProcess8_Obj.DisplayText_obj.AutoNumberOpen;
                            Button_OpenClose.Enabled = false;
                        }
                        else
                        {
                            Label_CurrentNumbers.Text = CurrentNumber.ToString();
                        }
                        Label_HistoryNumbers.Text = HistoryNumber.ToString();
                    }
                    //PictureBox_hexFile.Enabled= true;
                    //TextBox_HexFile.Enabled = true;
                    //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.ProgramSuccessful;
                    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //TextBox_Info.ScrollToCaret();
                    ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.ProgramSuccessful,8);
                    //TextBox_NumberAddress.Text = PassCount.ToString();
                    //TextBox_StartNumber.Text = TotalCount.ToString();
                }
                ProcessbarControl( 70, 8);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Verify.Checked == true)
                {
                    byte stats = 0;
                    //byte stats = GetHexFile();
                    //if (stats != (byte)eErrNumber.Succesful)
                    //{
                    //    ExcuteControlDisplay(true);
                    //    BusyFlagSub[8] = false;
                    //    Control.CheckForIllegalCrossThreadCalls = true;
                    //    return;
                    //}
                    ////PictureBox_hexFile.Enabled= false;
                    ////TextBox_HexFile.Enabled = false;
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.StartVerify;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess8_Obj.DisplayText_obj.StartVerify);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.StartVerify;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.StartVerify,8);
                    }
                    if (bStop8 == true)
                    {
                        return;
                    }
                    ProcessbarControl( 75, 8);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    if (checkAutoNumber == true)
                    {
                        byte[] CurrentNumData = BitConverter.GetBytes((UInt32)HistoryNumber);
                        //if (AutoNumberEnable == false)
                        //if (false)
                        //{
                        //    MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.OpenAutoNumber, ProgaramerOrderProcess8_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        //    //TextBox_HexFile.Enabled = true;
                        //    //PictureBox_hexFile.Enabled= true;
                        //    ExcuteControlDisplay(true);
                        //    Control.CheckForIllegalCrossThreadCalls = true;
                        //    BusyFlagSub[8] = false;
                        //    return;
                        //}
                        //else
                        {
                            if ((NumberAdderss - ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) < HexData.Length)
                            {
                                /*DialogResult dr = MessageBox.Show("", "", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                                if (dr == DialogResult.No)
                                {
                                    //TextBox_HexFile.Enabled = true;
                                    //PictureBox_hexFile.Enabled= true;
                                    Button_Execute.Enabled = true;
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[8] = false;
                                    return;
                                }
                                else */
                                if (true)
                                {

                                    for (int i = 0; i < 4; i++)
                                    {
                                        if ((NumberAdderss - ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i) < HexData.Length)
                                        {
                                            HexData[NumberAdderss - ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet] + i] = CurrentNumData[i];
                                        }
                                    }
                                    if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 3)
                                    {
                                        byte[] senddata = new byte[1];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess8_Obj.Verify(SerialPort_Communiction8, BitConverter.GetBytes((UInt32)(NumberAdderss + 3)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[8] = false;
                                            LabelControl("FAIL", 8);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 2)
                                    {
                                        byte[] senddata = new byte[2];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[2];
                                        senddata[1] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess8_Obj.Verify(SerialPort_Communiction8, BitConverter.GetBytes((UInt32)(NumberAdderss + 2)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[8] = false;
                                            LabelControl("FAIL", 8);
                                            return;
                                        }
                                    }
                                    else if (HexData.Length - (NumberAdderss - ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet]) == 1)
                                    {
                                        byte[] senddata = new byte[3];
                                        byte[] recdata = new byte[2];
                                        senddata[0] = CurrentNumData[1];
                                        senddata[1] = CurrentNumData[2];
                                        senddata[2] = CurrentNumData[3];
                                        stats = ProgaramerOrderProcess8_Obj.Verify(SerialPort_Communiction8, BitConverter.GetBytes((UInt32)(NumberAdderss + 1)), recdata.Length, ref recdata);
                                        if (stats == (byte)eErrNumber.Succesful)
                                        {
                                            //string s = "";
                                            /*
                                            if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                            {
                                                s = ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifyMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            else
                                            {
                                                s = ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifyNotMatch;
                                                TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifySuccessful + s;
                                                TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                                TextBox_Info.ScrollToCaret();
                                            }
                                            */
                                        }
                                        else
                                        {
                                            ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                                            //TextBox_Length.Text = FailCount.ToString();
                                            //TextBox_HexFile.Enabled = true;
                                            //PictureBox_hexFile.Enabled= true;
                                            ExcuteControlDisplay(true);
                                            Control.CheckForIllegalCrossThreadCalls = true;
                                            BusyFlagSub[8] = false;
                                            LabelControl("FAIL", 8);
                                            return;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                byte[] recdata = new byte[2];
                                stats = ProgaramerOrderProcess8_Obj.Verify(SerialPort_Communiction8, BitConverter.GetBytes((UInt32)(NumberAdderss)), recdata.Length, ref recdata);
                                if (stats == (byte)eErrNumber.Succesful)
                                {
                                    //string s = "";
                                    /*
                                    if (((recdata[0] << 8) + recdata[1]) == (((HistoryNumber & 0xff000000) >> 24) + ((HistoryNumber & 0xff0000) >> 16) + ((HistoryNumber & 0xff00) >> 8) + HistoryNumber & 0xff))
                                    {
                                        s = ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifyMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((recdata[0] << 8) + recdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    else
                                    {
                                        s = ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifyNotMatch;
                                        TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "自动编号：" + ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifySuccessful + s;
                                        TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                        TextBox_Info.ScrollToCaret();
                                    }
                                    */
                                }
                                else
                                {
                                    ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                                    //TextBox_Length.Text = FailCount.ToString();
                                    //TextBox_HexFile.Enabled = true;
                                    //PictureBox_hexFile.Enabled= true;
                                    ExcuteControlDisplay(true);
                                    Control.CheckForIllegalCrossThreadCalls = true;
                                    BusyFlagSub[8] = false;
                                    LabelControl("FAIL", 8);
                                    return;
                                }
                            }
                        }
                    }

                    ProcessbarControl( 80, 8);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte[] checksumdata = new byte[2];
                    stats = ProgaramerOrderProcess8_Obj.Verify(SerialPort_Communiction8, BitConverter.GetBytes((UInt32)(ProgaramerOrderProcess8_Obj.SystemConfig_obj.FlashAddress[TargetMCUSlecet])), HexData.Length, ref checksumdata);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        string s = "";
                        if (((checksumdata[0] << 8) + checksumdata[1]) == ProgaramerOrderProcess8_Obj.CheckSumUInt16(HexData, 0, HexData.Length))
                        {
                            s = ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifyMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsg(strText,8);
                        }
                        else
                        {
                            s = ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifyNotMatch;
                            //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifySuccessful + s;
                            //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                            //TextBox_Info.ScrollToCaret();
                            string strText = ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifySuccessful + s + "(0x" + Convert.ToString(((checksumdata[0] << 8) + checksumdata[1]), 16).ToUpper().PadLeft(4, '0') + ")";
                            ShowMsgWithLine(strText,8);
                            //break;
                        }
                        //BusyFlagSub[8] = false;
                        ChipEraseFlag = true;
                        //MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifySuccessful + s, ProgaramerOrderProcess8_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Warning);

                        //Button_Execute.Enabled = true;
                    }
                    else
                    {
                        string s = "";
                        if (stats == (byte)eErrNumber.Encrypted)
                        {
                            s = ": " + ProgaramerOrderProcess8_Obj.DisplayText_obj.Encrypted;
                        }
                        //BusyFlag = false;
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifyFail + s;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        string strText = "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.VerifyFail + s;
                        ShowMsgWithLine(strText,8);

                        ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);
                        //PictureBox_hexFile.Enabled= true;
                        //TextBox_HexFile.Enabled = true;
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[8] = false;
                        LabelControl("FAIL", 8);
                        return;
                    }
                    //PictureBox_hexFile.Enabled= true;
                    //TextBox_HexFile.Enabled = true;
                }
                ProcessbarControl( 85, 8);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                if (CheckBox_Encrypt.Checked == true)
                {
                    //if (TextBox_Info.Text == "")
                    //{
                    //    //TextBox_Info.Text += "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.StartEncrypt;
                    //    //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                    //    //TextBox_Info.ScrollToCaret();
                    //    ShowMsg(ProgaramerOrderProcess8_Obj.DisplayText_obj.StartEncrypt);
                    //}
                    //else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.StartEncrypt;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.StartEncrypt,8);
                    }
                    ProcessbarControl( 90, 8);
                    ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                    byte Result = 0x00;
                    byte stats = ProgaramerOrderProcess8_Obj.SetEncrypt(SerialPort_Communiction8, ref Result);
                    if (stats == (byte)eErrNumber.Succesful)
                    {
                        //ProgaramerOrderProcess8_Obj.serialportclose(SerialPort_Communiction8);
                        //if (Result == 0x00)
                        //{
                        //ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                        //MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.Encrypted, ProgaramerOrderProcess8_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                        //MessageBoxIcon.Error);
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.EncryptedSuccessful;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.EncryptedSuccessful,8);

                        ExcuteControlDisplay(true);
                        ProcessbarControl( 100, 8);
                        LabelControl("OK", 8);
                        ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[8] = false;
                        return;
                        //}

                    }
                    else
                    {
                        //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + ProgaramerOrderProcess8_Obj.DisplayText_obj.EncryptFail;
                        //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                        //TextBox_Info.ScrollToCaret();
                        ShowMsgWithLine(ProgaramerOrderProcess8_Obj.DisplayText_obj.EncryptFail,8);

                        //ProgaramerOrderProcess8_Obj.serialportclose(SerialPort_Communiction);
                        ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                        ExcuteControlDisplay(true);//need to verify
                        ExcuteControlFocus(true);
                        Control.CheckForIllegalCrossThreadCalls = true;
                        BusyFlagSub[8] = false;
                        LabelControl("FAIL", 8);
                        return;
                    }
                }
                //}
                if (bStop8 == true)
                {
                    return;
                }
                ProcessbarControl( 100, 8);
                LabelControl("OK", 8);
                ////label2.Text = ProgressBar_1.Value.ToString() + "%";
                ExcuteControlDisplay(true);
                ExcuteControlFocus(true);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[8] = false;
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message, ProgaramerOrderProcess8_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                ExcuteControlDisplay(true);//1111111111
                                           //TextBox_Info.Text += "\r\n" + "<--" + DateTime.Now + "-->" + "执行错误";
                                           //TextBox_Info.SelectionStart = TextBox_Info.Text.Length;
                                           //TextBox_Info.ScrollToCaret();
                LabelControl("FAIL", 8);
                ShowMsgWithLine("执行错误",8);
                //ProgaramerOrderProcess8_Obj.ErrProcess(stats);
                Control.CheckForIllegalCrossThreadCalls = true;
                BusyFlagSub[8] = false;
                return;
            }

        }
        private void ChineseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            XMLProcess x = new XMLProcess();
            ChineseToolStripMenuItem.Checked = true;
            //EnglishToolStripMenuItem.Checked = false;
            x.SaveLanguage("0");
            ProgaramerOrderProcess1_Obj.XMLProcess_obj.GetText(ref ProgaramerOrderProcess1_Obj.DisplayText_obj);
            ControlsText();
        }

        private void EnglishToolStripMenuItem_Click(object sender, EventArgs e)
        {
            /*
            XMLProcess x = new XMLProcess();
            ChineseToolStripMenuItem.Checked = false;
            EnglishToolStripMenuItem.Checked = true;
            x.SaveLanguage("1");
            ProgaramerOrderProcess_Obj.XMLProcess_obj.GetText(ref ProgaramerOrderProcess_Obj.DisplayText_obj);
            ControlsText();
            */
        }

        void SaveConfig()
        {
            ProgaramerOrderProcess1_Obj.DisplayText_obj.MCUSelected = ComboBox_TargetMCU.SelectedIndex.ToString();
            ProgaramerOrderProcess1_Obj.DisplayText_obj.CrystalSelected = ComboBox_Frequency.SelectedIndex.ToString();
            ProgaramerOrderProcess1_Obj.DisplayText_obj.HexFileURL = TextBox_HexFile.Text;
            if (ComboBox_COM.Items.Count > 0 && ComboBox_COM.SelectedIndex != -1)//////need to modify
            {
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect1 = ComboBox_COM.Items[ComboBox_COM.SelectedIndex].ToString();
            }
            else
            {
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect1 = "";
            }
            if (ComboBox_COM2.Items.Count > 0 && ComboBox_COM2.SelectedIndex != -1)//////need to modify
            {
                ProgaramerOrderProcess2_Obj.DisplayText_obj.COMSelect2 = ComboBox_COM2.Items[ComboBox_COM2.SelectedIndex].ToString();
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect2 = ComboBox_COM2.Items[ComboBox_COM2.SelectedIndex].ToString();
            }
            else
            {
                ProgaramerOrderProcess2_Obj.DisplayText_obj.COMSelect2 = "";
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect2 = "";
            }
            if (ComboBox_COM3.Items.Count > 0 && ComboBox_COM3.SelectedIndex != -1)//////need to modify
            {
                ProgaramerOrderProcess3_Obj.DisplayText_obj.COMSelect3 = ComboBox_COM3.Items[ComboBox_COM3.SelectedIndex].ToString();
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect3 = ComboBox_COM2.Items[ComboBox_COM3.SelectedIndex].ToString();
            }
            else
            {
                ProgaramerOrderProcess3_Obj.DisplayText_obj.COMSelect3 = "";
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect3 = "";
            }
            if (ComboBox_COM4.Items.Count > 0 && ComboBox_COM4.SelectedIndex != -1)//////need to modify
            {
                ProgaramerOrderProcess4_Obj.DisplayText_obj.COMSelect4 = ComboBox_COM4.Items[ComboBox_COM4.SelectedIndex].ToString();
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect4 = ComboBox_COM4.Items[ComboBox_COM4.SelectedIndex].ToString();
            }
            else
            {
                ProgaramerOrderProcess4_Obj.DisplayText_obj.COMSelect4 = "";
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect4 = "";
            }
            if (ComboBox_COM5.Items.Count > 0 && ComboBox_COM5.SelectedIndex != -1)//////need to modify
            {
                ProgaramerOrderProcess5_Obj.DisplayText_obj.COMSelect5 = ComboBox_COM5.Items[ComboBox_COM5.SelectedIndex].ToString();
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect5 = ComboBox_COM5.Items[ComboBox_COM5.SelectedIndex].ToString();

            }
            else
            {
                ProgaramerOrderProcess5_Obj.DisplayText_obj.COMSelect5 = "";
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect5 = "";
            }
            if (ComboBox_COM6.Items.Count > 0 && ComboBox_COM6.SelectedIndex != -1)//////need to modify
            {
                ProgaramerOrderProcess6_Obj.DisplayText_obj.COMSelect6 = ComboBox_COM6.Items[ComboBox_COM6.SelectedIndex].ToString();
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect6 = ComboBox_COM6.Items[ComboBox_COM6.SelectedIndex].ToString();

            }
            else
            {
                ProgaramerOrderProcess6_Obj.DisplayText_obj.COMSelect6 = "";
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect6 = "";
            }
            if (ComboBox_COM7.Items.Count > 0 && ComboBox_COM7.SelectedIndex != -1)//////need to modify
            {
                ProgaramerOrderProcess7_Obj.DisplayText_obj.COMSelect7 = ComboBox_COM7.Items[ComboBox_COM7.SelectedIndex].ToString();
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect7 = ComboBox_COM7.Items[ComboBox_COM7.SelectedIndex].ToString();

            }
            else
            {
                ProgaramerOrderProcess7_Obj.DisplayText_obj.COMSelect7 = "";
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect7 = "";
            }
            if (ComboBox_COM8.Items.Count > 0 && ComboBox_COM8.SelectedIndex !=-1)//////need to modify
            {
                ProgaramerOrderProcess8_Obj.DisplayText_obj.COMSelect8 = ComboBox_COM8.Items[ComboBox_COM8.SelectedIndex].ToString();
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect8 = ComboBox_COM8.Items[ComboBox_COM8.SelectedIndex].ToString();

            }
            else
            {
                ProgaramerOrderProcess8_Obj.DisplayText_obj.COMSelect8 = "";
                ProgaramerOrderProcess1_Obj.DisplayText_obj.COMSelect8 = "";
            }
            //if (RadioButton_ChipErase.Checked == true)
            //{
            //ProgaramerOrderProcess_Obj.DisplayText_obj.EraseMode = "0";
            //}
            //else
            //{
            //ProgaramerOrderProcess_Obj.DisplayText_obj.EraseMode = "1";
            //}
            if(true) //(ConnectFlagSub[0] == true)//nedd to modify
            {
                //if (RadioButton_ChipErase.Checked == true)
                //{
                //    ProgaramerOrderProcess1_Obj.DisplayText_obj.EraseMode = "0";
                //}
                //else
                {
                    ProgaramerOrderProcess1_Obj.DisplayText_obj.EraseMode = "1";
                }
                if (CheckBox_Erase.Checked == true)
                {
                    ProgaramerOrderProcess1_Obj.DisplayText_obj.EraseEnb = "1";
                }
                //else
                //{
                //    ProgaramerOrderProcess1_Obj.DisplayText_obj.EraseEnb = "0";
                //}

                if (CheckBox_BlankCheck.Checked == true)
                {
                    ProgaramerOrderProcess1_Obj.DisplayText_obj.BankEnb = "1";
                }
                else
                {
                    ProgaramerOrderProcess1_Obj.DisplayText_obj.BankEnb = "0";
                }

                if (CheckBox_Program.Checked == true)
                {
                    ProgaramerOrderProcess1_Obj.DisplayText_obj.ProEnb = "1";
                }
                else
                {
                    ProgaramerOrderProcess1_Obj.DisplayText_obj.ProEnb = "0";
                }

                if (CheckBox_Verify.Checked == true)
                {
                    ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyEnb = "1";
                }
                else
                {
                    ProgaramerOrderProcess1_Obj.DisplayText_obj.VerifyEnb = "0";
                }

                if (CheckBox_Encrypt.Checked == true)
                {
                    ProgaramerOrderProcess1_Obj.DisplayText_obj.EncryptEnb = "1";
                }
                else
                {
                    ProgaramerOrderProcess1_Obj.DisplayText_obj.EncryptEnb = "0";
                }
            }
            ProgaramerOrderProcess1_Obj.XMLProcess_obj.SaveConfig(ProgaramerOrderProcess1_Obj.DisplayText_obj);
        }

        private void ExitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (SerialPort_Communiction1.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction1.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction2.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction2.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction3.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction3.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction4.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction4.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction5.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction5.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction6.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction6.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction7.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction7.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction8.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction8.Close();
                }
                catch
                {

                }
            }
            SaveConfig();
            Application.Exit();
            Application.ExitThread();
            this.Dispose();
            System.Environment.Exit(0);
        }

        private void SaveToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void SubHelpToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            string path = System.Windows.Forms.Application.StartupPath;
            path += "\\Config\\ProgramUM.pdf";
            System.Diagnostics.Process.Start(path);
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (SerialPort_Communiction1.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction1.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction2.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction2.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction3.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction3.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction4.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction4.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction5.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction5.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction6.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction6.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction7.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction7.Close();
                }
                catch
                {

                }
            }
            if (SerialPort_Communiction8.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction8.Close();
                }
                catch
                {

                }
            }
            SaveConfig();

            Application.Exit();
            Application.ExitThread();
            this.Dispose();
            System.Environment.Exit(0);
        }

        public const int WM_DEVICECHANGE = 0x219;
        public const int DBT_DEVICEARRIVAL = 0x8000;
        public const int DBT_CONFIGCHANGECANCELED = 0x0019;
        public const int DBT_CONFIGCHANGED = 0x0018;
        public const int DBT_CUSTOMEVENT = 0x8006;
        public const int DBT_DEVICEQUERYREMOVE = 0x8001;
        public const int DBT_DEVICEQUERYREMOVEFAILED = 0x8002;
        public const int DBT_DEVICEREMOVECOMPLETE = 0x8004;
        public const int DBT_DEVICEREMOVEPENDING = 0x8003;
        public const int DBT_DEVICETYPESPECIFIC = 0x8005;
        public const int DBT_DEVNODES_CHANGED = 0x0007;
        public const int DBT_QUERYCHANGECONFIG = 0x0017;
        public const int DBT_USERDEFINED = 0xFFFF;

        protected override void WndProc(ref Message m)
        {
            try
            {
                if (m.Msg == WM_DEVICECHANGE)
                {
                    switch (m.WParam.ToInt32())
                    {
                        case WM_DEVICECHANGE://
                            break;
                        case DBT_DEVICEARRIVAL://U盘插入
                            DriveInfo[] s = DriveInfo.GetDrives();
                            foreach (DriveInfo drive in s)
                            {
                                if (drive.DriveType == DriveType.Removable)
                                {
                                    //richTextBox1.AppendText("U盘已插入，盘符为:" + drive.Name.ToString() + "\r\n");
                                    break;
                                }
                            }
                            break;
                        case DBT_CONFIGCHANGECANCELED:
                            //MessageBox.Show("2");
                            break;
                        case DBT_CONFIGCHANGED:
                            //MessageBox.Show("3");
                            break;
                        case DBT_CUSTOMEVENT:
                            //MessageBox.Show("4");
                            break;
                        case DBT_DEVICEQUERYREMOVE:
                            //MessageBox.Show("5");
                            break;
                        case DBT_DEVICEQUERYREMOVEFAILED:
                            //MessageBox.Show("6");
                            break;
                        case DBT_DEVICEREMOVECOMPLETE: //U盘卸载
                            //richTextBox1.AppendText("U盘已卸载，盘符为:");
                            break;
                        case DBT_DEVICEREMOVEPENDING:
                            //MessageBox.Show("7");
                            break;
                        case DBT_DEVICETYPESPECIFIC:
                            //MessageBox.Show("8");
                            break;
                        case DBT_DEVNODES_CHANGED://可用，设备变化时

                            //MessageBox.Show("9");
                            /*
                            string ss = USBHID_Device.MatchDevice(0x10c4, 0x0100);
                            if (HDM16L_PGM_OperationProcess_obj.ConnectFlag == true)
                            {
                                //if (ss == "" || HDM16L_PGM_OperationProcess_obj.DeviceInformation != ss)
                                if (ss == "")
                                {
                                    HDM16L_PGM_OperationProcess_obj.ConnectFlag = false;
                                    CurrentGroup = 0x00;
                                    ConnectFlag = false;
                                    HDM16L_PGM_OperationProcess_obj.Disconnect();
                                    BusyFlag = false;
                                    Button_Connect.Text = HDM16L_PGM_OperationProcess_obj.DisplayText_obj.ButtonConnectText;
                                    RadioButton_OnlinePro.Enabled = false;
                                    RadioButton_OnlineReset.Enabled = false;
                                    RadioButton_OnlineReset.Checked = false;
                                    RadioButton_OnlineNotReset.Enabled = false;
                                    RadioButton_OnlineNotReset.Checked = false;
                                    ComboBox_AutoNumber.Enabled = false;
                                    TextBox_OnlineProFile.Enabled = false;
                                    Button_OnlineProFileSelect.Enabled = false;
                                    Button_OnlineProandVerify.Enabled = false;
                                    Button_Reset.Enabled = false;
                                    Button_Read.Enabled = false;
                                    Button_ClearInf.Enabled = false;

                                    RadioButton_Offline.Checked = false;
                                    RadioButton_OnlinePro.Checked = false;
                                    RadioButton_Password.Enabled = false;
                                    RadioButton_Password.Checked = false;

                                    Button_Password.Enabled = false;
                                    Button_Default.Enabled = false;
                                    Button_NumberStartStop.Enabled = false;
                                    Button_NumberStartStop.Text = HDM16L_PGM_OperationProcess_obj.DisplayText_obj.OpenNumberText;
                                    NumberEnable = false;
                                    Button_ReadUID.Enabled = false;
                                    RadioButton_Offline.Enabled = false;
                                    //RadioButton_OfflineReset.Enabled = false;
                                    // RadioButton_OfflineReset.Checked = false;
                                    //RadioButton_OfflineNotReset.Enabled = false;
                                    //RadioButton_OfflineNotReset.Checked = false;
                                    Button_OfflineProandVerify.Enabled = false;
                                    TextBox_OfflineProFile.Enabled = false;
                                    Button_OfflineProFileSelect.Enabled = false;
                                    TextBox_Interval.Enabled = false;
                                    TextBox_Interval.Text = "";
                                    TextBox_NumberAddress.Enabled = false;
                                    TextBox_NumberAddress.Text = "";
                                    TextBox_NumberLenght.Enabled = false;
                                    TextBox_NumberLenght.Text = "";
                                    TextBox_OfflineProFile.Enabled = false;
                                    TextBox_OnlineProFile.Enabled = false;
                                    TextBox_Password.Enabled = false;
                                    TextBox_Password.Text = "";
                                    TextBox_StartNumber.Enabled = false;
                                    TextBox_StartNumber.Text = "";
                                    TextBox_UID.Enabled = false;
                                    TextBox_ProInf.Enabled = false;
                                    TextBox_ProInf.Text = "";
                                    ProgressBar_Process.Value = 0;
                                    ProgressBar_Process.Enabled = false;

                                    Label_CurrentNumber.Text = "";
                                    Label_HistoryNumber.Text = "";
                                    TextBox_UID.Text = "";

                                    TextBox_OnlineProFile.Text = HDM16L_PGM_OperationProcess_obj.DisplayText_obj.HexfileHintText;
                                    TextBox_OnlineProFile.TextAlign = HorizontalAlignment.Center;
                                    TextBox_OnlineProFile.ForeColor = Color.Silver;

                                    TextBox_OfflineProFile.Text = HDM16L_PGM_OperationProcess_obj.DisplayText_obj.HexfileHintText;
                                    TextBox_OfflineProFile.TextAlign = HorizontalAlignment.Center;
                                    TextBox_OfflineProFile.ForeColor = Color.Silver;
                                    TextBox_DeviceInfo.Text = ss;
                                    ComboBox_AutoNumber.SelectedIndex = 0x01;
                                    NumberEnable = false;
                                    MessageBox.Show(HDM16L_PGM_OperationProcess_obj.DisplayText_obj.Disconnect, HDM16L_PGM_OperationProcess_obj.DisplayText_obj.HintText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Warning);

                                }
                                else if (HDM16L_PGM_OperationProcess_obj.DeviceInformation != ss)
                                {

                                }
                                else
                                {
                                    TextBox_DeviceInfo.Text = ss;
                                }
                            }
                            else
                            {
                                TextBox_DeviceInfo.Text = ss;
                            }
                            */
                            //UARTProcess UARTProcess_obj = new UARTProcess();
                            //ComboBox_COM.Items.Clear();
                            

                            //UARTProcess_obj.GetPortNames(ComboBox_COM);

                            //ComboBox_COM2.Items.Clear();


                            //UARTProcess_obj.GetPortNames(ComboBox_COM2);
                            //ComboBox_COM3.Items.Clear();


                            //UARTProcess_obj.GetPortNames(ComboBox_COM3);

                            //ComboBox_COM4.Items.Clear();


                            //UARTProcess_obj.GetPortNames(ComboBox_COM4);

                            //ComboBox_COM5.Items.Clear();


                            //UARTProcess_obj.GetPortNames(ComboBox_COM5);

                            //ComboBox_COM6.Items.Clear();


                            //UARTProcess_obj.GetPortNames(ComboBox_COM6);

                            //ComboBox_COM7.Items.Clear();


                            //UARTProcess_obj.GetPortNames(ComboBox_COM7);

                            //ComboBox_COM8.Items.Clear();


                            //UARTProcess_obj.GetPortNames(ComboBox_COM8);

                            //ComboBox_COM.SelectedIndex = -1;
                            //ComboBox_COM2.SelectedIndex = -1;
                            //ComboBox_COM3.SelectedIndex = -1;
                            //ComboBox_COM4.SelectedIndex = -1;
                            //ComboBox_COM5.SelectedIndex = -1;
                            //ComboBox_COM6.SelectedIndex = -1;
                            //ComboBox_COM7.SelectedIndex = -1;
                            //ComboBox_COM8.SelectedIndex = -1;
                            //COMSlecet[1] = ComboBox_COM.SelectedIndex;
                            //COMSlecet[2] = ComboBox_COM2.SelectedIndex;
                            //COMSlecet[3] = ComboBox_COM3.SelectedIndex;
                            //COMSlecet[4] = ComboBox_COM4.SelectedIndex;
                            //COMSlecet[5] = ComboBox_COM5.SelectedIndex;
                            //COMSlecet[6] = ComboBox_COM6.SelectedIndex;
                            //COMSlecet[7] = ComboBox_COM7.SelectedIndex;
                            //COMSlecet[8] = ComboBox_COM8.SelectedIndex;
                            //if (ComboBox_COM.Items.Count > 0)
                            //{
                            //    //ComboBox_COM.SelectedIndex = 0;
                            //}
                            //if (ComboBox_COM2.Items.Count > 1)
                            //{
                            //    //ComboBox_COM2.SelectedIndex = 1;
                            //}
                            //if (ComboBox_COM3.Items.Count > 2)
                            //{
                            //    //ComboBox_COM3.SelectedIndex = 2;
                            //}
                            //if (ComboBox_COM4.Items.Count > 3)
                            //{
                            //    //ComboBox_COM4.SelectedIndex = 3;
                            //}
                            //if (ComboBox_COM5.Items.Count > 4)
                            //{
                            //    //ComboBox_COM5.SelectedIndex = 4;
                            //}
                            //if (ComboBox_COM6.Items.Count > 5)
                            //{
                            //    //ComboBox_COM6.SelectedIndex = 5;
                            //}
                            //if (ComboBox_COM7.Items.Count > 6)
                            //{
                            //    //ComboBox_COM7.SelectedIndex = 6;
                            //}
                            //if (ComboBox_COM8.Items.Count > 7)
                            //{
                            //    //ComboBox_COM8.SelectedIndex = 7;
                            //}
                            //string[] portnames = SerialPort.GetPortNames();
                            //bool cmflag = false;
                            //for(int i =0;i< portnames.Length; i++)
                            //{
                            //    if(SerialPort_Communiction1.PortName == portnames[i])
                            //    {
                            //        cmflag = true;
                            //    }
                            //}
                            //if (cmflag == false)
                            //{
                            //    //ProgaramerOrderProcess_Obj.DisConnectProcess(SerialPort_Communiction);
                            //    SerialPort_Communiction1.Dispose();
                            //    //Button_Start1.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.ConnectText;
                            //    //ConnectFlag = false;
                            //    //ConnectControlDisplay(ConnectFlag);
                            //    //Button_Start1.Enabled = true;
                            //    Control.CheckForIllegalCrossThreadCalls = true;
                            //    BusyFlagSub[1] = false;
                            //}
                            //cmflag = false;
                            //for (int i = 0; i < portnames.Length; i++)
                            //{
                            //    if (SerialPort_Communiction2.PortName == portnames[i])
                            //    {
                            //        cmflag = true;
                            //    }
                            //}
                            //if (cmflag == false)
                            //{
                            //    //ProgaramerOrderProcess_Obj.DisConnectProcess(SerialPort_Communiction);
                            //    SerialPort_Communiction2.Dispose();
                            //    //Button_Start1.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.ConnectText;
                            //    //ConnectFlag = false;
                            //    // ConnectControlDisplay(ConnectFlag);
                            //    //StartControlDisplay(true);
                            //    Control.CheckForIllegalCrossThreadCalls = true;
                            //    BusyFlagSub[1] = false;
                            //}
                            //cmflag = false;
                            //for (int i = 0; i < portnames.Length; i++)
                            //{
                            //    if (SerialPort_Communiction3.PortName == portnames[i])
                            //    {
                            //        cmflag = true;
                            //    }
                            //}
                            //if (cmflag == false)
                            //{
                            //    //ProgaramerOrderProcess_Obj.DisConnectProcess(SerialPort_Communiction);
                            //    SerialPort_Communiction3.Dispose();
                            //    //Button_Start1.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.ConnectText;
                            //    //ConnectFlag = false;
                            //    //ConnectControlDisplay(ConnectFlag);
                            //    //Button_Start1.Enabled = true;
                            //    Control.CheckForIllegalCrossThreadCalls = true;
                            //    BusyFlagSub[1] = false;
                            //}
                            //cmflag = false;
                            //for (int i = 0; i < portnames.Length; i++)
                            //{
                            //    if (SerialPort_Communiction4.PortName == portnames[i])
                            //    {
                            //        cmflag = true;
                            //    }
                            //}
                            //if (cmflag == false)
                            //{
                            //    //ProgaramerOrderProcess_Obj.DisConnectProcess(SerialPort_Communiction);
                            //    SerialPort_Communiction4.Dispose();
                            //    //Button_Start1.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.ConnectText;
                            //    //ConnectFlag = false;
                            //    //ConnectControlDisplay(ConnectFlag);
                            //    //Button_Start1.Enabled = true;
                            //    Control.CheckForIllegalCrossThreadCalls = true;
                            //    BusyFlagSub[1] = false;
                            //}
                            //cmflag = false;
                            //for (int i = 0; i < portnames.Length; i++)
                            //{
                            //    if (SerialPort_Communiction5.PortName == portnames[i])
                            //    {
                            //        cmflag = true;
                            //    }
                            //}
                            //if (cmflag == false)
                            //{
                            //    //ProgaramerOrderProcess_Obj.DisConnectProcess(SerialPort_Communiction);
                            //    SerialPort_Communiction5.Dispose();
                            //    //Button_Start1.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.ConnectText;
                            //    //ConnectFlag = false;
                            //    //ConnectControlDisplay(ConnectFlag);
                            //    //Button_Start1.Enabled = true;
                            //    Control.CheckForIllegalCrossThreadCalls = true;
                            //    BusyFlagSub[1] = false;
                            //}
                            //cmflag = false;
                            //for (int i = 0; i < portnames.Length; i++)
                            //{
                            //    if (SerialPort_Communiction6.PortName == portnames[i])
                            //    {
                            //        cmflag = true;
                            //    }
                            //}
                            //if (cmflag == false)
                            //{
                            //    //ProgaramerOrderProcess_Obj.DisConnectProcess(SerialPort_Communiction);
                            //    SerialPort_Communiction6.Dispose();
                            //    //Button_Start1.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.ConnectText;
                            //    //ConnectFlag = false;
                            //    //ConnectControlDisplay(ConnectFlag);
                            //    //Button_Start1.Enabled = true;
                            //    Control.CheckForIllegalCrossThreadCalls = true;
                            //    BusyFlagSub[1] = false;
                            //}
                            //cmflag = false;
                            //for (int i = 0; i < portnames.Length; i++)
                            //{
                            //    if (SerialPort_Communiction7.PortName == portnames[i])
                            //    {
                            //        cmflag = true;
                            //    }
                            //}
                            //if (cmflag == false)
                            //{
                            //    //ProgaramerOrderProcess_Obj.DisConnectProcess(SerialPort_Communiction);
                            //    SerialPort_Communiction7.Dispose();
                            //    //Button_Start1.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.ConnectText;
                            //    //ConnectFlag = false;
                            //    //ConnectControlDisplay(ConnectFlag);
                            //    //Button_Start1.Enabled = true;
                            //    Control.CheckForIllegalCrossThreadCalls = true;
                            //    BusyFlagSub[1] = false;
                            //}
                            //cmflag = false;
                            //for (int i = 0; i < portnames.Length; i++)
                            //{
                            //    if (SerialPort_Communiction8.PortName == portnames[i])
                            //    {
                            //        cmflag = true;
                            //    }
                            //}
                            //if (cmflag == false)
                            //{
                            //    //ProgaramerOrderProcess_Obj.DisConnectProcess(SerialPort_Communiction);
                            //    SerialPort_Communiction8.Dispose();
                            //    //Button_Start1.Text = ProgaramerOrderProcess_Obj.DisplayText_obj.ConnectText;
                            //    //ConnectFlag = false;
                            //    //ConnectControlDisplay(ConnectFlag);
                            //    //Button_Start1.Enabled = true;
                            //    Control.CheckForIllegalCrossThreadCalls = true;
                            //    BusyFlagSub[1] = false;
                            //}
                            break;
                        case DBT_QUERYCHANGECONFIG:
                            //MessageBox.Show("10");
                            break;
                        case DBT_USERDEFINED:
                            //MessageBox.Show("11");
                            break;
                        default:
                            break;
                    }
                }
            }
            catch //(Exception ex)
            {
                //MessageBox.Show(ex.Message, HDM16L_PGM_OperationProcess_obj.DisplayText_obj.EnterError, MessageBoxButtons.OK,
                                                //MessageBoxIcon.Error);
            }
            base.WndProc(ref m);
        }

        private void TextBox_HexFile_DragEnter(object sender, DragEventArgs e)
        {
            string path = ((System.Array)e.Data.GetData(DataFormats.FileDrop)).GetValue(0).ToString();
            TextBox_HexFile.Text = path;
        }

        private void TextBox_HexFile_DragDrop(object sender, DragEventArgs e)
        {
            
        }

        private void TextBox_HexFile_DragLeave(object sender, EventArgs e)
        {
            
        }

        private void TextBox_HexFile_DragOver(object sender, DragEventArgs e)
        {
            
        }

        private void CheckBox_Program_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void Label_FailCount_Click(object sender, EventArgs e)
        {

        }

        private void GroupBox_Results_Enter(object sender, EventArgs e)
        {

        }

        private void CheckBox_AutoNumber_CheckedChanged(object sender, EventArgs e)
        {
            if (CheckBox_AutoNumber.Checked == true)
            {
                TextBox_NumberAddress.Enabled = true;
                TextBox_StartNumber.Enabled = true;
                TextBox_Length.Enabled = true;
                TextBox_Interval.Enabled = true;
                //CheckBox_AutoNumber.Enabled = false;
                Button_OpenClose.Enabled = true;
            }
            else
            {
                TextBox_NumberAddress.Enabled = false;
                TextBox_StartNumber.Enabled = false;
                TextBox_Length.Enabled = false;
                TextBox_Interval.Enabled = false;
                //CheckBox_AutoNumber.Enabled = false;
                Button_OpenClose.Enabled = false;
                //AutoNumberEnable == false;
                Button_OpenClose.Text = ProgaramerOrderProcess1_Obj.DisplayText_obj.AutoNumberOpen;
            }
        }

        private void RadioButton_ChipErase_CheckedChanged(object sender, EventArgs e)
        {
            /*
            if(RadioButton_ChipErase.Checked == true)
            {
                ProgaramerOrderProcess_Obj.DisplayText_obj.EraseMode = "0";
            }
            else
            {
                ProgaramerOrderProcess_Obj.DisplayText_obj.EraseMode = "1";
            }
            */
        }

        private void RadioButton_PageErase_CheckedChanged(object sender, EventArgs e)
        {
            /*
            if (RadioButton_PageErase.Checked == true)
            {
                ProgaramerOrderProcess_Obj.DisplayText_obj.EraseMode = "1";
            }
            else
            {
                ProgaramerOrderProcess_Obj.DisplayText_obj.EraseMode = "0";
            }
            */
        }

        private void Label_COM_Click(object sender, EventArgs e)
        {

        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void Button_Start2_Click(object sender, EventArgs e)
        {
            bStop2 = false;
            if (BusyFlagSub[2] == true)
            {
                MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess2_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Warning);
                return;
            }
            else
            {
                BusyFlagSub[2] = true;
            }
            TargetMCUSlecet = ComboBox_TargetMCU.SelectedIndex;
            FrequencySlecet = ComboBox_Frequency.SelectedIndex;
            COMSlecet[2] = ComboBox_COM2.SelectedIndex;
            if (ComboBox_TargetMCU.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.SelectTargetMCUEmpty, ProgaramerOrderProcess2_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[2] = false;
                return;
            }
            if (ComboBox_Frequency.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.SelectFrequencyEmpty, ProgaramerOrderProcess2_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[2] = false;
                return;
            }
            if (ComboBox_COM2.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.SelectHexFileCOM, ProgaramerOrderProcess2_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[2] = false;
                return;
            }
            if (Button_Start2.Text != ProgaramerOrderProcess2_Obj.DisplayText_obj.DisconnectText)
            {
                if (TextBox_HexFile.Text == "")
                {
                    MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.SelectHexFileEmpty, ProgaramerOrderProcess2_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[2] = false;
                    return;
                }
            }
            if (ConnectFlagSub[2] == false)
            {
                if (!ProgaramerOrderProcess2_Obj.SetHexFileURL(TextBox_HexFile.Text))
                {
                    MessageBox.Show(ProgaramerOrderProcess2_Obj.DisplayText_obj.URLError, ProgaramerOrderProcess2_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[2] = false;
                    return;
                }
            }
            RecordCount = 0;
            if (Button_Start2.Text != ProgaramerOrderProcess2_Obj.DisplayText_obj.DisconnectText)
            {
                byte stats = GetHexFile();
                if (stats != (byte)eErrNumber.Succesful)
                {
                    return;
                }
            }

            switch (ComboBox_Frequency.SelectedIndex)
            {
                case 0:
                    frequnecy = (int)(9600 * (ProgaramerOrderProcess2_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex] / 4000000));
                    //Crystal = ProgaramerOrderProcess2_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex];
                    Crystal = 0;
                    break;

                case 1:
                    frequnecy = (int)(9600 * 1);
                    Crystal = 4000000;
                    break;
                case 2:
                    frequnecy = (int)(9600 * 1.5);
                    Crystal = 6000000;
                    break;

                case 3:
                    frequnecy = (int)(9600 * 2);
                    Crystal = 8000000;
                    break;
                case 4:
                    frequnecy = (int)(9600 * 2.5);
                    Crystal = 10000000;
                    break;
                case 5:
                    frequnecy = (int)(9600 * 3);
                    Crystal = 12000000;
                    break;
                case 6:
                    frequnecy = (int)(9600 * 4);
                    Crystal = 16000000;
                    break;
                case 7:
                    frequnecy = (int)(9600 * 4.5);
                    Crystal = 18000000;
                    break;
                case 8:
                    frequnecy = (int)(9600 * 5);
                    Crystal = 20000000;
                    break;
                case 9:
                    frequnecy = (int)(9600 * 6);
                    Crystal = 24000000;
                    break;
                case 10:
                    frequnecy = (int)(9600 * 8);
                    Crystal = 32000000;
                    break;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess2_Obj.RetryCnt = 5;
                ProgaramerOrderProcess2_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess2_Obj.RetryCnt = 25;
                ProgaramerOrderProcess2_Obj.ConnectTimeOut = 200;
            }
            if (SerialPort_Communiction2.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction2.Close();
                }
                catch
                {

                }
            }
            SerialPort_Communiction2.BaudRate = frequnecy;
            SerialPort_Communiction2.PortName = ComboBox_COM2.Text;
            ComText2 = ComboBox_COM2.Text;
            if (SerialPort_Communiction2.IsOpen == false)
            {
                try
                {
                    SerialPort_Communiction2.Open();
                }
                catch //(Exception ex)
                {

                }
            }
//            Control.CheckForIllegalCrossThreadCalls = false;
            Thread t = new Thread(new ThreadStart(Connect_thread2));
            t.Start();
            LabelControl("BUSY...", 2);
            StartControlDisplay(false,2);
        }

        private void Button_Start3_Click(object sender, EventArgs e)
        {
            bStop3 = false;
            if (BusyFlagSub[3] == true)
            {
                MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess3_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Warning);
                return;
            }
            else
            {
                BusyFlagSub[3] = true;
            }
            TargetMCUSlecet = ComboBox_TargetMCU.SelectedIndex;
            FrequencySlecet = ComboBox_Frequency.SelectedIndex;
            COMSlecet[3] = ComboBox_COM3.SelectedIndex;
            if (ComboBox_TargetMCU.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.SelectTargetMCUEmpty, ProgaramerOrderProcess3_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[3] = false;
                return;
            }
            if (ComboBox_Frequency.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.SelectFrequencyEmpty, ProgaramerOrderProcess3_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[3] = false;
                return;
            }
            if (ComboBox_COM3.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.SelectHexFileCOM, ProgaramerOrderProcess3_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[3] = false;
                return;
            }
            if (Button_Start3.Text != ProgaramerOrderProcess3_Obj.DisplayText_obj.DisconnectText)
            {
                if (TextBox_HexFile.Text == "")
                {
                    MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.SelectHexFileEmpty, ProgaramerOrderProcess3_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[3] = false;
                    return;
                }
            }
            if (ConnectFlagSub[3] == false)
            {
                if (!ProgaramerOrderProcess3_Obj.SetHexFileURL(TextBox_HexFile.Text))
                {
                    MessageBox.Show(ProgaramerOrderProcess3_Obj.DisplayText_obj.URLError, ProgaramerOrderProcess3_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[3] = false;
                    return;
                }
            }
            RecordCount = 0;
            if (Button_Start3.Text != ProgaramerOrderProcess3_Obj.DisplayText_obj.DisconnectText)
            {
                byte stats = GetHexFile();
                if (stats != (byte)eErrNumber.Succesful)
                {
                    return;
                }
            }

            switch (ComboBox_Frequency.SelectedIndex)
            {
                case 0:
                    frequnecy = (int)(9600 * (ProgaramerOrderProcess3_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex] / 4000000));
                    //Crystal = ProgaramerOrderProcess3_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex];
                    Crystal = 0;
                    break;

                case 1:
                    frequnecy = (int)(9600 * 1);
                    Crystal = 4000000;
                    break;
                case 2:
                    frequnecy = (int)(9600 * 1.5);
                    Crystal = 6000000;
                    break;

                case 3:
                    frequnecy = (int)(9600 * 2);
                    Crystal = 8000000;
                    break;
                case 4:
                    frequnecy = (int)(9600 * 2.5);
                    Crystal = 10000000;
                    break;
                case 5:
                    frequnecy = (int)(9600 * 3);
                    Crystal = 12000000;
                    break;
                case 6:
                    frequnecy = (int)(9600 * 4);
                    Crystal = 16000000;
                    break;
                case 7:
                    frequnecy = (int)(9600 * 4.5);
                    Crystal = 18000000;
                    break;
                case 8:
                    frequnecy = (int)(9600 * 5);
                    Crystal = 20000000;
                    break;
                case 9:
                    frequnecy = (int)(9600 * 6);
                    Crystal = 24000000;
                    break;
                case 10:
                    frequnecy = (int)(9600 * 8);
                    Crystal = 32000000;
                    break;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess3_Obj.RetryCnt = 5;
                ProgaramerOrderProcess3_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess3_Obj.RetryCnt = 25;
                ProgaramerOrderProcess3_Obj.ConnectTimeOut = 200;
            }
            if (SerialPort_Communiction3.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction3.Close();
                }
                catch
                {

                }
            }
            SerialPort_Communiction3.BaudRate = frequnecy;
            SerialPort_Communiction3.PortName = ComboBox_COM3.Text;
            ComText3 = ComboBox_COM3.Text;
            if (SerialPort_Communiction3.IsOpen == false)
            {
                try
                {
                    SerialPort_Communiction3.Open();
                }
                catch //(Exception ex)
                {

                }
            }
//            Control.CheckForIllegalCrossThreadCalls = false;
            Thread t = new Thread(new ThreadStart(Connect_thread3));
            t.Start();
            LabelControl("BUSY...", 3);
            StartControlDisplay(false,3);
        }

        private void Button_Start4_Click(object sender, EventArgs e)
        {
            bStop4 = false;
            if (BusyFlagSub[4] == true)
            {
                MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess4_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Warning);
                return;
            }
            else
            {
                BusyFlagSub[4] = true;
            }
            TargetMCUSlecet = ComboBox_TargetMCU.SelectedIndex;
            FrequencySlecet = ComboBox_Frequency.SelectedIndex;
            COMSlecet[4] = ComboBox_COM4.SelectedIndex;
            if (ComboBox_TargetMCU.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.SelectTargetMCUEmpty, ProgaramerOrderProcess4_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[4] = false;
                return;
            }
            if (ComboBox_Frequency.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.SelectFrequencyEmpty, ProgaramerOrderProcess4_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[4] = false;
                return;
            }
            if (ComboBox_COM4.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.SelectHexFileCOM, ProgaramerOrderProcess4_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[4] = false;
                return;
            }
            if (Button_Start4.Text != ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectText)
            {
                if (TextBox_HexFile.Text == "")
                {
                    MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.SelectHexFileEmpty, ProgaramerOrderProcess4_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[4] = false;
                    return;
                }
            }
            if (ConnectFlagSub[4] == false)
            {
                if (!ProgaramerOrderProcess4_Obj.SetHexFileURL(TextBox_HexFile.Text))
                {
                    MessageBox.Show(ProgaramerOrderProcess4_Obj.DisplayText_obj.URLError, ProgaramerOrderProcess4_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[4] = false;
                    return;
                }
            }
            RecordCount = 0;
            if (Button_Start4.Text != ProgaramerOrderProcess4_Obj.DisplayText_obj.DisconnectText)
            {
                byte stats = GetHexFile();
                if (stats != (byte)eErrNumber.Succesful)
                {
                    return;
                }
            }

            switch (ComboBox_Frequency.SelectedIndex)
            {
                case 0:
                    frequnecy = (int)(9600 * (ProgaramerOrderProcess4_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex] / 4000000));
                    //Crystal = ProgaramerOrderProcess4_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex];
                    Crystal = 0;
                    break;

                case 1:
                    frequnecy = (int)(9600 * 1);
                    Crystal = 4000000;
                    break;
                case 2:
                    frequnecy = (int)(9600 * 1.5);
                    Crystal = 6000000;
                    break;

                case 3:
                    frequnecy = (int)(9600 * 2);
                    Crystal = 8000000;
                    break;
                case 4:
                    frequnecy = (int)(9600 * 2.5);
                    Crystal = 10000000;
                    break;
                case 5:
                    frequnecy = (int)(9600 * 3);
                    Crystal = 12000000;
                    break;
                case 6:
                    frequnecy = (int)(9600 * 4);
                    Crystal = 16000000;
                    break;
                case 7:
                    frequnecy = (int)(9600 * 4.5);
                    Crystal = 18000000;
                    break;
                case 8:
                    frequnecy = (int)(9600 * 5);
                    Crystal = 20000000;
                    break;
                case 9:
                    frequnecy = (int)(9600 * 6);
                    Crystal = 24000000;
                    break;
                case 10:
                    frequnecy = (int)(9600 * 8);
                    Crystal = 32000000;
                    break;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess4_Obj.RetryCnt = 5;
                ProgaramerOrderProcess4_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess4_Obj.RetryCnt = 25;
                ProgaramerOrderProcess4_Obj.ConnectTimeOut = 200;
            }
            if (SerialPort_Communiction4.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction4.Close();
                }
                catch
                {

                }
            }
            SerialPort_Communiction4.BaudRate = frequnecy;
            SerialPort_Communiction4.PortName = ComboBox_COM4.Text;
            ComText4 = ComboBox_COM4.Text;
            if (SerialPort_Communiction4.IsOpen == false)
            {
                try
                {
                    SerialPort_Communiction4.Open();
                }
                catch //(Exception ex)
                {

                }
            }
 //           Control.CheckForIllegalCrossThreadCalls = false;
            Thread t = new Thread(new ThreadStart(Connect_thread4));
            t.Start();
            LabelControl("BUSY...", 4);
            StartControlDisplay(false,4);
        }

        private void Button_Start5_Click(object sender, EventArgs e)
        {
            bStop5 = false;
            if (BusyFlagSub[5] == true)
            {
                MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess5_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Warning);
                return;
            }
            else
            {
                BusyFlagSub[5] = true;
            }
            TargetMCUSlecet = ComboBox_TargetMCU.SelectedIndex;
            FrequencySlecet = ComboBox_Frequency.SelectedIndex;
            COMSlecet[5] = ComboBox_COM5.SelectedIndex;
            if (ComboBox_TargetMCU.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.SelectTargetMCUEmpty, ProgaramerOrderProcess5_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[5] = false;
                return;
            }
            if (ComboBox_Frequency.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.SelectFrequencyEmpty, ProgaramerOrderProcess5_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[5] = false;
                return;
            }
            if (ComboBox_COM5.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.SelectHexFileCOM, ProgaramerOrderProcess5_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[5] = false;
                return;
            }
            if (Button_Start5.Text != ProgaramerOrderProcess5_Obj.DisplayText_obj.DisconnectText)
            {
                if (TextBox_HexFile.Text == "")
                {
                    MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.SelectHexFileEmpty, ProgaramerOrderProcess5_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[5] = false;
                    return;
                }
            }
            if (ConnectFlagSub[5] == false)
            {
                if (!ProgaramerOrderProcess5_Obj.SetHexFileURL(TextBox_HexFile.Text))
                {
                    MessageBox.Show(ProgaramerOrderProcess5_Obj.DisplayText_obj.URLError, ProgaramerOrderProcess5_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[5] = false;
                    return;
                }
            }
            RecordCount = 0;
            if (Button_Start5.Text != ProgaramerOrderProcess5_Obj.DisplayText_obj.DisconnectText)
            {
                byte stats = GetHexFile();
                if (stats != (byte)eErrNumber.Succesful)
                {
                    return;
                }
            }

            switch (ComboBox_Frequency.SelectedIndex)
            {
                case 0:
                    frequnecy = (int)(9600 * (ProgaramerOrderProcess5_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex] / 4000000));
                    //Crystal = ProgaramerOrderProcess5_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex];
                    Crystal = 0;
                    break;

                case 1:
                    frequnecy = (int)(9600 * 1);
                    Crystal = 4000000;
                    break;
                case 2:
                    frequnecy = (int)(9600 * 1.5);
                    Crystal = 6000000;
                    break;

                case 3:
                    frequnecy = (int)(9600 * 2);
                    Crystal = 8000000;
                    break;
                case 4:
                    frequnecy = (int)(9600 * 2.5);
                    Crystal = 10000000;
                    break;
                case 5:
                    frequnecy = (int)(9600 * 3);
                    Crystal = 12000000;
                    break;
                case 6:
                    frequnecy = (int)(9600 * 4);
                    Crystal = 16000000;
                    break;
                case 7:
                    frequnecy = (int)(9600 * 4.5);
                    Crystal = 18000000;
                    break;
                case 8:
                    frequnecy = (int)(9600 * 5);
                    Crystal = 20000000;
                    break;
                case 9:
                    frequnecy = (int)(9600 * 6);
                    Crystal = 24000000;
                    break;
                case 10:
                    frequnecy = (int)(9600 * 8);
                    Crystal = 32000000;
                    break;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess5_Obj.RetryCnt = 5;
                ProgaramerOrderProcess5_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess5_Obj.RetryCnt = 25;
                ProgaramerOrderProcess5_Obj.ConnectTimeOut = 200;
            }
            if (SerialPort_Communiction5.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction5.Close();
                }
                catch
                {

                }
            }
            SerialPort_Communiction5.BaudRate = frequnecy;
            SerialPort_Communiction5.PortName = ComboBox_COM5.Text;
            ComText5 = ComboBox_COM5.Text;
            if (SerialPort_Communiction5.IsOpen == false)
            {
                try
                {
                    SerialPort_Communiction5.Open();
                }
                catch //(Exception ex)
                {

                }
            }
//            Control.CheckForIllegalCrossThreadCalls = false;
            Thread t = new Thread(new ThreadStart(Connect_thread5));
            t.Start();
            //Button_Start5.Enabled = false;
            LabelControl("BUSY...", 5);
            StartControlDisplay(false,5);
        }

        private void Button_Start6_Click(object sender, EventArgs e)
        {
            bStop6 = false;
            if (BusyFlagSub[6] == true)
            {
                MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess6_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Warning);
                return;
            }
            else
            {
                BusyFlagSub[6] = true;
            }
            TargetMCUSlecet = ComboBox_TargetMCU.SelectedIndex;
            FrequencySlecet = ComboBox_Frequency.SelectedIndex;
            COMSlecet[6] = ComboBox_COM6.SelectedIndex;
            if (ComboBox_TargetMCU.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.SelectTargetMCUEmpty, ProgaramerOrderProcess6_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[6] = false;
                return;
            }
            if (ComboBox_Frequency.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.SelectFrequencyEmpty, ProgaramerOrderProcess6_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[6] = false;
                return;
            }
            if (ComboBox_COM6.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.SelectHexFileCOM, ProgaramerOrderProcess6_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[6] = false;
                return;
            }
            if (Button_Start6.Text != ProgaramerOrderProcess6_Obj.DisplayText_obj.DisconnectText)
            {
                if (TextBox_HexFile.Text == "")
                {
                    MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.SelectHexFileEmpty, ProgaramerOrderProcess6_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[6] = false;
                    return;
                }
            }
            if (ConnectFlagSub[6] == false)
            {
                if (!ProgaramerOrderProcess6_Obj.SetHexFileURL(TextBox_HexFile.Text))
                {
                    MessageBox.Show(ProgaramerOrderProcess6_Obj.DisplayText_obj.URLError, ProgaramerOrderProcess6_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[6] = false;
                    return;
                }
            }
            RecordCount = 0;
            if (Button_Start6.Text != ProgaramerOrderProcess6_Obj.DisplayText_obj.DisconnectText)
            {
                byte stats = GetHexFile();
                if (stats != (byte)eErrNumber.Succesful)
                {
                    return;
                }
            }

            switch (ComboBox_Frequency.SelectedIndex)
            {
                case 0:
                    frequnecy = (int)(9600 * (ProgaramerOrderProcess6_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex] / 4000000));
                    //Crystal = ProgaramerOrderProcess6_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex];
                    Crystal = 0;
                    break;

                case 1:
                    frequnecy = (int)(9600 * 1);
                    Crystal = 4000000;
                    break;
                case 2:
                    frequnecy = (int)(9600 * 1.5);
                    Crystal = 6000000;
                    break;

                case 3:
                    frequnecy = (int)(9600 * 2);
                    Crystal = 8000000;
                    break;
                case 4:
                    frequnecy = (int)(9600 * 2.5);
                    Crystal = 10000000;
                    break;
                case 5:
                    frequnecy = (int)(9600 * 3);
                    Crystal = 12000000;
                    break;
                case 6:
                    frequnecy = (int)(9600 * 4);
                    Crystal = 16000000;
                    break;
                case 7:
                    frequnecy = (int)(9600 * 4.5);
                    Crystal = 18000000;
                    break;
                case 8:
                    frequnecy = (int)(9600 * 5);
                    Crystal = 20000000;
                    break;
                case 9:
                    frequnecy = (int)(9600 * 6);
                    Crystal = 24000000;
                    break;
                case 10:
                    frequnecy = (int)(9600 * 8);
                    Crystal = 32000000;
                    break;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess6_Obj.RetryCnt = 5;
                ProgaramerOrderProcess6_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess6_Obj.RetryCnt = 25;
                ProgaramerOrderProcess6_Obj.ConnectTimeOut = 200;
            }
            if (SerialPort_Communiction6.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction6.Close();
                }
                catch
                {

                }
            }
            SerialPort_Communiction6.BaudRate = frequnecy;
            SerialPort_Communiction6.PortName = ComboBox_COM6.Text;
            ComText6 = ComboBox_COM6.Text;
            if (SerialPort_Communiction6.IsOpen == false)
            {
                try
                {
                    SerialPort_Communiction6.Open();
                }
                catch //(Exception ex)
                {

                }
            }
//            Control.CheckForIllegalCrossThreadCalls = false;
            Thread t = new Thread(new ThreadStart(Connect_thread6));
            t.Start();
            LabelControl("BUSY...", 6);
            //Button_Start6.Enabled = false;
            StartControlDisplay(false,6);
        }
        private void Button_Start7_Click(object sender, EventArgs e)
        {
            bStop7 = false;
            if (BusyFlagSub[7] == true)
            {
                MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess7_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Warning);
                return;
            }
            else
            {
                BusyFlagSub[7] = true;
            }
            TargetMCUSlecet = ComboBox_TargetMCU.SelectedIndex;
            FrequencySlecet = ComboBox_Frequency.SelectedIndex;
            COMSlecet[7] = ComboBox_COM7.SelectedIndex;
            if (ComboBox_TargetMCU.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.SelectTargetMCUEmpty, ProgaramerOrderProcess7_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[7] = false;
                return;
            }
            if (ComboBox_Frequency.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.SelectFrequencyEmpty, ProgaramerOrderProcess7_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[7] = false;
                return;
            }
            if (ComboBox_COM7.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.SelectHexFileCOM, ProgaramerOrderProcess7_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[7] = false;
                return;
            }
            if (Button_Start7.Text != ProgaramerOrderProcess7_Obj.DisplayText_obj.DisconnectText)
            {
                if (TextBox_HexFile.Text == "")
                {
                    MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.SelectHexFileEmpty, ProgaramerOrderProcess7_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[7] = false;
                    return;
                }
            }
            if (ConnectFlagSub[7] == false)
            {
                if (!ProgaramerOrderProcess7_Obj.SetHexFileURL(TextBox_HexFile.Text))
                {
                    MessageBox.Show(ProgaramerOrderProcess7_Obj.DisplayText_obj.URLError, ProgaramerOrderProcess7_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[7] = false;
                    return;
                }
            }
            RecordCount = 0;
            if (Button_Start7.Text != ProgaramerOrderProcess7_Obj.DisplayText_obj.DisconnectText)
            {
                byte stats = GetHexFile();
                if (stats != (byte)eErrNumber.Succesful)
                {
                    return;
                }
            }

            switch (ComboBox_Frequency.SelectedIndex)
            {
                case 0:
                    frequnecy = (int)(9600 * (ProgaramerOrderProcess7_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex] / 4000000));
                    //Crystal = ProgaramerOrderProcess7_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex];
                    Crystal = 0;
                    break;

                case 1:
                    frequnecy = (int)(9600 * 1);
                    Crystal = 4000000;
                    break;
                case 2:
                    frequnecy = (int)(9600 * 1.5);
                    Crystal = 6000000;
                    break;

                case 3:
                    frequnecy = (int)(9600 * 2);
                    Crystal = 8000000;
                    break;
                case 4:
                    frequnecy = (int)(9600 * 2.5);
                    Crystal = 10000000;
                    break;
                case 5:
                    frequnecy = (int)(9600 * 3);
                    Crystal = 12000000;
                    break;
                case 6:
                    frequnecy = (int)(9600 * 4);
                    Crystal = 16000000;
                    break;
                case 7:
                    frequnecy = (int)(9600 * 4.5);
                    Crystal = 18000000;
                    break;
                case 8:
                    frequnecy = (int)(9600 * 5);
                    Crystal = 20000000;
                    break;
                case 9:
                    frequnecy = (int)(9600 * 6);
                    Crystal = 24000000;
                    break;
                case 10:
                    frequnecy = (int)(9600 * 8);
                    Crystal = 32000000;
                    break;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess7_Obj.RetryCnt = 5;
                ProgaramerOrderProcess7_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess7_Obj.RetryCnt = 25;
                ProgaramerOrderProcess7_Obj.ConnectTimeOut = 200;
            }
            if (SerialPort_Communiction7.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction7.Close();
                }
                catch
                {

                }
            }
            SerialPort_Communiction7.BaudRate = frequnecy;
            SerialPort_Communiction7.PortName = ComboBox_COM7.Text;
            ComText7 = ComboBox_COM7.Text;
            if (SerialPort_Communiction7.IsOpen == false)
            {
                try
                {
                    SerialPort_Communiction7.Open();
                }
                catch //(Exception ex)
                {

                }
            }
//            Control.CheckForIllegalCrossThreadCalls = false;
            Thread t = new Thread(new ThreadStart(Connect_thread7));
            t.Start();
            LabelControl("BUSY...", 7);
            //Button_Start7.Enabled = false;
            StartControlDisplay(false,7);
        }

        private void Button_Start8_Click(object sender, EventArgs e)
        {
            bStop8 = false;
            if (BusyFlagSub[8] == true)
            {
                MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.OperationBusy, ProgaramerOrderProcess8_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Warning);
                return;
            }
            else
            {
                BusyFlagSub[8] = true;
            }
            TargetMCUSlecet = ComboBox_TargetMCU.SelectedIndex;
            FrequencySlecet = ComboBox_Frequency.SelectedIndex;
            COMSlecet[8] = ComboBox_COM8.SelectedIndex;
            if (ComboBox_TargetMCU.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.SelectTargetMCUEmpty, ProgaramerOrderProcess8_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[8] = false;
                return;
            }
            if (ComboBox_Frequency.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.SelectFrequencyEmpty, ProgaramerOrderProcess8_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[8] = false;
                return;
            }
            if (ComboBox_COM8.SelectedIndex < 0)
            {
                MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.SelectHexFileCOM, ProgaramerOrderProcess8_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                MessageBoxIcon.Error);
                BusyFlagSub[8] = false;
                return;
            }
            if (Button_Start8.Text != ProgaramerOrderProcess8_Obj.DisplayText_obj.DisconnectText)
            {
                if (TextBox_HexFile.Text == "")
                {
                    MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.SelectHexFileEmpty, ProgaramerOrderProcess8_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[8] = false;
                    return;
                }
            }
            if (ConnectFlagSub[8] == false)
            {
                if (!ProgaramerOrderProcess8_Obj.SetHexFileURL(TextBox_HexFile.Text))
                {
                    MessageBox.Show(ProgaramerOrderProcess8_Obj.DisplayText_obj.URLError, ProgaramerOrderProcess8_Obj.DisplayText_obj.ErrorInformationText, MessageBoxButtons.OK,
                                                    MessageBoxIcon.Error);
                    BusyFlagSub[8] = false;
                    return;
                }
            }
            RecordCount = 0;
            if (Button_Start8.Text != ProgaramerOrderProcess8_Obj.DisplayText_obj.DisconnectText)
            {
                byte stats = GetHexFile();
                if (stats != (byte)eErrNumber.Succesful)
                {
                    return;
                }
            }

            switch (ComboBox_Frequency.SelectedIndex)
            {
                case 0:
                    frequnecy = (int)(9600 * (ProgaramerOrderProcess8_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex] / 4000000));
                    //Crystal = ProgaramerOrderProcess8_Obj.SystemConfig_obj.MainCR[ComboBox_TargetMCU.SelectedIndex];
                    Crystal = 0;
                    break;

                case 1:
                    frequnecy = (int)(9600 * 1);
                    Crystal = 4000000;
                    break;
                case 2:
                    frequnecy = (int)(9600 * 1.5);
                    Crystal = 6000000;
                    break;

                case 3:
                    frequnecy = (int)(9600 * 2);
                    Crystal = 8000000;
                    break;
                case 4:
                    frequnecy = (int)(9600 * 2.5);
                    Crystal = 10000000;
                    break;
                case 5:
                    frequnecy = (int)(9600 * 3);
                    Crystal = 12000000;
                    break;
                case 6:
                    frequnecy = (int)(9600 * 4);
                    Crystal = 16000000;
                    break;
                case 7:
                    frequnecy = (int)(9600 * 4.5);
                    Crystal = 18000000;
                    break;
                case 8:
                    frequnecy = (int)(9600 * 5);
                    Crystal = 20000000;
                    break;
                case 9:
                    frequnecy = (int)(9600 * 6);
                    Crystal = 24000000;
                    break;
                case 10:
                    frequnecy = (int)(9600 * 8);
                    Crystal = 32000000;
                    break;
            }
            if (ComboBox_Frequency.SelectedIndex < 6)//16M
            {
                ProgaramerOrderProcess8_Obj.RetryCnt = 5;
                ProgaramerOrderProcess8_Obj.ConnectTimeOut = 1000;
            }
            else
            {
                ProgaramerOrderProcess8_Obj.RetryCnt = 25;
                ProgaramerOrderProcess8_Obj.ConnectTimeOut = 200;
            }

            if (SerialPort_Communiction8.IsOpen == true)
            {
                try
                {
                    SerialPort_Communiction8.Close();
                }
                catch
                {

                }
            }
            SerialPort_Communiction8.BaudRate = frequnecy;
            SerialPort_Communiction8.PortName = ComboBox_COM8.Text;
            ComText8 = ComboBox_COM8.Text;
            if (SerialPort_Communiction8.IsOpen == false)
            {
                try
                {
                    SerialPort_Communiction8.Open();
                }
                catch //(Exception ex)
                {

                }
            }
//            Control.CheckForIllegalCrossThreadCalls = false;
            Thread t = new Thread(new ThreadStart(Connect_thread8));
            t.Start();
            LabelControl("BUSY...", 8);
            StartControlDisplay(false, 8);
        }

        private void Button_Start2_Click_1(object sender, EventArgs e)
        {

        }

        private void ComboBox_COM_SelectedIndexChanged(object sender, EventArgs e)
        {
            int id = -1;

            if (ComboBox_COM.SelectedIndex != -1 && ComboBox_COM.SelectedIndex != COMSlecet[1])
            {
                id = Array.IndexOf(COMSlecet, ComboBox_COM.SelectedIndex);
                if (id != -1)
                {
                    ComboBox_COM.SelectedIndex = -1;
                    MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.ComPortConflict, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                                        MessageBoxIcon.Warning);
                }
                else
                {
                }
                COMSlecet[1] = ComboBox_COM.SelectedIndex;
            }
            else
            {
            }
            if (ComboBox_COM.SelectedIndex != -1)
                StatusTextControl("Ready", 1);
        }

        private void ComboBox_COM2_SelectedIndexChanged(object sender, EventArgs e)
        {
            int id = -1;
            if (ComboBox_COM.SelectedIndex != -1 && ComboBox_COM2.SelectedIndex != COMSlecet[2])
            {
                id = Array.IndexOf(COMSlecet, ComboBox_COM2.SelectedIndex);
                if (id != -1)
                {
                    ComboBox_COM2.SelectedIndex = -1;
                    MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.ComPortConflict, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                        MessageBoxIcon.Warning);
                }
                else
                {

                }
                COMSlecet[2] = ComboBox_COM2.SelectedIndex;
            }
            else
            {
            }
            if (ComboBox_COM2.SelectedIndex != -1)
                StatusTextControl("Ready", 2);
        }

        private void ComboBox_COM3_SelectedIndexChanged(object sender, EventArgs e)
        {
            int id = -1;

            if (ComboBox_COM.SelectedIndex != -1 && ComboBox_COM3.SelectedIndex != COMSlecet[3])
            {
                id = Array.IndexOf(COMSlecet, ComboBox_COM3.SelectedIndex);
                if (id != -1)
                {
                    ComboBox_COM3.SelectedIndex = -1;
                    MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.ComPortConflict, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                        MessageBoxIcon.Warning);
                }
                else
                {

                }
                COMSlecet[3] = ComboBox_COM3.SelectedIndex;

            }
            else
            {
            }
            if (ComboBox_COM3.SelectedIndex != -1)
                StatusTextControl("Ready", 3);
        }

        private void ComboBox_COM4_SelectedIndexChanged(object sender, EventArgs e)
        {
            int id = -1;

            if (ComboBox_COM.SelectedIndex != -1 && ComboBox_COM4.SelectedIndex != COMSlecet[4])
            {
                id = Array.IndexOf(COMSlecet, ComboBox_COM4.SelectedIndex);
                if (id != -1 )
                {
                    ComboBox_COM4.SelectedIndex = -1;
                    MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.ComPortConflict, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                        MessageBoxIcon.Warning);
                }
                else
                {

                }
                COMSlecet[4] = ComboBox_COM4.SelectedIndex;
            }
            else
            {

            }
            if (ComboBox_COM4.SelectedIndex != -1)
                StatusTextControl("Ready", 4);
        }

        private void ComboBox_COM5_SelectedIndexChanged(object sender, EventArgs e)
        {
            int id = -1; 
            if (ComboBox_COM.SelectedIndex != -1 && ComboBox_COM5.SelectedIndex != COMSlecet[5])
            {
                id = Array.IndexOf(COMSlecet, ComboBox_COM5.SelectedIndex);
                if (id != -1)
                {
                    ComboBox_COM5.SelectedIndex = -1;
                    MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.ComPortConflict, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                        MessageBoxIcon.Warning);
                }
                else
                {

                }
                COMSlecet[5] = ComboBox_COM5.SelectedIndex;
            }
            else
            {

            }
            if (ComboBox_COM5.SelectedIndex != -1)
                StatusTextControl("Ready", 5);
        }

        private void ComboBox_COM6_SelectedIndexChanged(object sender, EventArgs e)
        {
            int id = -1;

            if (ComboBox_COM.SelectedIndex != -1 && ComboBox_COM.SelectedIndex != COMSlecet[6])
            {
                id = Array.IndexOf(COMSlecet, ComboBox_COM6.SelectedIndex);
                if (id != -1 )
                {
                    ComboBox_COM6.SelectedIndex = -1;
                    MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.ComPortConflict, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                        MessageBoxIcon.Warning);
                }
                else
                {

                }
                COMSlecet[6] = ComboBox_COM6.SelectedIndex;
            }
            else
            {

            }
            if (ComboBox_COM6.SelectedIndex != -1)
                StatusTextControl("Ready", 6);
        }

        private void ComboBox_COM7_SelectedIndexChanged(object sender, EventArgs e)
        {
            int id = -1; 
            if (ComboBox_COM.SelectedIndex != -1 && ComboBox_COM.SelectedIndex != COMSlecet[7])
            {
                id = Array.IndexOf(COMSlecet, ComboBox_COM7.SelectedIndex);
                if (id != -1)
                {
                    ComboBox_COM7.SelectedIndex = -1;
                    MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.ComPortConflict, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                        MessageBoxIcon.Warning);
                }
                else
                {

                }
                COMSlecet[7] = ComboBox_COM7.SelectedIndex;
            }
            else
            {

            }
            if (ComboBox_COM7.SelectedIndex != -1)
                StatusTextControl("Ready", 7);
        }

        private void ComboBox_COM8_SelectedIndexChanged(object sender, EventArgs e)
        {
            int id = -1; 
            if (ComboBox_COM.SelectedIndex != -1 && ComboBox_COM.SelectedIndex != COMSlecet[8])
            {
                id = Array.IndexOf(COMSlecet, ComboBox_COM8.SelectedIndex);
                if (id != -1)
                {
                    ComboBox_COM8.SelectedIndex = -1;
                    MessageBox.Show(ProgaramerOrderProcess1_Obj.DisplayText_obj.ComPortConflict, ProgaramerOrderProcess1_Obj.DisplayText_obj.WarningInformationText, MessageBoxButtons.OK,
                                        MessageBoxIcon.Warning);
                }
                else
                {

                }
                COMSlecet[8] = ComboBox_COM8.SelectedIndex;
            }
            else
            {

            }
            if (ComboBox_COM8.SelectedIndex != -1)
                StatusTextControl("Ready", 8);
        }

        private void comboBoxPortList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBoxPortList.SelectedIndex == 0)//all
            {
                TextBox_Info.Text = strTextinfoAll;
            }
            else if (comboBoxPortList.SelectedIndex == 1)
            {
                TextBox_Info.Text = strTextinfo1;
            }
            else if (comboBoxPortList.SelectedIndex == 2)
            {
                TextBox_Info.Text = strTextinfo2;
            }
            else if (comboBoxPortList.SelectedIndex == 3)
            {
                TextBox_Info.Text = strTextinfo3;
            }
            else if (comboBoxPortList.SelectedIndex == 4)
            {
                TextBox_Info.Text = strTextinfo4;
            }
            else if (comboBoxPortList.SelectedIndex == 5)
            {
                TextBox_Info.Text = strTextinfo5;
            }
            else if (comboBoxPortList.SelectedIndex == 6)
            {
                TextBox_Info.Text = strTextinfo6;
            }
            else if (comboBoxPortList.SelectedIndex == 7)
            {
                TextBox_Info.Text = strTextinfo7;
            }
            else if (comboBoxPortList.SelectedIndex == 8)
            {
                TextBox_Info.Text = strTextinfo8;
            }
        }

        private void Button_Stop_Click(object sender, EventArgs e)
        {
            bStopAll = true;
            bStop1 = true;
            bStop2 = true;
            bStop3 = true;
            bStop4 = true;
            bStop5 = true;
            bStop6 = true;
            bStop7 = true;
            bStop8 = true;
        }

        private void Button_Stop1_Click(object sender, EventArgs e)
        {
            bStop1 = true;
        }

        private void Button_Stop2_Click(object sender, EventArgs e)
        {
            bStop2 = true;
        }

        private void Button_Stop3_Click(object sender, EventArgs e)
        {
            bStop3 = true;
        }

        private void Button_Stop4_Click(object sender, EventArgs e)
        {
            bStop4 = true;
        }

        private void Button_Stop5_Click(object sender, EventArgs e)
        {
            bStop5 = true;
        }

        private void Button_Stop6_Click(object sender, EventArgs e)
        {
            bStop6 = true;
        }

        private void Button_Stop7_Click(object sender, EventArgs e)
        {
            bStop7 = true;
        }

        private void Button_Stop8_Click(object sender, EventArgs e)
        {
            bStop8 = true;
        }

        private void modBudToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Form2 ModBusConfigDlg = new Form2();
            ModBusConfigDlg.ModBustEnb = ProgaramerOrderProcess1_Obj.DisplayText_obj.ModBustEnb;
            ModBusConfigDlg.IPAddr = ProgaramerOrderProcess1_Obj.DisplayText_obj.IPAddr;
            ModBusConfigDlg.Port = ProgaramerOrderProcess1_Obj.DisplayText_obj.Port;
            if(ModBusConfigDlg.ShowDialog() == DialogResult.OK)
            {
                ProgaramerOrderProcess1_Obj.DisplayText_obj.ModBustEnb = ModBusConfigDlg.ModBustEnb;
                ProgaramerOrderProcess1_Obj.DisplayText_obj.IPAddr = ModBusConfigDlg.IPAddr;
                ProgaramerOrderProcess1_Obj.DisplayText_obj.Port = ModBusConfigDlg.Port;
            }
        }
        private MelsecA1EAsciiNet melsec_net = new MelsecA1EAsciiNet();
        private void readResultRender<T>(OperateResult<T> result, string address, TextBox textBox)
        {
            textBox.AppendText(DateTime.Now.ToString("[HH:mm:ss] ") + $"[{address}] {result.Message}{Environment.NewLine}");
            if (result.IsSuccess)
            {
                textBox.AppendText(DateTime.Now.ToString("[HH:mm:ss] ") + $"[{address}] {result.Content}{Environment.NewLine}");
            }
            else
            {
            }
        }

        /// <summary>
        /// 统一的数据写入的结果显示
        /// </summary>
        /// <param name="result"></param>
        /// <param name="address"></param>
        private void writeResultRender(OperateResult result, string address, TextBox textBox)
        {
            if (result.IsSuccess)
            {
                textBox.AppendText(DateTime.Now.ToString("[HH:mm:ss] ") + $"[{address}]写入成功");
            }
            else
            {
                textBox.AppendText(DateTime.Now.ToString("[HH:mm:ss] ") + $"[{address}]写入失败");
            }
        }


        #region Connect And Close


        private TcpClient tcp = null;
        NetworkStream streamToServer = null;
        private int RECV_ANS_W = 4;
        private int RECV_ANS_R = 6;
        private int BUF_SIZE = 4096;
        private UInt32 Closeflag; // 连接结束标志位
        private bool UseSiM = false;

        private byte[] s_buf = new byte[4096]; // 发送缓冲区
        private byte[] r_buf = new byte[4096]; // 接收缓冲区


        private byte PLCConnect(string Ipaddress, int port)
        {
            tcp = new TcpClient();
            if(UseSiM)
            {
                return (byte)eErrNumber.Succesful;
            }
            try
            {
                tcp.Connect(Ipaddress,port);
                if (tcp.Connected)
                {
                    MessageBox.Show("连接成功");
                    return (byte)eErrNumber.Succesful;
                }
                else
                {
                    MessageBox.Show("连接失败");
                    return (byte)eErrNumber.PLCConnectFail;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("连接失败");
                return (byte)eErrNumber.PLCConnectFail;
            }
        }

        private void PLCClose()
        {
            // 断开连接
            if (streamToServer != null)
                streamToServer.Dispose();
           // if (tcp.Connected)
            {
                tcp.Close();
            }

        }

        #endregion

        #region 单数据读取测试


        private OperateResult<bool> read_bool(string address, ushort length)
        {
            // 读取bool变量
            OperateResult<bool> result =new OperateResult<bool>();
            int rcvlength = 0;
            int rbuf_idx = 0; // 接收数据保存起始变址附 - 10
            int recv_size = 0; // 接收数据个数
            string strFrame = "00FF000A4D20000003EB0100";
            string strAddr1 = "M1003";
            string strAddr2 = "M1004";
            string strAddr3 = "M1053";
            if (address.Contains(strAddr1))
            {
                strFrame = "00FF000A4D20000003EB0100";
            }
            else if (address.Contains(strAddr2))
            {
                strFrame = "00FF000A4D20000003EC0100";
            }
            else if (address.Contains(strAddr3))
            {
                strFrame = "00FF000A4D200000041D0100";
            }
            if (UseSiM)
            {
                if (address.Contains(strAddr1))
                {
                    result.Content = bSimRc1;
                }
                else if (address.Contains(strAddr2))
                {
                    result.Content = bSimRc2;
                }
                result.IsSuccess = true;
                return result;
            }
            s_buf = System.Text.Encoding.Default.GetBytes(strFrame);
            //TextBox_Info.AppendText($"[{address}] [{strFrame}]{Environment.NewLine}");
            //M1003 读 (1E 结构 )
            try
            {
                streamToServer = tcp.GetStream();
                streamToServer.Write(s_buf, 0, s_buf.Length);     // 发往服务器
            }
            catch
            {
            }
            while (true)
            {
                try
                {
                    streamToServer = tcp.GetStream();
                    if (streamToServer.CanRead)
                    {
                        rcvlength = streamToServer.Read(r_buf, 0, (BUF_SIZE - rbuf_idx));
                        if (rcvlength == 0)
                        {
                            //  TextBox_Info.AppendText("No data!\r\n");
                            result.IsSuccess = false;
                            return result;
                        }
                        else
                        {
                            rbuf_idx += rcvlength; // 更新接收数据保存位置
                            recv_size += rcvlength; // 更新接收数据
                            if (recv_size >= RECV_ANS_R) // 已接收了全部的响应报文
                                break; // 已接收，停止重复
                        }
                    }
                    else
                    {
                          TextBox_Info.AppendText("Read Error!\r\n");
                        result.IsSuccess = false;
                        return result;
                    }
                }
                catch
                {

                }
            }
            r_buf[rbuf_idx] = 0; // 在接收数据的末尾
                                 // 设置 NULL
            string strRCV = System.Text.Encoding.Default.GetString(r_buf);
             //          TextBox_Info.AppendText($"[{address}] {strRCV}\r\n");
            //result.IsSuccess = true;
            //result.Content = true;
            string s = System.Text.Encoding.Default.GetString(r_buf);
            string s1 = "800010";
            string s2 = "800000";

            if (s.Contains(s1))
            {
                result.IsSuccess = true;
                result.Content = true;
            }
            else if (s.Contains(s2))
            {
                result.IsSuccess = true;
                result.Content = false;
            }
            else
            {
               MessageBox.Show(System.Text.Encoding.Default.GetString(r_buf));
                result.Content = false;
            }
            return result;
        }
   
        #endregion
        #region 单数据写入测试


        private OperateResult write_bool(string address, bool bVal)
        {
            OperateResult<bool> result = new OperateResult<bool>();
            int rcvlength = 0;
            int rbuf_idx = 0; // 接收数据保存起始变址附 - 10
            int recv_size = 0; // 接收数据个数
            string strFrame = "02FF000A4D20000003EB080000000000";
            string strAddr1 = "M1003";
            string strAddr2 = "M1004";
            string strAddr3 = "M1053";
            string strAddr4 = "M1054";
            string strAddr5 = "M1067";
            string strAddr6 = "M1068";
            string strAddr7 = "M1069";
            string strAddr8 = "M1070";
            string strAddr9 = "M1071";
            string strAddr10 = "M1072";
            string strAddr11 = "M1073";
            string strAddr12 = "M1074";
            if (!bVal)
            {
                if (address.Contains(strAddr1))
                {
                    strFrame = "02FF000A4D20000003EB010000";
                }
                else if (address.Contains(strAddr2))
                {
                    strFrame = "02FF000A4D20000003EC010000";
                }
                else if (address.Contains(strAddr3))
                {
                    strFrame = "02FF000A4D200000041D010000";
                }
                else if (address.Contains(strAddr4))
                {
                    strFrame = "02FF000A4D200000041E010000";
                }
                else if (address.Contains(strAddr5))
                {
                    strFrame = "02FF000A4D200000042B010000";
                }
                else if (address.Contains(strAddr6))
                {
                    strFrame = "02FF000A4D200000042C010000";
                }
                else if (address.Contains(strAddr7))
                {
                    strFrame = "02FF000A4D200000042D010000";
                }
                else if (address.Contains(strAddr8))
                {
                    strFrame = "02FF000A4D200000042E010000";
                }
                else if (address.Contains(strAddr9))
                {
                    strFrame = "02FF000A4D200000042F010000";
                }
                else if (address.Contains(strAddr10))
                {
                    strFrame = "02FF000A4D2000000430010000";
                }
                else if (address.Contains(strAddr11))
                {
                    strFrame = "02FF000A4D2000000431010000";
                }
                else if (address.Contains(strAddr12))
                {
                    strFrame = "02FF000A4D2000000432010000";
                }
            }
            else
            {
                if (address.Contains(strAddr1))
                {
                    strFrame = "02FF000A4D20000003EB010010";
                }
                else if (address.Contains(strAddr2))
                {
                    strFrame = "02FF000A4D20000003EC010010";
                }
                else if (address.Contains(strAddr3))
                {
                    strFrame = "02FF000A4D200000041D010010";
                }
                else if (address.Contains(strAddr4))
                {
                    strFrame = "02FF000A4D200000041E010010";
                }
                else if (address.Contains(strAddr5))
                {
                    strFrame = "02FF000A4D200000042B010010";
                }
                else if (address.Contains(strAddr6))
                {
                    strFrame = "02FF000A4D200000042C010010";
                }
                else if (address.Contains(strAddr7))
                {
                    strFrame = "02FF000A4D200000042D010010";
                }
                else if (address.Contains(strAddr8))
                {
                    strFrame = "02FF000A4D200000042E010010";
                }
                else if (address.Contains(strAddr9))
                {
                    strFrame = "02FF000A4D200000042F010010";
                }
                else if (address.Contains(strAddr10))
                {
                    strFrame = "02FF000A4D2000000430010010";
                }
                else if (address.Contains(strAddr11))
                {
                    strFrame = "02FF000A4D2000000431010010";
                }
                else if (address.Contains(strAddr12))
                {
                    strFrame = "02FF000A4D2000000432010010";
                }
            }
            s_buf = System.Text.Encoding.Default.GetBytes(strFrame);
            //TextBox_Info.AppendText($"[{address}] [{strFrame}]{Environment.NewLine}");
            //M1003 读 (1E 结构 )
            if (UseSiM)
            {
                if (address.Contains(strAddr1))
                {
                    bSimRc1 = bVal;
                }
                else if (address.Contains(strAddr2))
                {
                    bSimRc2 = bVal;
                }

                if (address.Contains(strAddr3))
                {
                    bSimFinish1 = bVal;
                }
                else if (address.Contains(strAddr4))
                {
                    bSimFinish2 = bVal;
                }
                else if (address.Contains(strAddr5))
                {
                    bSimM1C1Finish = bVal;
                }
                else if (address.Contains(strAddr6))
                {
                    bSimM1C2Finish = bVal;
                }
                else if (address.Contains(strAddr7))
                {
                    bSimM1C3Finish = bVal;
                }
                else if (address.Contains(strAddr8))
                {
                    bSimM1C4Finish = bVal;
                }
                else if (address.Contains(strAddr9))
                {
                    bSimM2C1Finish = bVal;
                }
                else if (address.Contains(strAddr10))
                {
                    bSimM2C2Finish = bVal;
                }
                else if (address.Contains(strAddr11))
                {
                    bSimM2C3Finish = bVal;
                }
                else if (address.Contains(strAddr12))
                {
                    bSimM2C4Finish = bVal;
                }

                result.IsSuccess = true;
                return result;
            }
            try
            {
                streamToServer = tcp.GetStream();

                streamToServer.Write(s_buf, 0, s_buf.Length);     // 发往服务器
                
            }
            catch
            {
            }
            while (true)
            {
                try
                {
                    streamToServer = tcp.GetStream();
                    if (streamToServer.CanRead)
                    {
                        rcvlength = streamToServer.Read(r_buf, 0, (BUF_SIZE - rbuf_idx));
                        if (rcvlength == 0)
                        {
                            return result;
                        }
                        else
                        {
                            rbuf_idx += rcvlength; // 更新接收数据保存位置
                            recv_size += rcvlength; // 更新接收数据
                            if (recv_size >= RECV_ANS_W) // 已接收了全部的响应报文
                                break; // 已接收，停止重复
                        }
                    }
                    else
                    {
                        return result;
                    }
                }
                catch
                {

                }
            }
            r_buf[rbuf_idx] = 0; // 在接收数据的末尾
                                 // 设置 NULL
            string strRCV = System.Text.Encoding.Default.GetString(r_buf);
            //TextBox_Info.AppendText($"[{address}] {strRCV}{Environment.NewLine}\r\n");
            return result;
        }

 

        #endregion
        private void button1_Click(object sender, EventArgs e)
        {
            byte rc = PLCConnect(ProgaramerOrderProcess1_Obj.DisplayText_obj.IPAddr, int.Parse(ProgaramerOrderProcess1_Obj.DisplayText_obj.Port));
            if (rc == (byte)eErrNumber.Succesful)
            {
                write_bool("M1003", true);
                read_bool("M1003", 1);

                //write_bool("M1003", false);
                //read_bool("M1003", 1);
                //write_bool("M1004", false);
                //read_bool("M1004", 1);
                //write_bool("M1053", true);
                //read_bool("M1053", 1);

                //GetPLCMcuStatus1();


                //write_bool("M1067", true);
                //write_bool("M1068", true);
                //write_bool("M1069", true);
                //write_bool("M1070", true);
                //write_bool("M1053", true);
                //write_bool("M1071", false);
                //write_bool("M1072", true);
                //write_bool("M1073", false);
                //write_bool("M1074", true);

                //read_bool("M1053", 1);
                //read_bool("M1054", 1);
                //read_bool("M1067", 1);
                //read_bool("M1068", 1);
                //read_bool("M1069", 1);
                //read_bool("M1070", 1);
                //read_bool("M1071", 1);
                //read_bool("M1072", 1);
                //read_bool("M1073", 1);
                //read_bool("M1074", 1);
                //do
                //{
                //    MCU1Start = GetPLCMcuStatus1();
                //    if (MCU1Start == false)
                //    {
                //        ShowMsg("MCU1 not ready\r\n", 0);
                //    }
                //    MCU1Start = GetPLCMcuStatus2();
                //    if (MCU2Start == false)
                //    {
                //        ShowMsg("MCU2 not ready\r\n", 0);
                //    }

                //} while ((MCU1Start == false)&& MCU1Start == false);
                //else
                {

                    //ShowMsg("MCU ready\r\n", 0);
             
                    if (ComboBox_COM.SelectedIndex < 0)
                    {

                    }
                    else
                    {
                        ///Thread t = new Thread(new ThreadStart(Connect_thread1));
                        ///
                        //t.Start();
                        //LabelControl("BUSY...", 1);
                    }

                   

                }
                //COMFinished[1] = true;
                //COMFinished[2] = true;
                //COMFinished[3] = true;
                //COMFinished[4] = true;
                //COMResult[1] = true;
                //COMResult[2] = true;
                //COMResult[3] = true;
                //COMResult[4] = true;


                ////if (COMFinished[1] == true)
                //{
                //    SetPLCMcu2Chip1Result(true);
                //    Mcu1Finished++;
                //    COMFinished[1] = false;
                //}
                ////if (COMFinished[2] == true)
                //{
                //    SetPLCMcu2Chip2Result(true);
                //    Mcu1Finished++;
                //    COMFinished[2] = false;
                //}
                ////if (COMFinished[3] == true)
                //{
                //    SetPLCMcu2Chip3Result(true);
                //    Mcu1Finished++;
                //    COMFinished[3] = false;
                //}
                ////if (COMFinished[4] == true)
                //{
                //    SetPLCMcu2Chip4Result(true);
                //    Mcu1Finished++;
                //    COMFinished[4] = false;
                //}
                //Thread.Sleep(100);

                ////if (Mcu1Finished == 4)
                //{
                //    SetPLCMcuFinish2(true);
                //    //COMFinished[1] = false;
                //    //COMFinished[2] = false;
                //    //COMFinished[3] = false;
                //    //COMFinished[4] = false;
                //    Mcu1Finished = 0;
                //}


                ////if (COMFinished[1] == true)
                //{
                //    SetPLCMcu1Chip1Result(true);
                //    Mcu1Finished++;
                //    COMFinished[1] = false;
                //}
                ////if (COMFinished[2] == true)
                //{
                //    SetPLCMcu1Chip2Result(true);
                //    Mcu1Finished++;
                //    COMFinished[2] = false;
                //}
                ////if (COMFinished[3] == true)
                //{
                //    SetPLCMcu1Chip3Result(true);
                //    Mcu1Finished++;
                //    COMFinished[3] = false;
                //}
                ////if (COMFinished[4] == true)
                //{
                //    SetPLCMcu1Chip4Result(true);
                //    Mcu1Finished++;
                //    COMFinished[4] = false;
                //}
                Thread.Sleep(100);
                ////if (Mcu1Finished == 4)
                //{
                //    SetPLCMcuFinish1(true);
                //    //COMFinished[1] = false;
                //    //COMFinished[2] = false;
                //    //COMFinished[3] = false;
                //    //COMFinished[4] = false;
                //    Mcu1Finished = 0;
                //}
                PLCClose();
            }

        }
        private bool GetPLCMcuStatus1( )
        {
           bool MCUStart = false;
            PLCResult = read_bool("M1003", 1);
            if (PLCResult.IsSuccess == true)
            {
                MCUStart = PLCResult.Content;
            }
            
            return MCUStart;
        }
        private bool GetPLCMcuStatus2()
        {
            bool MCUStart = false;
            PLCResult = read_bool("M1004", 1);
            if (PLCResult.IsSuccess == true)
            {
                MCUStart = PLCResult.Content;
            }

            return MCUStart;
        }
        private bool SetPLCMcuStatus1(bool bVal)
        {
            PLCChipResult = write_bool("M1003", bVal);
                       
            return PLCChipResult.IsSuccess;
        }
        private bool SetPLCMcuStatus2(bool bVal)
        {;
            PLCChipResult = write_bool("M1004", bVal);

            return PLCChipResult.IsSuccess;
        }
        private bool SetPLCMcuFinish1( bool bResult)
        {
            PLCChipResult = write_bool("M1053", bResult);
           
            return PLCChipResult.IsSuccess;
        }
        private bool SetPLCMcuFinish2(bool bResult)
        {
            PLCChipResult = write_bool("M1054", bResult);
 
            return PLCChipResult.IsSuccess;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            byte rc = PLCConnect(ProgaramerOrderProcess1_Obj.DisplayText_obj.IPAddr, int.Parse(ProgaramerOrderProcess1_Obj.DisplayText_obj.Port));
            if (rc == (byte)eErrNumber.Succesful)
            {
                //write_bool("M1003", true);
                //read_bool("M1003", 1);
                //write_bool("M1004", true);
                //read_bool("M1004", 1);

                //write_bool("M1053", true);
                //read_bool("M1053", 1);
                write_bool("M1004", true);
                read_bool("M1004", 1);



                //write_bool("M1067", true);
                //write_bool("M1068", true);
                //write_bool("M1069", true);
                //write_bool("M1070", true);
                //write_bool("M1053", true);
                //write_bool("M1071", true);
                //write_bool("M1072", true);      
                //write_bool("M1073", true);
                //write_bool("M1074", true);
                //write_bool("M1054", true);
                ////read_bool("M1053", 1);
                //read_bool("M1054", 1);
                //read_bool("M1067", 1);
                //read_bool("M1068", 1);
                //read_bool("M1069", 1);
                //read_bool("M1070", 1);
                //read_bool("M1071", 1);
                //read_bool("M1072", 1);
                //read_bool("M1073", 1);
                //read_bool("M1074", 1);
                //do
                //{
                //    MCU1Start = GetPLCMcuStatus1();
                //    if (MCU1Start == false)
                //    {
                //        ShowMsg("MCU1 not ready\r\n", 0);
                //    }
                //    MCU1Start = GetPLCMcuStatus2();
                //    if (MCU2Start == false)
                //    {
                //        ShowMsg("MCU2 not ready\r\n", 0);
                //    }

                //} while ((MCU1Start == false)&& MCU1Start == false);
                //else
                //{

                    //ShowMsg("MCU ready\r\n", 0);

                    //if (ComboBox_COM.SelectedIndex < 0)
                    //{

                    //}
                    //else
                    //{
                    //    ///Thread t = new Thread(new ThreadStart(Connect_thread1));
                    //    ///
                    //    //t.Start();
                    //    //LabelControl("BUSY...", 1);
                    //}



                //}
                //COMFinished[1] = true;
                //COMFinished[2] = true;
                //COMFinished[3] = true;
                //COMFinished[4] = true;
                //COMResult[1] = true;
                //COMResult[2] = true;
                //COMResult[3] = true;
                //COMResult[4] = true;


                //////if (COMFinished[1] == true)
                ////{
                ////    SetPLCMcu2Chip1Result(true);
                ////    Mcu1Finished++;
                ////    COMFinished[1] = false;
                ////}
                //////if (COMFinished[2] == true)
                ////{
                ////    SetPLCMcu2Chip2Result(true);
                ////    Mcu1Finished++;
                ////    COMFinished[2] = false;
                ////}
                //////if (COMFinished[3] == true)
                ////{
                ////    SetPLCMcu2Chip3Result(true);
                ////    Mcu1Finished++;
                ////    COMFinished[3] = false;
                ////}
                //////if (COMFinished[4] == true)
                ////{
                ////    SetPLCMcu2Chip4Result(true);
                ////    Mcu1Finished++;
                ////    COMFinished[4] = false;
                ////}
                ////Thread.Sleep(100);

                //////if (Mcu1Finished == 4)
                ////{
                ////    SetPLCMcuFinish2(true);
                ////    //COMFinished[1] = false;
                ////    //COMFinished[2] = false;
                ////    //COMFinished[3] = false;
                ////    //COMFinished[4] = false;
                ////    Mcu1Finished = 0;
                ////}


                ////if (COMFinished[1] == true)
                //{
                //    SetPLCMcu1Chip1Result(true);
                //    Mcu1Finished++;
                //    COMFinished[1] = false;
                //}
                ////if (COMFinished[2] == true)
                //{
                //    SetPLCMcu1Chip2Result(true);
                //    Mcu1Finished++;
                //    COMFinished[2] = false;
                //}
                ////if (COMFinished[3] == true)
                //{
                //    SetPLCMcu1Chip3Result(true);
                //    Mcu1Finished++;
                //    COMFinished[3] = false;
                //}
                ////if (COMFinished[4] == true)
                //{
                //    SetPLCMcu1Chip4Result(true);
                //    Mcu1Finished++;
                //    COMFinished[4] = false;
                //}
                //Thread.Sleep(100);
                ////if (Mcu1Finished == 4)
                //{
                //    SetPLCMcuFinish1(true);
                //    //COMFinished[1] = false;
                //    //COMFinished[2] = false;
                //    //COMFinished[3] = false;
                //    //COMFinished[4] = false;
                //    Mcu1Finished = 0;
                //}
                PLCClose();
            }
        }
        private int iii = 1; 
        private void button4_Click(object sender, EventArgs e)
        {
            byte rc = PLCConnect(ProgaramerOrderProcess1_Obj.DisplayText_obj.IPAddr, int.Parse(ProgaramerOrderProcess1_Obj.DisplayText_obj.Port));
            if (rc == (byte)eErrNumber.Succesful)
            {
                if (iii == 1)
                {
                    ShowMsg("SetPLCMcu1Chip1Result M1067",0);
                    SetPLCMcu1Chip1Result(true);
                    iii++;
                    PLCClose();
                    return;
                }
                if (iii == 2)
                {
                    ShowMsg("SetPLCMcu1Chip2Result M1068", 0);
                    SetPLCMcu1Chip2Result(true);
                    iii++;
                    PLCClose();
                    return;
                }
                if (iii == 3)
                {
                    ShowMsg("SetPLCMcu1Chip3Result M1069", 0);
                    SetPLCMcu1Chip3Result(true);
                    iii++;
                    PLCClose();
                    return;
                }
                if (iii == 4)
                {
                    ShowMsg("SetPLCMcu1Chip4Result M1070", 0);
                    SetPLCMcu1Chip4Result(true);
                    iii++;
                    PLCClose();
                    return;
                }
                if (iii == 5)
                {
                    ShowMsg("SetPLCMcu2Chip1Result M1071", 0);
                    SetPLCMcu2Chip1Result(true);
                    iii++;
                    PLCClose();
                    return;
                }
                if (iii == 6)
                {
                    ShowMsg("SetPLCMcu2Chip2Result M1072", 0);
                    SetPLCMcu2Chip2Result(true);
                    iii++;
                    PLCClose();
                    return;
                }
                if (iii == 7)
                {
                    ShowMsg("SetPLCMcu2Chip3Result M1073", 0);
                    SetPLCMcu2Chip3Result(true);
                    iii++;
                    PLCClose();
                    return;
                }
                if (iii == 8)
                {
                    ShowMsg("SetPLCMcu2Chip4Result M1074", 0);
                    SetPLCMcu2Chip4Result(true);
                    iii = 1;
                    PLCClose();
                    return;
                }
            }
        }

        private void saveConfigToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveConfig();
        }

        private void loadConfigToolStripMenuItem_Click(object sender, EventArgs e)
        {
        }

        private void button3_Click(object sender, EventArgs e)
        {
            byte rc = PLCConnect(ProgaramerOrderProcess1_Obj.DisplayText_obj.IPAddr, int.Parse(ProgaramerOrderProcess1_Obj.DisplayText_obj.Port));
            if (rc == (byte)eErrNumber.Succesful)
            {
                write_bool("M1003", true);
                read_bool("M1003", 1);
  //              write_bool("M1003", false);
  //              read_bool("M1003", 1);
                //write_bool("M1004", true);
                //read_bool("M1004", 1);

                //write_bool("M1053", true);
                //read_bool("M1053", 1);




                write_bool("M1067", true);
                write_bool("M1068", true);
                write_bool("M1069", true);
                write_bool("M1070", true);

                write_bool("M1053", true);

                write_bool("M1071", true);
                write_bool("M1072", true);
                write_bool("M1073", true);
                write_bool("M1074", true);

                write_bool("M1054", true);
                //read_bool("M1053", 1);
                //read_bool("M1054", 1);
                //read_bool("M1067", 1);
                //read_bool("M1068", 1);
                //read_bool("M1069", 1);
                //read_bool("M1070", 1);
                //read_bool("M1071", 1);
                //read_bool("M1072", 1);
                //read_bool("M1073", 1);
                //read_bool("M1074", 1);
                //do
                //{
                //    MCU1Start = GetPLCMcuStatus1();
                //    if (MCU1Start == false)
                //    {
                //        ShowMsg("MCU1 not ready\r\n", 0);
                //    }
                //    MCU1Start = GetPLCMcuStatus2();
                //    if (MCU2Start == false)
                //    {
                //        ShowMsg("MCU2 not ready\r\n", 0);
                //    }

                //} while ((MCU1Start == false)&& MCU1Start == false);
                //else
                //{

                //    ShowMsg("MCU ready\r\n", 0);

                //    if (ComboBox_COM.SelectedIndex < 0)
                //    {

                //    }
                //    else
                //    {
                //        ///Thread t = new Thread(new ThreadStart(Connect_thread1));
                //        ///
                //        //t.Start();
                //        //LabelControl("BUSY...", 1);
                //    }



                //}
                //COMFinished[1] = true;
                //COMFinished[2] = true;
                //COMFinished[3] = true;
                //COMFinished[4] = true;
                //COMResult[1] = true;
                //COMResult[2] = true;
                //COMResult[3] = true;
                //COMResult[4] = true;


                ////if (COMFinished[1] == true)
                //{
                //    SetPLCMcu2Chip1Result(true);
                //    Mcu1Finished++;
                //    COMFinished[1] = false;
                //}
                ////if (COMFinished[2] == true)
                //{
                //    SetPLCMcu2Chip2Result(true);
                //    Mcu1Finished++;
                //    COMFinished[2] = false;
                //}
                ////if (COMFinished[3] == true)
                //{
                //    SetPLCMcu2Chip3Result(true);
                //    Mcu1Finished++;
                //    COMFinished[3] = false;
                //}
                ////if (COMFinished[4] == true)
                //{
                //    SetPLCMcu2Chip4Result(true);
                //    Mcu1Finished++;
                //    COMFinished[4] = false;
                //}
                //Thread.Sleep(100);

                ////if (Mcu1Finished == 4)
                //{
                //    SetPLCMcuFinish2(true);
                //    //COMFinished[1] = false;
                //    //COMFinished[2] = false;
                //    //COMFinished[3] = false;
                //    //COMFinished[4] = false;
                //    Mcu1Finished = 0;
                //}


                ////if (COMFinished[1] == true)
                //{
                //    SetPLCMcu1Chip1Result(true);
                //    Mcu1Finished++;
                //    COMFinished[1] = false;
                //}
                ////if (COMFinished[2] == true)
                //{
                //    SetPLCMcu1Chip2Result(true);
                //    Mcu1Finished++;
                //    COMFinished[2] = false;
                //}
                ////if (COMFinished[3] == true)
                //{
                //    SetPLCMcu1Chip3Result(true);
                //    Mcu1Finished++;
                //    COMFinished[3] = false;
                //}
                ////if (COMFinished[4] == true)
                //{
                //    SetPLCMcu1Chip4Result(true);
                //    Mcu1Finished++;
                //    COMFinished[4] = false;
                //}
                //Thread.Sleep(100);
                ////if (Mcu1Finished == 4)
                //{
                //    SetPLCMcuFinish1(true);
                //    //COMFinished[1] = false;
                //    //COMFinished[2] = false;
                //    //COMFinished[3] = false;
                //    //COMFinished[4] = false;
                //    Mcu1Finished = 0;
                //}
                PLCClose();
            }
        }

        private bool SetPLCMcu1Chip1Result(bool bResult)
        {
            System.Diagnostics.Debug.WriteLine("1:SetPLCMcu1Chip1Result");
            PLCChipResult = write_bool("M1067", bResult);
            return PLCChipResult.IsSuccess;
        }
        private bool SetPLCMcu1Chip2Result(bool bResult)
        {
            PLCChipResult = write_bool("M1068", bResult);
            return PLCChipResult.IsSuccess;
        }
        private bool SetPLCMcu1Chip3Result( bool bResult)
        {
            PLCChipResult = write_bool("M1069", bResult);
            return PLCChipResult.IsSuccess;
        }
        private bool SetPLCMcu1Chip4Result( bool bResult)
        {
            PLCChipResult = write_bool("M1070", bResult);
            return PLCChipResult.IsSuccess;
        }
        private bool SetPLCMcu2Chip1Result( bool bResult)
        {
            PLCChipResult = write_bool("M1071", bResult);
            return PLCChipResult.IsSuccess;
        }
        private bool SetPLCMcu2Chip2Result( bool bResult)
        {
            PLCChipResult = write_bool("M1072", bResult);
            return PLCChipResult.IsSuccess;
        }
        private bool SetPLCMcu2Chip3Result( bool bResult)
        {
            PLCChipResult = write_bool("M1073", bResult);
            return PLCChipResult.IsSuccess;
        }
        private bool SetPLCMcu2Chip4Result( bool bResult)
        {
            PLCChipResult = write_bool("M1074", bResult);
            return PLCChipResult.IsSuccess;
        }
    }
}
